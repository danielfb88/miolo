
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?php
class BusinessAdminTransaction extends MBusiness implements ITransaction
{
    var $idTransaction;
	var $transaction;
    var $access; // an array of Access objects indexed by idTransaction

    public function __construct($data = NULL)
    {
       parent::__construct('admin',$data);
    }

	public function setData($data)
	{
		$this->idTransaction = $data->idTransaction;
		$this->transaction = strtoupper($data->transaction);
        // $data->access: an array of array(idTransaction, rights)
        $this->setAccess($data->access);
	}

    function getById($id)
    {
        $this->idTransaction = $id; 
        $this->retrieve();
        return $this;
    }

    function getByName($transaction)
    {
        $criteria =  $this->getCriteria();
        $criteria->addCriteria('transaction','=', "'$transaction'");
        return $this->retrieveFromCriteria($criteria);
    }

    function listByGroup($group)
    {
        $criteria =  $this->getCriteria();
        $criteria->addCriteria('access.group.group','=', "'$group'");
        return $this->retrieveAsQuery($criteria);
    }

    function save()
    {
        parent::save();
    }
    
    function delete()
    {
        parent::delete();
    }

    public function listRange($range = NULL)
    {
        $criteria =  $this->getCriteria();
        $criteria->setRange($range);
        return $criteria->retrieveAsQuery();
    }

    public function listAll()
    {
        $criteria =  $this->getCriteria();
        return $criteria->retrieveAsQuery();
    }

    function listByTransaction($transaction = '')
    {
        $criteria =  $this->getCriteria();
        $criteria->addCriteria('transaction','LIKE', "'$transaction%'");
        return $criteria->retrieveAsQuery();
    }

    function getArrayGroups()
    {
        $aGroups = array();
        if ($this->access != NULL)
        {
            if (!is_array($this->access))
            {
                $this->access = array($this->access);  
            }
            foreach($this->access as $a)
            {
                $aGroups[] = array($a->idGroup,$a->rights);
            }
        } 
        return $aGroups;
    }

    function listAccess()
    {
        $criteria =  $this->getCriteria();
        $criteria->AddColumnAttribute('access.idGroup');
        $criteria->AddColumnAttribute('access.group.group');
        $criteria->AddColumnAttribute('access.rights');
        $criteria->addCriteria('idTransaction','=', "'{$this->idTransaction}'");
        $criteria->addOrderAttribute('access.idGroup');
        return $criteria->retrieveAsQuery();
    }

    function listAccessByIdTransaction($idTransaction)
    {
        $criteria =  $this->getCriteria();
        $criteria->AddColumnAttribute('access.idGroup');
        $criteria->AddColumnAttribute('access.group.group');
        $criteria->AddColumnAttribute('access.rights');
        $criteria->addCriteria('idTransaction','=', "'{$idTransaction}'");
        $criteria->addOrderAttribute('access.idGroup');
        return $criteria->retrieveAsQuery();
    }

    private function setAccess($access)
    {
        $this->access = NULL;
        if (count($access))
        {
            foreach($access as $a)
            {
                $this->access[] = $obj = $this->_miolo->GetBusiness('admin','access');
                $obj->idGroup = $this->idGroup;
                $obj->idTransaction = $a[0];
                $obj->rights = $a[1];
            }
        }
    }

    function GetUsersAllowed($action = A_ACCESS)
    {
    }

    function GetGroupsAllowed($action = A_ACCESS)
    {
    }
}
?>
