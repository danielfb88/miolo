
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?php
class BusinessCommonFeriado extends MBusiness
{
    var $data;
    var $descricao;
    var $abrangecia;

    function __construct($data=NULL)
    {
        parent::__construct('common',$data);
    }

	function setData($data)
	{
        $this->data = $data->data;       
        $this->descricao = $data->descricao;       
        $this->abrangencia = $data->abrangencia;       
	}

    function getByData($data)
    {
        $this->setData(NULL);
        $criteria =  $this->getCriteria();
        $date = new MInvertDate($data);
        $criteria->addCriteria('data','=', "'{$date->date}'");
        $this->retrieveFromCriteria($criteria);
        return $this;
    }

    function listRange($range=NULL)
    {
        $criteria =  $this->getCriteria();
        $criteria->setRange($range);
        return $criteria->retrieveAsQuery();
    }

	function listAll()
    {
        $criteria =  $this->getCriteria();
        return $criteria->retrieveAsQuery();
    }

    function feriado($data=NULL)
    {
        if (is_null($data))
        {
            $data = $this->data;
        } 
        $this->getByData($data);
        return (!is_null($this->data));
    }

	function getAbrangencia($data=NULL)
    {
        if (is_null($data))
        {
            $data = $this->data;
        } 
        $this->getByData($data);
        return ($this->abrangencia);
    }

	function isFeriadoNacional($data)
    {
        $this->getAbrangencia($data);
        if ($this->abrangencia == '4' || $this->abrangencia == '5')
            return true;
        else
            return false;
    }

	function isFeriadoByAbrangencia($data, $abrangencia)
    {
		if(is_array($abrangencia))
		{
			$abrangencia = implode(',', $abrangencia);
		}
        $criteria = $this->getCriteria();
		$k = new MKrono();
		$data = $k->invertDate($data);
		$criteria->addCriteria("data", '=', "'$data'");
		$criteria->addCriteria('abrangencia', 'IN', "($abrangencia)");
		$cursor = $criteria->retrieveAsCursor();
		if($cursor->getObject())
		{
			return true;
		}
		else
		{
			return false;
		}
    }

}
?>
