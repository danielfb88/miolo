
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?php
class BusinessCommonUsuario extends MBusiness implements IUser
{
    var $idUsuario;
    var $idPessoa;
    var $idSetor;
    var $login;
    var $password;
    var $passMD5;
    var $nick;
    var $nome;
    var $email;
    var $ativo;
    var $setor;   // object
    var $grupos;  // array
    var $pessoa;  // object

    function __construct($data=null)
    {
       parent::__construct('common',$data);
    }
    
    function GetName()
    {
        return $this->nome;
    }

    function GetId()
    {
        return $this->idUsuario;
    }

    function GetIdPerson()
    {
        return $this->idPessoa;
    }

    function GetIdSector()
    {
        return $this->idSetor;
    }

    function GetById($id)
    {
        $this->idUsuario = $id;
        $this->retrieve();
        $this->nome = $this->pessoa->nome;
	$this->email = $this->pessoa->email;
        $this->GetGroups();
        return $this;
    }

    function GetByLogin($login)
    {
        $criteria =  $this->getCriteria();
        $criteria->addCriteria('login','=', "'$login'");
	$cc = new CriteriaCondition();
        $cc->addCriteria($criteria->getCriteria('ativo','NOT LIKE', "'N'"));
        $cc->addOrCriteria($criteria->getCriteria('ativo','is null'));
	$criteria->addCriteria($cc);
        $this->retrieveFromCriteria($criteria);
        $this->nome = $this->pessoa->nome;
        $this->GetGroups();
        return $this;
    }

    function GetByLoginPass($login,$pass)
    {
        $criteria =  $this->getCriteria();
        $criteria->addCriteria('login','=', "'$login'");
        $criteria->addCriteria('password','=', "'$pass'");
	$cc = new CriteriaCondition();
        $cc->addCriteria($criteria->getCriteria('ativo','NOT LIKE', "'N'"));
        $cc->addOrCriteria($criteria->getCriteria('ativo','is null'));
	$criteria->addCriteria($cc);
        $this->retrieveFromCriteria($criteria);
        $this->nome = $this->pessoa->nome;
        $this->GetGroups();
        return $this;
    }

    function Save()
    {
        $op = $this->IsPersistent() ? OP_UPD : OP_INS;
        parent::save();
        $this->Log($op,"idusuario = $this->idUsuario; login = $this->login;");
    }
    
    function UpdatePassword($password)
    {
        try
        {
            $this->password = $password;
            $this->passMD5 = md5($this->password);
            $this->Save();
            $this->Log(OP_UPD,"password idusuario = $this->idUsuario; login = $this->login"); 
            return true;
        }
        catch (EMioloException $e)
        {
            return false;
        } 
    }

    function UpdatePasswordMD5($passMD5)
    {
        $this->passMD5 = $passMD5;
        $this->Update();        
    }

    function ListByLogin($login)
    {
        $criteria =  $this->getCriteria();
        $criteria->AddColumnAttribute('*');
        $criteria->AddColumnAttribute('pessoa.nome');
        $criteria->AddColumnAttribute('setor.sigla');
        $criteria->addCriteria('login','LIKE', "'{$login}%'");
	$cc = new CriteriaCondition();
        $cc->addCriteria($criteria->getCriteria('ativo','NOT LIKE', "'N'"));
        $cc->addOrCriteria($criteria->getCriteria('ativo','is null'));
	$criteria->addCriteria($cc);
        $criteria->addOrderAttribute('login');
        return $criteria->retrieveAsQuery();
    }

     function ListByLoginInativos($login)
     {
	        $criteria =  $this->getCriteria();
        	$criteria->AddColumnAttribute('*');
        	$criteria->AddColumnAttribute('pessoa.nome');
        	$criteria->AddColumnAttribute('setor.sigla');
        	$criteria->addCriteria('login','LIKE', "'{$login}%'");
	        $criteria->addOrderAttribute('login');
        	return $criteria->retrieveAsQuery();
    }

    function ListRange($range=NULL)
    {
        $sql = new sql('u.idusuario, u.idpessoa, u.idsetor, u.login, u.nick, p.nome, s.siglasetor');
        $sql->SetLeftJoin('cm_usuario u','cm_pessoa p','u.idpessoa=p.idpessoa');
        $sql->SetJoin('cm_usuario u','cm_setor s','u.idsetor=s.idsetor'); 
        $sql->SetRange($range); 
        $query = $this->Query($sql);
        return $query;
    }

    function ListAll()
    {
        $criteria =  $this->getCriteria();
	$criteria->addCriteria('ativo','NOT LIKE', "'N'"); 
        $criteria->addOrCriteria('ativo','is null');
        return $criteria->retrieveAsQuery();
    }

    function ListGruposByIdUsuario($idUsuario)
    {
        $criteria =  $this->getCriteria();
        $criteria->setDistinct(true);
        $criteria->AddColumnAttribute('grupos.idGrupo');
        $criteria->AddColumnAttribute('grupos.grupo');
        $criteria->addCriteria('idUsuario','=', "$idUsuario");
	$cc = new CriteriaCondition();
        $cc->addCriteria($criteria->getCriteria('ativo','NOT LIKE', "'N'"));
        $cc->addOrCriteria($criteria->getCriteria('ativo','is null'));
	$criteria->addCriteria($cc);
        return $criteria->retrieveAsQuery();
    }

    function GetTransactionRights($trans,$login=NULL)
    {
        if (is_null($login))
        {
            $login = $this->login;
        }
        $trans = strtoupper($trans);
        $rights = 0;
        $criteria =  $this->getCriteria();
        $criteria->AddColumnAttribute('max(grupos.acesso.direito)','direito');
        $criteria->addCriteria('login','=', "'$login'");
        $criteria->addCriteria('grupos.acesso.transacao.transacao','=', "'$trans'");
        $query = $criteria->retrieveAsQuery();
        if ( $query )
        {
            $rights = $query->fields('direito');
        }
        return $rights;
    }

    function GetRights()
    {
        $criteria =  $this->getCriteria();
        $criteria->AddColumnAttribute('grupos.acesso.transacao.transacao');
        $criteria->AddColumnAttribute('max(grupos.acesso.direito)','direito');
        $criteria->addCriteria('login','=', "'{$this->login}'");
        $criteria->addGroupAttribute('grupos.acesso.transacao.transacao');
        $query = $criteria->retrieveAsQuery();
        return $query->chunkResult(0,1,false);
    }

    function GetGroups()
    {
        if (is_null($this->grupos))
        {
           $this->retrieveAssociation('grupos');        
        }
    }

    function GetArrayGroups() // converte o array de objetos para um array de strings
    {
        $aGroups = array();
        $this->GetGroups();
        if (count($this->grupos))
        {
            foreach($this->grupos as $grupo)
            {
                $aGroups[$grupo->grupo] = $grupo->grupo;
            }
        }
        return $aGroups; 
    }

    function SetArrayGroups($aGrupos) // converte um array de strings para um array de objetos
    {
        $this->grupos = NULL;
        if (count($aGrupos))
        {
            foreach($aGrupos as $g)
            {
                $grupo = $this->GetBusiness('common','grupo', $g);
                $this->grupos[] = $grupo;
            }
        }
    }

    function ValidatePassword($password)
    {
       $ok = ($this->password == $password);
       if (!$ok)
       {
          $this->AddError('Senha não confere!');
       } 
       return $ok;
    }

    function ValidateMD5Password($password)
    {
       $ok = ($this->passMD5 == $password);
       if (!$ok)
       {
          $this->AddError('Senha não confere!');
       } 
       return $ok;
    }

    function ValidatePasswordMD5($challenge,$response)
    {
       $hash_pass = md5(trim($this->login) . ':' . trim($this->passMD5) . ":" . $challenge);
       $ok = ($hash_pass == $response);
       if (!$ok)
       {
          $this->AddError('Senha não confere!');
       } 
       return $ok;
    }

    function weakPassword()
    {
       $datanasc = $this->pessoa->datanasc;
       $nasc = substr($datanasc,0,2) . substr($datanasc,3,2) . substr($datanasc,8,2);
       $this->_miolo->trace('DataNasc: ' . $nasc);
       $weak = ($this->passMD5 == md5('010101')) || ($this->passMD5 == md5($nasc));
       return $weak;
    }

    function isMemberOf($grupo)
    {
        $ok = false;
        if (count($this->grupos))
        {
            foreach($this->grupos as $grupo)
            {
                $ok = $ok || ($grupo == $grupo->grupo);
            }
        }
        return $ok;
    }

    function GetSetorProvimento()
    {
    	// Se o login for admin retorna 988 (CENTRAL) pois admin não tem setor
    	if ($this->login == 'admin')
		    return '148';
		
        $sql = new sql('idsetor','rh_provimento','datafim is null and idvinculo = ?');	
    	$args = array($this->login);
	    $query = $this->Query($sql,$args);     	
    
        if (is_null($query->fields('idsetor')))
            return '148';
        else
            return $query->fields('idsetor');
    }

    function GetById2($id)
    {
      	$this->idusuario = $id;
	$this->retrieve();
	return $this;
    }
   
   function GetIdPessoa()
   {
    	return $this->idPessoa;
   }

   function ListBySetor($idSetor)
   {
	$criteria =  $this->getCriteria();
	$criteria->AddColumnAttribute('*');
	$criteria->addCriteria('idsetor','=', "'$idSetor'");
	$criteria->addOrderAttribute('login');
	return $criteria->retrieveAsQuery();
   }
   
   //Retorna quantidade de Logins na tabela cm_usuarios iguais do banco de dados.
	function countByLogin($login)
    {
		$busca = "select count(*) as total from cm_usuario where login = '$login'";					
		return pg_fetch_result( pg_query($busca) ,0, 'total' );
    }

}

?>
