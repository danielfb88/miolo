
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?
MIOLO::Import('modules::common::controls::selectionuf');
class frmPessoaDocumentos extends Form
{
	/**
	 * Objeto pessoa
	 * @access protected
	 * @var BusinessCommonPessoa
	 */
	protected $pessoa;
        
    const TITULO = 4;
	
	public function __construct($pessoa)
	{
        $this->pessoa = $pessoa;
		parent::__construct('Documentos');
        $this->EventHandler();
        $this->page->AddJsCode(file_get_contents(dirname(__FILE__) . '/../../ui/js/mask.js'));
    }

    public function CreateFields()
    {
    
        $perms = $this->manager->getPerms();    
        
        $uf = new BusinessCommonUf();      
		$fields = array(
			new TextHeader('',self::TITULO,'Registro Geral'),
            array(
				new TextField('numrg','','Número RG',20),
				new TextField('tiporg','','Tipo RG',10),
				new TextField('orgaorg','','Órgão expedidor',10),
            ),
            array(
            	new MSelection('ufrg','','UF', $uf->ListAll()->result),
                new CalendarField('datarg','','Data expedição',10,'15'),
            ),
			
            new TextHeader('',self::TITULO,'Cadastro de Pessoa Física'),
            array(
    			new TextField('cpf','','CPF',14)
    			
            ),
            
            new TextHeader('',self::TITULO,'Título de Eleitor'),
            array(
			    new TextField('tituloeleitor','','N. Título Eleitor',13),
    			new TextField('zonatitulo','','Zona Eleitoral',3),
	    		new TextField('secaotitulo','','Seção Eleitoral',3),
				new MSelection('uftitulo','','UF Título', $uf->ListAll()->result),
            ),
            
            new TextHeader('',self::TITULO,'Documento Militar'),
            array(
			    new TextField('numdocmilitar', '', 'N. do Doc Militar', 12),
    			new TextField('tipodocmilitar','','Tipo',3),
	    		new TextField('orgexpdocmilitar','','Órgão expedidor',3),
				new TextField('seriedocmilitar','','Série', 1),
				new TextField('categdocmilitar','','Categoria', 1)
            ),

            new TextHeader('',self::TITULO,'Certidão de Nascimento ou Casamento'),
            array(
			    new TextField('numcert', '', 'N. Certidão', 6),
    			new TextField('livrocert','','Livro',10),
	    		new TextField('folhacert','','Folha',3),
				new TextField('cartorio','','Cartório', 60)
            ),


		);
		
		$this->SetFields($fields);
		
		$this->cpf->addAttribute('maxlength',18);
		$this->cpf->addAttribute('onKeyUp','makeMask(this, \'###.###.###-##\');');
		$this->cpf->addAttribute('onBlur','makeMask(this, \'###.###.###-##\');');
				
		$buttons = array(
			new FormButton('btnSalvar','Enviar')
		);
		$this->SetButtons($buttons);
        $this->setButtonAttr('btnSalvar','visible',$perms->checkAccess('rh_pessoas',A_ACCESS));
		
		$this->cpf->AddAttribute('maxlength','14');		 
		$this->numrg->AddAttribute('maxlength','15');	
		$this->tiporg->AddAttribute('maxlength','20');
		$this->orgaorg->AddAttribute('maxlength','20');	
		$this->zonatitulo->AddAttribute('maxlength','3');	
		$this->tituloeleitor->AddAttribute('maxlength','12');	
		$this->secaotitulo->AddAttribute('maxlength','4');	
		$this->tipodocmilitar->AddAttribute('maxlength','3');	
		$this->orgexpdocmilitar->AddAttribute('maxlength','3');	
		$this->seriedocmilitar->AddAttribute('maxlength','1');	
		$this->categdocmilitar->AddAttribute('maxlength','1');	
		$this->numcert->AddAttribute('maxlength','6');	
		$this->livrocert->AddAttribute('maxlength','10');	
		$this->folhacert->AddAttribute('maxlength','3');	
		$this->cartorio->AddAttribute('maxlength','60');	
			 
		
		$this->defaultButton = false;
		
		$validators = array(
			new CPFValidator('cpf','','require','O Campo CPF é obrigatório!'),
			new IntegerValidator('tituloeleitor','','(^-?[0-9][0-9]*$)','N. do Título de Eleitor Inválido: Digite somente numeros!'),
			new IntegerValidator('numdocmilitar','','(^-?[0-9][0-9]*$)','N. do Doc Militar Inválido: Digite somente numeros!'),
			new IntegerValidator('numcert','','(^-?[0-9][0-9]*$)','N. da Certidão Inválida: Digite somente numeros!'),
			new IntegerValidator('zonatitulo','','(^-?[0-9][0-9]*$)','Zona do Título de Eleitor Inválida: Digite somente numeros!'),
			new IntegerValidator('secaotitulo','','(^-?[0-9][0-9]*$)','Seção do Titulo Eleitor Inválida: Digite somente numeros!'),
			new IntegerValidator('categdocmilitar','','(^-?[0-9][0-9]*$)','Categoria do Documento Militar Inválida: Digite somente numeros!'),
			new IntegerValidator('folhacert','','(^-?[0-9][0-9]*$)','Campo Folha: Digite somente numeros!'),			
			new MDateDMYValidator('datarg','','optional','Campo Data RG: Digite insira uma data válida!')			
			
		);
		
		$this->SetValidators($validators);
		$this->SetData();
	}

	function SetData()  
	{
        $data = $this->pessoa;
        $this->SetFieldValue('numrg', $data->numrg);
        $this->SetFieldValue('tiporg', $data->tiporg);
        $this->SetFieldValue('orgaorg', $data->orgaorg);
        $this->SetFieldValue('ufrg', $data->ufrg);
        $this->SetFieldValue('datarg', $data->datarg);
                
        $this->SetFieldValue('cpf', $this->convertCPF($data->cpf));
                
        $this->SetFieldValue('tituloeleitor', $data->tituloeleitor);
        $this->SetFieldValue('zonatitulo', $data->zonatitulo);
        $this->SetFieldValue('secaotitulo', $data->secaotitulo);
        $this->SetFieldValue('uftitulo', $data->uftitulo);

        $this->SetFieldValue('numdocmilitar', $data->numdocmilitar);
        $this->SetFieldValue('tipodocmilitar', $data->tipodocmilitar);
        $this->SetFieldValue('orgexpdocmilitar', $data->orgexpdocmilitar);
        $this->SetFieldValue('seriedocmilitar', $data->seriedocmilitar);
        $this->SetFieldValue('categdocmilitar', $data->categdocmilitar);

        $this->SetFieldValue('numcert', $data->numcert);
        $this->SetFieldValue('livrocert', $data->livrocert);
        $this->SetFieldValue('folhacert', $data->folhacert);
        $this->SetFieldValue('cartorio', $data->cartorio);
	}

	function GetData()  
	{
        $data = $this->pessoa;
		$data->numrg    = $this->GetFieldValue('numrg');
		$data->tiporg   = $this->GetFieldValue('tiporg');
		$data->orgaorg  = $this->GetFieldValue('orgaorg');
		$data->ufrg     = trim($this->GetFieldValue('ufrg'));
		$data->datarg   = $this->GetFieldValue('datarg');

		$data->cpf      = $this->GetFieldValue('cpf');
		
		$data->tituloeleitor = $this->GetFieldValue('tituloeleitor');
		$data->zonatitulo    = $this->GetFieldValue('zonatitulo');
		$data->secaotitulo   = $this->GetFieldValue('secaotitulo');
		$data->uftitulo      = trim($this->GetFieldValue('uftitulo'));

		$data->numdocmilitar      = $this->GetFieldValue('numdocmilitar');
		$data->tipodocmilitar     = $this->GetFieldValue('tipodocmilitar');
		$data->orgexpdocmilitar	  = $this->GetFieldValue('orgexpdocmilitar');
		$data->seriedocmilitar    = $this->GetFieldValue('seriedocmilitar');
		$data->categdocmilitar    = $this->GetFieldValue('categdocmilitar');

		$data->numcert			= $this->GetFieldValue('numcert');
		$data->livrocert		= $this->GetFieldValue('livrocert');
		$data->folhacert		= $this->GetFieldValue('folhacert');
		$data->cartorio			= $this->GetFieldValue('cartorio');

		return $data;
	}

	/**
	 * btnSalvar click
	 */
	
	public function btnSalvar_click()
	{
		$data = $this->GetData();
		$this->pessoa->SetData($data);
		$this->pessoa->cpf = str_replace('-','',str_replace('.','',$this->pessoa->cpf));	
				
		if ((! is_numeric($this->pessoa->cpf)) && ($this->pessoa->cpf!=null))
		{
			$this->AddError("CPF inválido no caso de informação não numérica ou fora dos padrões");
		}
		elseif(($this->pessoa->cpf != null) && ($this->pessoa->findByNomeCPF($this->pessoa->nome, $this->pessoa->cpf) == 0) && ($this->pessoa->findByCPF($this->pessoa->cpf)))
		{
			$this->AddError("CPF já cadastrado.");	
		}
		elseif( date('Ymd') < $this->invert(Form::GetFormValue('datarg')) )
		{		
			$this->AddError('A data de expedição informada é superior à data corrente.');
		}
		else
		{
			$this->pessoa->save();
			$this->pessoa->log(OP_UPD,"Atualização dos dados de documento. Id pessoa: ".$this->pessoa->idpessoa." Via rh");
			$this->AddInfo('Dados atualizados');
		}
	}
	
	/*
	funcao que coloca ponto e o traço no cpf 
	*/
	function convertCPF($cpf)
	{
		if ($cpf!=null)
		{			
			for ($a=0;$a<=strlen($cpf)-1;$a++)
			{
				if (($a==3) || ($a==6) || ($a==9)) 
				{
					if($a!=9)
					{
					  $nCPF.='.'.$cpf[$a];
					}
					 else 
					 {
					  $nCPF.='-'.$cpf[$a];
					 }
				}
				else
				{
					$nCPF.=$cpf[$a];
				}
				
			}			
		 return $nCPF;	
		}
	}
	
	function invert($datainv)
	{//recebe a data e o separador

		$ano=substr("$datainv",6, 4);
		$mes=substr("$datainv",3, 2);
		$dia=substr("$datainv",0, 2);
		$datainv="$ano$mes$dia";

		return $datainv;
	}    		
}
?>
