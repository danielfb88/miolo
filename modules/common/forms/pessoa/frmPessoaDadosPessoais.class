
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?
MIOLO::Import('modules::common::controls::selectionpais');
MIOLO::Import('modules::common::controls::selectionuf');
MIOLO::Import('modules::common::controls::selectionsexo');
MIOLO::Import('modules::common::controls::selectiongruposanguineo');
MIOLO::Import('modules::common::controls::selectionestadocivil');
MIOLO::Import('modules::common::controls::selectionnacionalidade');

/**
 * Formulário de edição de dados pessoais
 */
class frmPessoaDadosPessoais extends MFormAJAX
{
	/**
	 * Objeto pessoa
	 * @access protected
	 * @var BusinessRhPessoa
	 */
	protected $pessoa;
	
	public function __construct($pessoa)
	{
        $this->pessoa = $pessoa;
		parent::__construct('Dados Pessoais');
		$this->registerMethod('ajax_btnAnoChegada');
		$this->page->AddJsCode(file_get_contents(dirname(__FILE__) . '/js/frmDadosPessoaisAjax.js'));
		$this->page->AddJsCode(file_get_contents(dirname(__FILE__) . '/../../ui/js/mask.js'));
        $this->EventHandler();
    }

    public function CreateFields()
    {
		global $MIOLO, $action;
		
        $perms = $MIOLO->getPerms();
	    $tabelaGeral = $MIOLO->GetBusiness('common','tabelageral');
	    $etnias = $tabelaGeral->ListByTabela('RH_ETNIA');		
		$et = $etnias->chunkResult();
		asort($et);
		reset($et);
		
	    $titulacao = $tabelaGeral->ListByTabela('RH_TITULACAO');		
		$tit = $titulacao->chunkResult();
		asort($tit);
		reset($tit);		

		$fields = array(
			new MTextField('nome','','Nome',60),
            array(
			    new SelectionSexo('sexo','','Sexo'),
				new TextField('datanasc','','Data Nascimento',15,"Ex: 20/05/2008"),
			    new SelectionGrupoSanguineo('gruposanguineo','','Grupo Sangüíneo'),
            ),
			new MHiddenField('idmunicipionascimento',''),	
            new MLookupFieldValue('lkpNaturalidade','','Naturalidade',55),
			new MTextField('nomepai','','Nome do Pai',60),
			new MTextField('nomemae','','Nome da Mãe',60),
			new SelectionEstadoCivil('idestadocivil','','Estado Civil'),
			new MSelection('etnia','','Etnia', $et),
			new SelectionNacionalidade('idpaisnacionalidade','','Nacionalidade'),
			new SelectionPais('idpaisnascimento','','País de Nascimento'),
			new MDiv('anochegbrasil',''),
		);
		
		$fieldschrome = array(
			new MTextField('nome','','Nome',60),
            array(
			    new SelectionSexo('sexo','','Sexo'),
				new TextField('datanasc','','Data Nascimento',15,"Ex: 20/05/2008"),
			    new SelectionGrupoSanguineo('gruposanguineo','','Grupo Sangüíneo'),
            ),
			new MHiddenField('idmunicipionascimento',''),	
            new MLookupFieldValue('lkpNaturalidade','','Naturalidade',55),

			array(
			new MTextField('nomepai','','Nome do Pai',60),
			new MTextField('nomemae','','Nome da Mãe',60),
			new MSpacer(),
			new SelectionEstadoCivil('idestadocivil','','Estado Civil'),
			new MSelection('etnia','','Etnia', $et),
			new SelectionNacionalidade('idpaisnacionalidade','','Nacionalidade'),
			new SelectionPais('idpaisnascimento','','País de Nascimento'),
			),
			new MDiv('anochegbrasil',''),
		);

		if($this->is_chrome())
		{
		$this->SetFields($fieldschrome);
		}else{
        $this->SetFields($fields);
			}
			
		//Validação do campo datanasc
    	$this->datanasc->addAttribute('onKeyUp','makeMask(this, \'##/##/####\');');
    	$this->datanasc->addAttribute('onBlur','makeMask(this, \'##/##/####\');');
		
		$this->idpaisnascimento->addAttribute('onChange','doAnoChegada();');

		$this->SetFieldAttr('escolaridade','readonly',TRUE);
		$this->SetFieldAttr('titulacao','readonly',TRUE);
		$this->SetFieldAttr('lkpNaturalidade','module','rh');
	    $this->SetFieldAttr('lkpNaturalidade','item','municipio');
	    $this->SetFieldAttr('lkpNaturalidade','event', 'filler');
   	    $this->SetFieldAttr('lkpNaturalidade','related', 'idmunicipionascimento,lkpNaturalidade');

		$validators = array(
			new RequiredValidator('datanasc'),
       		new MDATEDMYValidator('datanasc'),
		);
		
		$buttons = array(
			new MButton('btnSalvar','Enviar')
		);
		$this->SetButtons($buttons);
		$this->SetValidators($validators);
        $this->setButtonAttr('btnSalvar','visible',$perms->checkAccess('rh_pessoas',A_ACCESS));
		

		$this->SetData();
	}
		
	function SetData()  
	{
        global $MIOLO;
		$this->pessoa->retrieveAssociation('municipio');
        $data = $this->pessoa;
        $this->SetFieldValue('nome', $data->nome);
        $this->SetFieldValue('sexo', $data->sexo);
        $this->SetFieldValue('nomepai', $data->nomepai);
        $this->SetFieldValue('nomemae', $data->nomemae);
        $this->SetFieldValue('datanasc', $data->datanasc);
        $this->SetFieldValue('gruposanguineo', $data->gruposanguineo);
        $this->SetFieldValue('idpaisnascimento', $data->idpaisnascimento);
        $this->SetFieldValue('idpaisnacionalidade', $data->idpaisnacionalidade);
        
        $this->SetFieldValue('idestadocivil', $data->idestadocivil);

        $this->SetFieldValue('idmunicipionascimento', $data->idmunicipionascimento);
        if ( $data->idmunicipionascimento )
        {
            $municipio = $MIOLO->GetBusiness('common','municipio');
            $municipio->GetById($data->idmunicipionascimento);
	    	$this->SetFieldValue('lkpNaturalidade', $municipio->municipio . ' ['. trim($municipio->idUF) . ']');
        }

		$this->SetFieldValue('etnia', $data->raca);
	
		//$objFuncionario = $this->manager->GetBusiness('rh','funcionario');
		//$objFuncionario = $objFuncionario->GetFuncionarioByPessoa($this->pessoa->idpessoa);	
	}

	function GetData()  
	{
        $data = $this->pessoa;
		$data->nome                  = $this->GetFormValue('nome');
		$data->sexo                  = $this->GetFormValue('sexo');
		$data->gruposanguineo        = $this->GetFormValue('gruposanguineo');
		$data->datanasc              = $this->GetFormValue('datanasc');
        $data->idmunicipionascimento = $this->GetFormValue('idmunicipionascimento');
		$data->nomepai               = $this->GetFormValue('nomepai');
		$data->nomemae               = $this->GetFormValue('nomemae');
		$data->idestadocivil         = $this->GetFormValue('idestadocivil');
        $data->idpaisnascimento      = $this->GetFormValue('idpaisnascimento');
        $data->idpaisnacionalidade   = $this->GetFormValue('idpaisnacionalidade');
		$data->raca			         = $this->GetFormValue('etnia');
		return $data;
	}

	
    function Validate()
    {
        if ($this->GetFormValue('gruposanguineo') == '-')
        {
            $this->AddError('Informar Grupo Sanguineo');
            return FALSE;
        }
        return TRUE;
    }

    
	public function btnSalvar_click()
	{
        if ($this->validate())
        {
            try
            {
            	if( preg_match("/[0-9]/", Form::GetFormValue('nomepai')) )
				{
					$this->AddError('O nome do pai deverá possuir somente letras.');
				}
				elseif( preg_match("/[0-9]/", Form::GetFormValue('nomemae')) )
				{
					$this->AddError('O nome da mãe deverá possuir somente letras.');
				}
				elseif( date('Ymd') < $this->invert(Form::GetFormValue('datanasc')) )
				{		
					$this->AddError('A data de nascimento informada é superior à data corrente.');
				}
				else
				{		
		            $data = $this->GetData();
		    		$this->pessoa->SetData($data);
			    	$this->pessoa->save();
		            $this->pessoa->log(OP_UPD,"Atualização dos dados pessoais. Id pessoa: ".$this->pessoa->idpessoa." Via rh");
				    $this->AddInfo('Dados atualizados');
				}
            }
            catch ( Exception $e )
            {
                $this->addError($e->getMessage());
            }
        }
	}
	
	
	function ajax_btnAnoChegada($args)
    {	
		global $MIOLO;
        $opcao = $args[0];

		if ( trim($this->pessoa->idpaisnascimento) != 24 )
		{
			$anoChegada = new MTextField('anochegbrasil','','Ano de chegada ao Brasil',4);	
		}
		else 
		{ 
			$anoChegada = new MHiddenField('anochegbrasil','','Ano de chegada ao Brasil',4);
        }
        $anochegbrasil = new MTextField('anochegbrasil2','','Ano de chegada ao Brasil',4);
		$this->manager->getTheme()->setContent($anochegbrasil);
    }
    
	function is_chrome()
	{
		return(eregi("chrome", $_SERVER['HTTP_USER_AGENT']));
	}
	
	function invert($datainv)
	{//recebe a data e o separador

		$ano=substr("$datainv",6, 4);
		$mes=substr("$datainv",3, 2);
		$dia=substr("$datainv",0, 2);
		$datainv="$ano$mes$dia";

		return $datainv;
	}    		
}
?>
