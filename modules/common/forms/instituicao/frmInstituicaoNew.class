
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?
class frmInstituicaoNew extends MForm
{
	var $objInstituicao;

	function __construct()
	{
		parent::__construct('Inserir Nova Instituição');
		$this->EventHandler();
		$this->page->AddJsCode(file_get_contents(dirname(__FILE__) . '/../../ui/js/mask.js'));
	}

	function CreateFields()
	{
		global $MIOLO;

		$objPais = $MIOLO->GetBusiness('common','pais');
		$this->objInstituicao = $MIOLO->GetBusiness('common','instituicao');
		$queryPais = $objPais->ListAll();

		$fields = Array(
			new HiddenField('key',''),
			new TextField  ('instituicao','','Instituição',40),
			new TextField ('sigla','','Sigla',5,'Digite 4 caracteres para a inclusão da sigla'),
			new TextField  ('campus','','Campus',70),   
			new TextField  ('nome','','Nome',70),
			new TextField  ('rua','','Rua',70),
			new TextField  ('numero','','Número',18),
			new TextField  ('complemento','','Complemento',18),
			new TextField  ('bairro','','Bairro',50),
			new TextField  ('cep','','CEP',10),
			new LookupTextField('lkpMunicipio','','Município',50),
			new MHiddenField('idmunicipio',''),
			new MSelection ('idpais','','País',$queryPais->result,$showValues=false),
			new TextField  ('cgc','','CNPJ',20, 'formato (10.000.000/0001-01)'),
			new TextField  ('caixapostal','','Caixa Postal',15),
			new TextField  ('telefone','','Telefone',15,'formato (dd)xxxx-xxxx'),
			new TextField  ('fax','','Fax',15,'formato (dd)xxxx-xxxx'),	
			new TextField  ('email','','e-mail',50, 'Máx. 50 caracteres'), 
			new TextField  ('uasg','','UP',8, 'Máx. 6 números'),
			new TextField  ('ug','','UG (UASG)',6, 'Máx. 6 caracteres'),
			new MSelection ('mesmoif','','Mesmo instituto?',array('S'=>'SIM', 'N'=>'NÃO'),$showValues=false,$hint='Selecione SIM se pertence à mesma instituição, caso contrário NÃO.',$size=''),
		);
		$this->SetFields($fields);

		$this->instituicao->addAttribute('maxlength',80);
		$this->sigla->addAttribute('maxlength',4);
		$this->nome->addAttribute('maxlength',100);
		$this->rua->addAttribute('maxlength',80);
		$this->numero->addAttribute('maxlength',15);
		$this->complemento->addAttribute('maxlength',15);
		$this->bairro->addAttribute('maxlength',50);
		$this->cep->addAttribute('maxlength',9);
		$this->cep->addAttribute('onKeyUp','makeMask(this, \'#####-###\');');
		$this->cep->addAttribute('onBlur','makeMask(this, \'#####-###\');');
		$this->cgc->addAttribute('maxlength',18);
		$this->cgc->addAttribute('onKeyUp','makeMask(this, \'##.###.###/####-##\');');
		$this->cgc->addAttribute('onBlur','makeMask(this, \'##.###.###/####-##\');');
		$this->telefone->addAttribute('maxlength',13);
		$this->telefone->addAttribute('onKeyUp','makeMask(this, \'(##)####-####\');');
		$this->telefone->addAttribute('onBlur','makeMask(this, \'(##)####-####\');');
		$this->fax->addAttribute('maxlength',13);
		$this->fax->addAttribute('onKeyUp','makeMask(this, \'(##)####-####\');');
		$this->fax->addAttribute('onBlur','makeMask(this, \'(##)####-####\');');

		$this->caixapostal->addAttribute('maxlength',15);

		$this->telefone->addAttribute('maxlength',15);
		$this->fax->addAttribute('maxlength',15);
		$this->email->addAttribute('maxlength',50);

		$this->uasg->addAttribute('maxlength',6);
		$this->ug->addAttribute('maxlength',6);

		$this->SetFieldAttr('lkpMunicipio','module','common');
		$this->SetFieldAttr('lkpMunicipio','item','municipio');
		$this->SetFieldAttr('lkpMunicipio','event', 'filler');
		$this->SetFieldAttr('lkpMunicipio','related', 'idmunicipio,lkpMunicipio');

		$buttons = Array(
			new FormButton('btnNew', 'Incluir'),
		);
		$this->SetButtons($buttons);

		$validators = array(
			new MRequiredValidator('instituicao'),
			new MRequiredValidator('sigla'),
			new MRequiredValidator('nome'),
			new MRequiredValidator('rua'),
			new MRequiredValidator('numero'),
			new MRequiredValidator('bairro'),
			new CEPValidator('cep'),
			new MRequiredValidator('lkpMunicipio'),
			new MCNPJValidator('cgc','','required','Informe um CNPJ Válido'),
			new MRequiredValidator('ug'),
			new EmailValidator('email'),
		);
		$this->SetValidators($validators);
	}

	function btnNew_click()
	{

		if( strlen(trim(Form::GetFormValue('instituicao'))) < 4)
		{
			$this->AddError('Informe o campo instituição.');
		}
		elseif( strlen(trim(Form::GetFormValue('sigla'))) < 2 )
		{
			$this->AddError('Informe a sigla da Instituição, a mesma deve possuir pelo menos duas letras');
		}
		elseif( strlen(trim(Form::GetFormValue('campus'))) == 0)
		{
			$this->AddError('Informe o campo "Campus".');
		}
		elseif( strlen(trim(Form::GetFormValue('nome'))) < 3 )
		{
			$this->AddError('O nome da instituição parece estar incorreto.');
		}
		elseif( strlen(trim(Form::GetFormValue('rua'))) == 0)
		{
			$this->AddError('Informe o campo "Rua".');
		}
		elseif( strlen(trim(Form::GetFormValue('numero'))) == 0)
		{
			$this->AddError('Informe o campo "Número".');
		}
		elseif( (Form::GetFormValue('numero')!='') and preg_match("/\D/", Form::GetFormValue('numero')) )
		{
			$this->AddError('Informe um valor válido para o campo "Número".');
		}
		elseif( strlen(trim(Form::GetFormValue('bairro'))) == 0)
		{
			$this->AddError('Informe o campo "Bairro".');
		}
		elseif( (Form::GetFormValue('lkpMunicipio') == '') or (Form::GetFormValue('idmunicipio') == ''))
		{
			$this->AddError('Selecione o município.');
		}
		elseif( Form::GetFormValue('idpais') == '' )
		{
			$this->AddError('Selecione o país.');
		}
		elseif( (Form::GetFormValue('caixapostal')!='') and preg_match("/\D/", Form::GetFormValue('caixapostal')) )
		{
			$this->AddError('Informe um valor válido para o campo "Caixa Postal".');
		}
		elseif( (Form::GetFormValue('telefone')!='') and preg_match("/\D/", Form::GetFormValue('telefone')) and 
			strlen(trim(Form::GetFormValue('telefone'))) < 13 )
		{
			$this->AddError('Informe um valor válido para o campo "Telefone".');
		}
		elseif( (Form::GetFormValue('fax')!='') and preg_match("/\D/", Form::GetFormValue('fax')) and 
			strlen(trim(Form::GetFormValue('fax'))) < 13 )
		{
			$this->AddError('Informe um valor válido para o campo "Fax".');
		}
		elseif( (Form::GetFormValue('uasg')!='') and preg_match("/\D/", Form::GetFormValue('uasg')) )
		{
			$this->AddError('O campo UP deve ser um número.');
		}
		elseif( strlen(trim(Form::GetFormValue('ug'))) < 2 )
		{
			$this->AddError('Informe a UG da Instituição.');
		}
		elseif( Form::GetFormValue('mesmoif') == '' )
		{
			$this->AddError('Informe o campo Mesmo instituto.');
		}		
		else
		{
			global $MIOLO, $module, $self, $action;

			$objInstituicao = &$this->objInstituicao;

			if ( $objInstituicao )
			{
				$objInstituicao->SetData($this->GetData()); 
				$objInstituicao->status = 'A';
				$objInstituicao->cep = str_replace("-", "", $objInstituicao->cep);				
				$objInstituicao->cgc = str_replace(".","", $objInstituicao->cgc);
				$objInstituicao->cgc = str_replace("/","", $objInstituicao->cgc);
				$objInstituicao->cgc = str_replace("-","", $objInstituicao->cgc);
				
				//Retorna quantidade de CNPJ iguais do banco de dados, se for maior do que zero já existe um CNPJ igual cadastrado.
				if($objInstituicao->countByCNPJ($objInstituicao->cgc))
				{
					$this->addError('CNPJ já cadastrado.');				
				}
				else
				{
					try
					{
						$objInstituicao->Insert();
						$objInstituicao->Log(OP_INS,"Instituição cadastrada com sucesso.");
						$MIOLO->Information('Instituição adicionada com sucesso.', $MIOLO->GetActionURL('common', 'main:instituicao:find'));
					}
					catch (Exception $e)
					{
						$this->addError($e->getMessage());
					}
				}
			}
		}
	}
}
?>
