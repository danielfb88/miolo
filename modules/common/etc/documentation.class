
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?

#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# This class generates documentation for a PHP source file. It is 
# assumed, that the documentation is included in special comment 
# blocks.
# <br><br>
# In either case, a skeleton of the source code will be generated.
#
# @example
# #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# # Documentation comment block
# #-------------------------------------------------------------------
#
# <center><b>File Level Documentation Block</b></center>
# #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# # <b>@title</b>
# #   Form and Form Elements
# #
# # <b>@description</b>
# #   This file contains the form and form elements definitions
# #
# # <b>@see</b>
# #           miolo/ui/tabbedform.class,
# #           miolo/ui/themepainter.class
# #
# # <b>@topics</b>   form, ui
# #
# # <b>@created</b> 2001/08/14
# #
# # <b>@organisation</b>
# #   MIOLO - Miolo Development Team - UNIVATES Centro Universitario
# #
# # <b>@legal</b>
# #   CopyLeft (L) 2001-2002 UNIVATES, Lajeado/RS - Brasil
# #   Licensed under GPL (see COPYING.TXT or FSF at www.fsf.org for
# #   further details)
# #
# # <b>@contributors</b>
# #   Thomas Spriestersbach    [author] [ts@interact2000.com.br]
# #   Vilson Cristiano Gartner [author] [vgartner@univates.br]
# # 
# # <b>@maintainers</b>
# #   Thomas Spriestersbach    [author] [ts@interact2000.com.br]
# #   Vilson Cristiano Gartner [author] [vgartner@univates.br]
# #
# # <b>@history</b>
# #   $Log: documentation.class,v $
# #   Revision 1.1  2002/09/17 18:52:00  vgartner
# #   added 'component' support
# #
# #   Revision 1.3  2002/09/11 16:11:00  thomas
# #   modifications by ts
# #
# #   Revision 1.2  2002/09/05 00:59:16  vgartner
# #   project maintenance for CVS
# #
# #
# # <b>@id</b> $Id: documentation.class,v 1.1 2002/09/17 18:52:00 vgartner Exp $
# #-------------------------------------------------------------------
# 
# <center><b>Class Level Documentation Block</b></center>
# #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# # Class level documentation block. At this level, one would provide
# # a generalized description of the class. Perhaps one would like
# # emphasize some methods or related classes.
# # 
# # You can embed example code directly in the documentation block.
# # To achieve this, use the <code>@example</code> tag. The text in
# # this description is kind of an <i>example</i> tag.
# #-------------------------------------------------------------------
# 
# <center><b>Method/Function Level Documentation Block</b></center>
# #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# # 
# # 
# # 
# # 
# # 
# # 
# #-------------------------------------------------------------------
#---------------------------------------------------------------------
class SourceDocumentation extends ThemeElement
{
    var $source;
    
    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    # Constructor of the class.
    # It takes as parameter <code>$source</code>
    # a string containing the full path to a PHP source file, for which
    # to generate the documentation.
    # <br><br>
    #-----------------------------------------------------------------
    function SourceDocumentation($source)
    {
        $this->source = $source;
    }
    
    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    # Overrides the ThemeElement's <code>Generate</code> function,
    # which is used to produce the HTML output for this class.
    #-----------------------------------------------------------------
    function Generate()
    {
        $htm_file = $this->Update();
        
        if ( file_exists($htm_file) )
        {
            echo "<div style=\"padding: 10px; background-color: #ffffff; font-size: 12pt;\">";
            include($htm_file);
            echo "</div>
";
        }
    }
    
    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    # The <code>Update</code> method will generate the related
    # documentation files or return the path to the static html file
    # if nothing has changed in the meantime.
    # <br><br>
    # All parsing/processing to produce the documentation outout is
    # done in this method.
    # <br><br>
    # In fact: this method produces three output files from parsing the
    # php source:
    # <ul>
    #   <li>an XML file containing the skeleton of the source.
    #   <li>an DIA file containing the UML diagram definition of the source
    #       using the <code>doc2dia.xslt</code> stylesheet.
    #   <li>an HTML file containing the HTML output of the applied
    #       <code>doc2html.xslt</code> stylesheet.
    # </ul>
    #-----------------------------------------------------------------
    function Update($force_rebuild=false)
    {   global $MIOLO,$MIOLOCONF;
        
        $file = $this->source;
        
        if ( $file )
        {
            // obtaining base filename
            $htm_home = $MIOLOCONF['home']['html'];
            $doc_home = $htm_home . '/miolo/doc/';
        
            // make file absolute path
            if ( substr($file,0,1) != '/' )
            {
                $file = $htm_home . '/' . $file;
            }
            
            // strip /./ paths from filename
            $file = str_replace('/./','/',$file);
            
            $base = substr($file,strlen($htm_home)+1);
            $base = substr($base,0,strpos($base,'.'));
            $base = str_replace('/','_',$base);
        
            // $xml_file = '/tmp/miolo-doc-' . getmypid() . '.xml';
            $parser   = $MIOLO->GetModulePath('common','etc/code2xml.php');
            $sabcmd   = '/usr/local/bin/sabcmd';
            
            $xml_file = $doc_home . 'xml/'  . $base . '.xml'; 
            $dia_file = $doc_home . 'dia/'  . $base . '.dia';
            $htm_file = $doc_home . 'html/' . $base . '.html'; 
            
            // locations of used transforming stylesheets
            $doc_xslt = $MIOLO->GetModulePath('common','etc/doc2html.xslt');
            $dia_xslt = $MIOLO->GetModulePath('common','etc/doc2dia.xslt');
            
            // must rebuild, if no xml has been generated so far
            $must_rebuild = $force_rebuild ||
                            ! file_exists($xml_file) ||
                            ! file_exists($htm_file);
            
            if ( ! $must_rebuild )
            {
                // get dates of involved files 
                $st_src    = stat($file);
                $st_xml    = stat($xml_file);
                $st_parser = stat($parser);
                $st_xslt   = stat($doc_xslt);
                
                $must_rebuild = $st_xml[9] < $st_src[9]    || // xml older than source 
                                $st_xml[9] < $st_parser[9] || // xml older than parser
                                $st_xml[9] < $st_xslt[9];     // xml older than stylesheet 
            }
            
            if ( $must_rebuild ) 
            {
                include_once $parser;
            
                ob_start();
                CodeToXML($file,$base);
                $xml = ob_get_contents();
                ob_end_clean();
                
                // write XML output to tmp file 
                $fp = fopen($xml_file,'w');
                fwrite($fp,$xml);
                fclose($fp);
                
                // generate DIA output via XSLT stylesheet
                $cmd = "$sabcmd \"$dia_xslt\" \"$xml_file\" \"$dia_file\"";
                
                exec($cmd,$output,$rc);
                
                // show output of command if anything has gone wrong
                if ( $rc )
                {
                    echo "<pre>
" . $cmd . "
" . implode("
",$output) . "</pre>
";
                }
                
                // generate HTML output via XSLT stylesheet
                $cmd = "$sabcmd \"$doc_xslt\" \"$xml_file\" \"$htm_file\"";
                
                exec($cmd,$output,$rc);
                
                // show output of command if anything has gone wrong
                if ( $rc )
                {
                    echo "<pre>
" . $cmd . "
" . implode("
",$output) . "</pre>
";
                }
            }
        }
        
        return $htm_file;
    }
}

#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# This class generates documentation index
#---------------------------------------------------------------------
class DocumentationIndex extends FormField
{
    var $context;
    
    function DocumentationIndex($label,$value='miolo')
    {
        $this->FormField($label,'context',$value);
    }
    
    function Generate()
    {   global $MIOLOCONF,$MIOLO;
        
        $MIOLO_HOME = $MIOLOCONF['home']['html'];
        
        // include $MIOLO_HOME . '/miolo/doc/header.inc';
        
        $path = $MIOLO_HOME . '/' . $this->value;
        
        if ( is_dir($path) )
        {
            echo "<a name=\"modules\"></a><blockquote>
";
            $this->ListFiles($path);
            echo "</blockquote>
";
        }
        
        else
        {
            $err = Prompt::Error("Directory '$path' not found!",
                                 $MIOLO->GetActionURL('common','main:doc:index'));
            $err->Generate();                     
        }
        
        // include $MIOLO_HOME . '/miolo/doc/footer.inc';
    }
    
    function ListFiles($dir)
    {   global $MIOLO,$MIOLOCONF;
        
        $MIOLO_HOME = $MIOLOCONF['home']['html'];
        
        $DOC_FILE_TYPES = array('class','inc');

        $fp = opendir($dir);
        
        if ( $fp )
        {
            while ( $ent=readdir($fp) )
            {
                if ( substr($ent,0,1) == '.' )
                {
                    continue;
                }
                
                $path = $dir . '/' . $ent;
                
                if ( is_dir($path) )
                {
                    $dirs[] = $ent;
                }
                
                else if ( is_file($path) )
                {
                    $type = substr(strrchr($ent,'.'),1);
                    
                    if ( in_array($type,$DOC_FILE_TYPES) )
                    {
                        $files[] = $ent;
                    }
                }
            }
            
            closedir($fp);
        }
        
        if ( count($files) )
        {
            sort($files);
            
            $parent = substr(strrchr($dir,'/'),1);
            
            echo "<img src=\"/images/folder.gif\"> <b>$parent</b>
";
            echo "<div style=\"margin-left:20;\">
";
            foreach($files as $f)
            {
                $path = $dir . '/' . $f;
                $base = substr($path,strlen($MIOLO_HOME)+1);
                $base = substr($base,0,strpos($base,'.'));
                $base = str_replace('/','_',$base);
                
                $xml = $MIOLO_HOME . '/miolo/doc/xml/' . $base . '.xml';
                $dia = $MIOLO_HOME . '/miolo/doc/dia/' . $base . '.dia';
                
                $icon = 'doc.gif';
                
                if ( file_exists($xml) )
                {
                    $icon = 'xml.gif';
                }
                
                $action = $MIOLO->GetActionURL('common','main:doc:index:file',$path);
            
                echo "<img src=\"/images/$icon\">&nbsp;<a href=\"$action\">$f</a>";
                
                if ( file_exists($dia) )
                {
                    echo "&nbsp;<a href=\"/miolo/doc/dia/$base.dia\"><img src=\"/images/dia.gif\" border=\"0\"></a>";
                }
                
                echo "<br>
";
            }
            echo "</div>
";
        }
        
        if ( count($dirs) )
        {
            sort($dirs);
            
            foreach($dirs as $d)
            {
                echo "<div style=\"margin-left:20\">
";
                $this->ListFiles($dir.'/'.$d);
                echo "</div>
";
            }
        }
    }
}

#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# This class generates an alphabetical function index
#---------------------------------------------------------------------
class FunctionIndex extends FormField
{
    function FunctionIndex()
    {
        $this->FormField('&nbsp;','context','');
    }
    
    function Generate()
    {   global $MIOLO;
        
        $business = $MIOLO->GetBusiness('common','documentation');
        
        $functions = $business->QueryFunctionList();
        
        if ( $functions )
        {
            for( $i=0; $i<count($functions); $i++)
            {
                list ( $source, $class, $name ) = $functions[$i];
                
                $index[$name][] = array($class,$source);
            }
            
            foreach ( $index as $name => $defs )
            {
                unset($link);
                
                foreach($defs as $d)
                {
                    if ( $link )
                    {
                        $link .= ', ';
                    }
                    
                    $href = $MIOLO->GetActionURL('common','main:doc:index:file',$d[1] . '#' . $d[0] . '::' . $name);
                    
                    $link .= "<a href=\"$href\">{$d[0]}</a>";
                }
                
                list ( $source, $class ) = $defs;
                
                $c = strtoupper(substr($name,0,1));
                
                if ( $section != $c )
                {
                    if ( $section )
                    {
                        echo "<br>
";
                    }
                    echo "<b>$c</b><hr>
";
                    $section = $c;
                }
                
                // echo "&nbsp;&nbsp;&nbsp;$name <span style=\"font-size: 8pt;\">($link)</span><br>
";
                echo "<div style=\"margin-left:50;text-indent:-30;\">$name <span style=\"font-size: 8pt;\">($link)</span></div>
";
            }
        }
    }
}

?>
