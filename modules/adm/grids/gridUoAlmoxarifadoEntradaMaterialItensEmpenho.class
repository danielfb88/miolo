<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

global $MIOLO;
class gridUoAlmoxarifadoEntradaMaterialItensEmpenho extends MGrid
{
    function __construct($objEmpenho)
    {
        global $MIOLO, $page, $action;
        $objEmpenho->getEmpenhado();
        $cf = new MCurrencyFormatter();
        foreach ($objEmpenho->empenhado as $empenhado)
        {
            $empenhado->getAtributos();
            if ($cf->toDecimal($empenhado->quantidadeSaldo))
            {
                $valorUnitario = round($cf->toDecimal($empenhado->valorEmp) / $cf->toDecimal($empenhado->quantidadeEmp),2); 
                $dados[$empenhado->idEmpenhado][0] = $empenhado->idEmpenhado;
                $dados[$empenhado->idEmpenhado][1] = $empenhado->item;
                $dados[$empenhado->idEmpenhado][2] = $empenhado->itemreq[0]->material->descricao;
                $dados[$empenhado->idEmpenhado][3] = $empenhado->itemreq[0]->material->unidade;
                $dados[$empenhado->idEmpenhado][4] = $cf->toDecimal($empenhado->quantidadeSaldo);
                $dados[$empenhado->idEmpenhado][5] = 0;
                $dados[$empenhado->idEmpenhado][6] = $cf->toDecimal($empenhado->quantidadeEntregue);
                $dados[$empenhado->idEmpenhado][7] = $cf->formatWithSymbol($valorUnitario);
            }
        }
        $quantAutorizada = Form::getFormValue('quantAutorizada');
        if (round($cf->toDecimal($objEmpenho->valorSaldo),2) == round($cf->toDecimal(Form::getFormValue('valor'))+$cf->toDecimal(Form::getFormValue('desconto')),2))
        {
            foreach ($objEmpenho->empenhado as $empenhado)
            {
                foreach ($dados as $idEmpenhado=>$dado)
                {
                    if ($idEmpenhado == $empenhado->idEmpenhado)
                    {
                        $dados[$idEmpenhado][5] = $cf->toDecimal($empenhado->quantidadeSaldo);
                    }
                }
            }
        }
        if ($quantAutorizada)
        {
            foreach ($quantAutorizada as $key=>$quantidade)
            {
                foreach ($dados as $idEmpenhado=>$dado)
                {
                    if ($idEmpenhado == $key)
                    {
                        $dados[$idEmpenhado][5] = $cf->toDecimal($quantidade);
                    }
                }
            }
        }
        $quantAutorizada = new MTextField('quantAutorizada[%0%]','','',5);
        $columns = array(
            new MGridColumn('idEmpenhado','left',false,'',false),
            new MGridColumn('Item','center',false,'6%'),
            new MGridColumn('Material','left',false,'50%'),
            new MGridColumn('Unidade','center',false,'9%'),
            new MGridColumn('Quantidade Empenhada','center',true,'12%'),
            new MGridColumn('Quantidade Empenhada','center',true,'',false),
            new MGridControl($quantAutorizada,'Quantidade Recebida','center',true,'12%',false),
            new MGridColumn('Valor Unitário','center',true,'12%'),
        );
        $this->SetFilter(false);
        parent::__construct($dados,$columns,$action,1000000);
        $this->setRowMethod('gridUoAlmoxarifadoEntradaMaterialItensEmpenho','MyRowMethod');
        $this->SetLinkType('hyperlink');
    }
    function GenerateHeader()
    {
        return null;
    }
    function GenarateFooter()
    {
        return null;
    }
    public function myRowMethod($i,$row,$actions,$columns)
    {
        $columns[6]->control[$i]->setValue($row[5]);
    }
}
