
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?
global $MIOLO;
class gridFinanceiroNotaFiscalItem extends MGrid
{
    function __construct($objEmpenho)
    {
        global $MIOLO, $page, $action, $item;
        $objEmpenho->getNotaFiscal();
        $cf = new MCurrencyFormatter();
        foreach ($objEmpenho->notaFiscal as $nota)
        {
            if ($nota->idNotaFiscal == Form::getFormValue('idNotaFiscal'))
            {
                $this->setTitle("Nota Fiscal {$nota->notaFiscal}");
                foreach ($nota->itens as $itemNota)
                {
                    $itemNota->getItensReq();
                    $itemNota->retrieveAssociation('empenhado');
                    $itemNota->empenhado->retrieveAssociation('itemServExt');
                    $dados[$itemNota->idItemNota][] = $itemNota->idNotaFiscal;
                    $dados[$itemNota->idItemNota][] = $itemNota->idItemNota;
                    $dados[$itemNota->idItemNota][] = $itemNota->empenhado->itemServExt[0]->servico->descricao;
                    $dados[$itemNota->idItemNota][] = $cf->toDecimal($itemNota->quantidade);
                    $dados[$itemNota->idItemNota][] = $cf->formatWithSymbol($cf->toDecimal($itemNota->valor));
                    $dados[$itemNota->idItemNota][] = $cf->formatWithSymbol($cf->toDecimal($itemNota->quantidade)*$cf->toDecimal($itemNota->valor));
                    if ($itemNota->isContabilizado())
                    {
                        $dados[$itemNota->idItemNota][] = 'OK';
                    }
                    else
                    {
                        $dados[$itemNota->idItemNota][] = 'Pendente';
                    }
                }
            }
        }
        $columns = array(
            new MGridColumn('idNotaFiscal','left',false,'',false),
            new MGridColumn('idItemNota','left',false,'',false),
            new MGridColumn('Descrição do serviço','left',false,'45%'),
            new MGridColumn('Quant','center',true,'8%'),
            new MGridColumn('Valor Unitário','center',true,'12%'),
            new MGridColumn('Valor Total','center',true,'12%'),
            new MGridHyperlink('Situação',$MIOLO->GetActionURL('adm','main:financeiro:entradaservico',$item,array('idNotaFiscal'=>'#0#','idItemNota'=>'#1#')),'23%'),
        );
        $this->SetFilter(false);
        parent::__construct($dados,$columns,$action,25);
        $this->SetLinkType('hyperlink');
    }
    function GenerateHeader()
    {
        return null;
    }
    function GenarateFooter()
    {
        return null;
    }
}
