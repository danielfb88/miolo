
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?php
class frmOrcamentoNew extends Form
{
    
    function __construct()
    {
        $this->Form('Incluir Novo Orçamento');
        $this->EventHandler();
    }

    function CreateFields()
    {
		global $MIOLO,$module;

		$tabelaGeral = $MIOLO->GetBusiness('common','tabelageral');
		$Instituicao = $MIOLO->GetBusiness('common','instituicao');		
		$options = $tabelaGeral->ListByTabela('AD_TIPOORC','item1');
		$optionsUG = $Instituicao->listUG();
		
		$fields = array
		(
			new TextField('ano',date("Y"),'Ano','4'),
			new TextField('esfera','','Esfera','1'),
			new LookupTextField('idptr','','PTR',20),
			new LookupTextField('idfonte','','Fonte',20),
			new LookupTextField('idrubrica','','Rubrica',20),
			new Selection('tipoorc','','Tipo',$options->result,false),
			new Selection('ug','','UG',$optionsUG->result,false),			
			new MCurrencyField('valor','','Valor','12')
		);
		$this->SetFields($fields);
		$this->ano->AddAttribute('maxlength',4);
		$this->esfera->AddAttribute('maxlength',1);
		$this->valor->AddAttribute('maxlength',12);
		$this->SetFieldAttr('idptr','module',$module);
		$this->SetFieldAttr('idptr','item','Ptr');
		$this->SetFieldAttr('idptr','event','filler');
		$this->SetFieldAttr('idptr','related','idptr');
		$this->SetFieldAttr('idfonte','module',$module);
		$this->SetFieldAttr('idfonte','item','Fonte');
		$this->SetFieldAttr('idfonte','event','filler');
		$this->SetFieldAttr('idfonte','related','idfonte');
		$this->SetFieldAttr('idrubrica','module',$module);
		$this->SetFieldAttr('idrubrica','item','Rubrica');
		$this->SetFieldAttr('idrubrica','event','filler');
		$this->SetFieldAttr('idrubrica','related','idrubrica');
	      
	   $buttons = array
		   (
        	  new FormButton('btnNew', 'Cadastrar Orçamento')
           );
		$this->SetButtons($buttons);

    }


    function btnNew_click()
    {
        $data 	= $this->GetData();
        $esfera = Form::GetFormValue('esfera');
        if(strlen($esfera) != 1){
        	$this->addError("O valor fornecido no campo esfera está incorreto, este campo deve conter um único digito!");
        }
        else{
        		$auxValor = $data->valor;
				$cf = new MCurrencyFormatter();
				if (substr_count($data->valor, ",") == 0)
		        {
		               	$data->valor = str_replace(".",",",$data->valor);
		        }
		        else
		        {
		               	$data->valor = str_replace(".","",$data->valor);
		        }
		
				$data->valor = $cf->toDecimal($data->valor);
				$orcamento = $this->manager->GetBusiness('adm','orcamento');
				$orcamentoHist = $this->manager->GetBusiness('adm','orcamentohist');
		
				$data->esfera = trim($data->esfera);
				$data->idptr = trim($data->idptr);
				$data->idfonte = trim($data->idfonte);
				$data->idrubrica = trim($data->idrubrica);
			
				if(preg_match("/\D/", $data->ano) || (strlen($data->ano) !=4 ) || ($data->ano < 2000)){
					$this->AddError("Digite um ANO válido");
				}elseif($data->esfera == NULL){
					$this->AddError("Campo ESFERA inválido");
				}elseif(($data->idptr == NULL) || ($orcamento->GetPtrById($data->idptr)) == NULL){
					$this->AddError("Campo PTR inválido (Utilize a lupa)");
				}elseif(($data->idfonte == NULL) || ($orcamento->GetFonteById($data->idfonte)) == NULL){
					$this->AddError("Campo FONTE inválido (Utilize a lupa)");
				}elseif(($data->idrubrica == NULL) || ($orcamento->GetRubricaById($data->idrubrica)) == NULL){
					$this->AddError("Campo RUBRICA inválido (Utilize a lupa)");
				}elseif($data->tipoorc == NULL){
					$this->AddError("Campo TIPO deve ser informado");
				}elseif($data->ug == NULL){
					$this->AddError("Campo UG deve ser informado");
				}else if ($data->valor < 0) {
					$this->AddError("O valor do Orçamento não pode ser negativo.");
				}
				else if ($data->valor == 0) {
					$this->AddError("Forneça um valor válido.");
				}
				else {
					$data->data = $orcamento->_db->CharToTimestamp(date('d/m/Y H:i:s'));
					$orcExiste = $orcamento->GetByClassOrcamentaria($data->ano, $data->idptr, $data->idfonte, $data->idrubrica, $data->esfera,$data->ug);
					
					if($orcExiste->result == null)
					{
						$data->dotacao = ":0";
						$data->suplementacao = ":0";
						$data->bloqueio = ":0";
						$data->anulacao = ":0";
						$data->pago = ":0";
						
						switch ($data->tipoorc)
				        {
				            case 1:
				                $data->dotacao = $data->valor;
				                break;
				            case 2:
				                $data->suplementacao = $data->valor;
				                break;
				            case 3:
				                $data->bloqueio = $data->valor;
				                break;
				            case 4:
				                $data->anulacao = $data->valor;
				                break;
				        }
				        
						$orcamento->SetData($data);
						$orcamento->ug = $data->ug;
									
						try
						{
							$orcamento->save();
							$orcamento->Log(OP_INS,"Novo orcamento criado: " . $orcamento->idOrcamento);
						}
						catch (Exception $e)
						{
							$this->addError($e->getMessage());
						}
					}
					
					$orcExiste = $orcamento->GetByClassOrcamentaria($data->ano, $data->idptr, $data->idfonte, $data->idrubrica, $data->esfera,$data->ug);
					$data->idorcamento = $orcExiste->result[0][0];
			
					$orcamentoHist->SetData($data);
					try
					{
						$orcamentoHist->save();
						$orcamento->Log(OP_INS,"Novo orcamentohist criado");
						$go = $this->manager->GetActionURL('adm','main:orcamento:find',$orcamentoHist->idOrcamento);
						$this->manager->information("Novo Orcamento Criado.",$go);
					}
					catch (Exception $e)
					{
						$this->addError($e->getMessage());
					}
			}
		}	
	}
 }
?>
