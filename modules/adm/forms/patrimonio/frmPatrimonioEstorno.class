<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class frmPatrimonioEstorno extends MForm
{
	protected $objPatrimonio;
	protected $perms;
	
    function __construct($objPatrimonio)
    {
		global $MIOLO,$module,$action,$item;
		
		$this->objPatrimonio = $objPatrimonio;
		$this->perms  = $MIOLO->getPerms();
        parent::__construct('Estorno');
		$this->SetClose(null);
        $this->EventHandler();
	}

	function CreateFields()
	{
		global $MIOLO, $module, $action, $item;

		/*  IFRO - Alan de Oliveira Silva
            Controle de Acesso de usuários no Patrimônio
            -- Inicio --
        */
        
	    $setor = $MIOLO->GetBusiness('common','setor');
	    $user  = $MIOLO->GetBusiness('common','usuario');
   		$setorOrigem = $this->objPatrimonio->idSetor;	    
	    $usuario = $user->GetByLogin($MIOLO->login->id);
	    $instituicao_usuario = $setor->getById($usuario->idSetor)->idinstituicao;	        
	    $instituicao_patrimonio = $setor->getById($setorOrigem)->idinstituicao;		        		      
	    if ($instituicao_usuario == $instituicao_patrimonio || $this->perms->checkAccess('ADM_PATRIMONIOADMIN', A_EXECUTE)) {
        /* --Fim-- */
        
			$itemPatrimonio = $this->objPatrimonio;
			$action_sim = $this->manager->GetActionURL($module, $action, $itemPatrimonio->idItemPatrimonio, array('form'=>'estorno', 'conf'=>'sim'));
			$action_nao = $this->manager->GetActionURL($module, $action, $itemPatrimonio->idItemPatrimonio);
	
			$conf = $this->GetFormValue('conf');
	
			if ($conf == 'sim')
			{
				//Faz o estorno do item de patrimonio
				$movimento = $MIOLO->GetBusiness($module, 'movimentopat');
				$notaFiscal = $MIOLO->GetBusiness($module, 'notafiscal');
				$itemNota = $MIOLO->GetBusiness($module, 'itemnota');
				$empenho = $MIOLO->GetBusiness($module, 'empenho');
				$empenhado = $MIOLO->GetBusiness($module, 'empenhado');
				$cf = new MCurrencyFormatter();
	
				$movimento = $movimento->GetMovimentoAquisicaoByIdItemPatrimonio($itemPatrimonio->idItemPatrimonio);
				try
				{
					//Novo movimento (estorno)
					$novoMovimento = $MIOLO->GetBusiness($module, 'movimentopat');
					$novoMovimento->tipoMovimento = '4';//ESTORNO
					$novoMovimento->idItemPatrimonio = $itemPatrimonio->idItemPatrimonio;
					$novoMovimento->idSetorOrigem = $movimento->idSetorOrigem;
					$novoMovimento->idSetorDestino = $movimento->idSetorDestino;
					$novoMovimento->dataMovimento = date('d/m/Y');
					$novoMovimento->idDependenciaOrigem = $movimento->idDependenciaOrigem;
					$novoMovimento->idDependenciaDestino = $movimento->idDependenciaDestino;
					$novoMovimento->beginTransaction();
					$novoMovimento->save();
	
					if($itemPatrimonio->idEmpenhado)//Se existe um empenho, faz as modificações relacionadas
					{
						$empenhado->GetById($itemPatrimonio->idEmpenhado);
						$empenho->GetById($empenhado->idEmpenho);
						$itemNota = $itemNota->GetByNotaEmpenhado($itemPatrimonio->notaFiscal, $itemPatrimonio->idEmpenhado);
						$notaFiscal->GetById($itemNota->idNotaFiscal);
	
						$empenhado->retrieveAssociation('itemreq');
						$idRequisicao = $empenhado->itemreq[0]->idRequisicao;
						$objRequisicao = $MIOLO->GetBusiness($module, 'requisicao', $idRequisicao);
	
						//Se itemNota > 1, diminui a quantidade. Senão apaga itemNota
						$idNotaFiscal = $itemNota->idNotaFiscal;
						$itemNota->setTransaction($novoMovimento->getTransaction());
						if($itemNota->quantidade > 1)
						{
							$itemNota->quantidade -= 1;
							$itemNota->save();
						}
						else
						{
							$itemNota->delete();
						}
	
						//verifica se valor NF é mesmo do item. se for, NF é deletada. senão, valor é diminuido.
						$notaFiscal->setTransaction($novoMovimento->getTransaction());
						if($notaFiscal->valor == $itemNota->valor)
						{
							$haNotas = false;//<- verifica se há NFs para o empenho (para atualizar status)
							$notaFiscal->delete();
						}
						else
						{
							$haNotas = true;
							$notaFiscal->valor = $cf->toDecimal($notaFiscal->valor) - $cf->toDecimal($itemNota->valor);
							$notaFiscal->save();
						}
	
						//Empenho
						$notasEmpenho = $notaFiscal->GetNotasByIdEmpenho($empenho->idEmpenho);
						foreach($notasEmpenho->result as $n)
						{
							if($n[0] != $idNotaFiscal)
							{
								$haNotas = true;
							}
						}
						if($haNotas)//há alguma NF para o empenho
						{
							$empenho->status = '6';//ENTREGA PARCELADA
						}
						else//não há NF para o empenho
						{
							$empenho->status = 'B';//DISTRIBUIDO
						}
						$empenho->setTransaction($novoMovimento->getTransaction());
						$empenho->save();
	
						//Empenhado
						$empenhado->status = '2';//DISTRIBUIDO
						$empenhado->setTransaction($novoMovimento->getTransaction());
						$empenhado->save();
	
						//Item Requisição
						$itemReq = $MIOLO->GetBusiness($module, 'itemreq');
						$itemReq->GetById($idRequisicao, $itemPatrimonio->idMaterial);
						$patrimonioItemReq = $itemPatrimonio->GetByRequisicaoMaterialAtivo($idRequisicao, $itemPatrimonio->idMaterial);
						if(count($patrimonioItemReq) > 1)//existe outro item patrimonio para mesmo itemreq
						{
							$itemReq->status = '8';//EMPENHO PARCELADO
						}
						else//não existe outro movimento para mesmo itemreq
						{
							$itemReq->status = '6';//EMPENHADO
						}
						$itemReq->quantAutorizada -= 1;
						$itemReq->setTransaction($novoMovimento->getTransaction());
						$itemReq->save();
	
						//Requisição
						$objRequisicao->GetById($idRequisicao);
						$patrimonioReq = $itemPatrimonio->GetByRequisicaoMaterialAtivo($idRequisicao, null);
						if(count($patrimonioReq) > 1)//existe outro item patrimonio para mesma requisicao
						{
							$objRequisicao->status = '8';//EXECUTADA PARCIALMENTE
						}
						else//não existe outro movimento para mesma requisicao
						{
							$objRequisicao->status = '7';//LIBERADA PARA EXECUCAO
						}
						$objRequisicao->setTransaction($novoMovimento->getTransaction());
						$objRequisicao->save();
					}
	
					$itemPatrimonio->ativo = 'N';
					$itemPatrimonio->setTransaction($novoMovimento->getTransaction());
					$itemPatrimonio->save();
	
					$itemPatrimonio->endTransaction();
	
					$movimento->Log(OP_INS,"Estorno de Patrimonio: " . $novoMovimento->idMovimento . " item patrimoniado: " . $itemPatrimonio->idItemPatrimonio);
	
					$MIOLO->Information('Estorno feito com sucesso.',$MIOLO->GetActionURL($module, 'main:itempatrimonio:find'));
				}
				catch (Exception $e)
				{
					$this->addError($e->getMessage());
				}
			}
			else
			{
				$this->manager->Question("Tem certeza que deseja estornar esse item?", $action_sim, $action_nao);
			}
		}else {
		    $msg = 'Este usuário não tem permissão para acessar este Patrimonio';
			$this->manager->Information($msg,$this->manager->GetActionURL('adm','main:patrimonio'));
		}
	}	
}
?>
