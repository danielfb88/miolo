<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class frmPatrimonio extends MCompoundForm
{
	public $oid;
    protected $patrimonio;
    function __construct($objPatrimonio)
    {
        global $MIOLO;
		
        $this->patrimonio = $objPatrimonio;
        parent::__construct();
        $this->SetClose($MIOLO->GetActionURL('adm','main:itempatrimonio:find'));
        $this->SetTitle("Patrimônio número $objPatrimonio->idItemPatrimonio");
        $this->SetIcon($MIOLO->GetUi()->GetImage('adm','default_mini.png'));
        $this->EventHandler();
		
    }

    function CreateFields()
    {
        
		global $MIOLO, $page, $module, $context, $history;

		
        $patrimonio = $this->patrimonio;
        if ($this->oid == NULL) $this->oid = $patrimonio->idItemPatrimonio;

		
// form
        $ui = $MIOLO->GetUI();
        $form = MForm::GetFormValue('form');
		
        switch ($form)
        {
            case 'editar' : 
				$this->_form[0] = $ui->GetForm($module,'frmPatrimonioEditar', $patrimonio, 'patrimonio'); 
                break;				
			case 'movimentacoes' : 		
				$_SESSION['idItemPatrimonio'] = $this->oid;
				//var_dump ($_SESSION['idItemPatrimonio']);
                $this->_form[0] = $ui->GetForm($module,'frmPatrimonioMovimentacoes', $patrimonio, 'patrimonio'); 
                break;
            case 'transferir' : 
                 $this->_form[0] = $ui->GetForm($module,'frmPatrimonioTransferir', $patrimonio, 'patrimonio'); 
                 break;
            case 'excluir' : 
                 $this->_form[0] = $ui->GetForm($module,'frmPatrimonioExcluir', $patrimonio, 'patrimonio'); 
                 break;
            case 'estorno' : 
                 $this->_form[0] = $ui->GetForm($module,'frmPatrimonioEstorno', $patrimonio, 'patrimonio'); 
                 break;
			case 'reavaliar' :
				$this->_form[0] = $ui->GetForm($module, 'frmPatrimonioReavaliar', $patrimonio, 'patrimonio');
				break;
        }
        if ($this->_form[0])
        {
            $this->_form[0]->SetClose($MIOLO->GetActionURL('adm','main:patrimonio',$patrimonio->idItemPatrimonio));
        	$page->SetAction($history->Top('action'));
        }
		
// info
		$tabelaGeral = $MIOLO->GetBusiness('common','tabelageral');
		$ingresso = $tabelaGeral->GetByItem('AD_TIPOINGRESSOPAT',$this->patrimonio->tipoIngresso);
		$setor = $MIOLO->GetBusiness('common','setor');
		$setor->GetById($this->patrimonio->idSetor);
		$dependencia = $MIOLO->GetBusiness($module,'dependencia');
		if($this->patrimonio->idDependencia)
		{
			$dependencia->GetById($this->patrimonio->idDependencia);
		}
		$classificador = $MIOLO->GetBusiness($module,'classificador');
		$classificador->GetById($this->patrimonio->idClassificador);
		$movimentoPat = $MIOLO->GetBusiness($module, 'movimentopat');
		//$termo = $movimentoPat->GetNumeroTermoMaisRecente($patrimonio->idItemPatrimonio);
		$this->_info[0]	= new TextLabel('txtDescricao',$this->patrimonio->descricao,'Descrição');
		$this->_info[1]	= new TextLabel('txtNumeroSerie',$this->patrimonio->numeroSerie,'Número de Série');
		$this->_info[2]	= new TextLabel('txtTipoIngresso',$ingresso->item2,'Tipo de Ingresso');
		$this->_info[3]	= new TextLabel('txtDataAquisicao',$this->patrimonio->dataAquisicao,'Data de Aquisição');
		$this->_info[4]	= new TextLabel('txtMarcaModelo',$this->patrimonio->marcaModelo,'Marca/Modelo');
		$this->_info[16]	= new TextLabel('txtDescricaoEstado',$this->patrimonio->descricaoEstado,'Estado do Material');
		$this->_info[5]	= new TextLabel('txtValor',$this->patrimonio->valor,'Valor');
		$this->_info[6]	= new TextLabel('txtNotaFiscal',$this->patrimonio->notaFiscal,'Nota Fiscal');
		//$this->_info[7]	= new TextLabel('txtNumeroTermo',$termo, 'Número do Termo');
        // 20/10/2010 - Vitor Pacheco
		$this->_info[8]	= new TextLabel('txtSubElemento',$this->patrimonio->getSubelementoComZeroEsquerda($this->patrimonio->subelemento),'SubElemento');
		$this->_info[9]	= new TextLabel('txtSetor',$setor->sigla,'Setor');
		$this->_info[10]= new TextLabel('txtDependencia',$dependencia->dependencia,'Dependência');
		$this->_info[11]= new TextLabel('txtClassificador',$classificador->descricao,'Classificador');
		$processo = $this->manager->GetBusiness('protocolo','processo');
		$this->_info[12]= new TextLabel('txtNumPro',$processo->numProcessoFormatado($this->patrimonio->numPro),'Processo');
		// 18/10/2010 - Vitor Pacheco
		$this->_info[13] = new TextLabel('txtDataInicioUso', $this->patrimonio->datainiciouso, 'Data de Início de uso');
		$this->_info[14] = new TextLabel('txtVidaUtil', $this->patrimonio->idvidautil, 'Conta Contábil');
		
	        //
		//$this->_info[12]= new TextLabel('txtNumPro',$this->patrimonio->numPro,'Processo');

		$this->_info[17] = new TextLabel('txtValorReavaliado', $this->patrimonio->valorReavaliado, 'Valor Reavaliado');
		$this->_info[18] = new TextLabel('txtDataReavaliacao', $this->patrimonio->dataReavaliacao, 'Data de Reavaliação');
		$this->_info[19] = new TextLabel('txtGarantia', $this->patrimonio->garantia, 'Garantia');
		//
		//OBS: os mapeamentos dos campos ficam num arquivo XML ... nesse caso: ...\modelues\adm\classes\map\itempatrimonio.xml
		//

		$this->_info[15] = array(
			new MButton('btnAnterior','Anterior'),
			new MButton('btnProximo','Próximo'),
		);

// panel        
        $action = $context->action;
        $this->_panel[0] = $panel = new ActionPanel('pnlCompound','Opções','',false);
        $panel->AddUserAction('adm_patrimonio_editar',A_EXECUTE,'Editar',$ui->GetImageTheme('','icons/itens_patrimoniais_editar.png'),'adm',$action, $this->oid, array("form"=>"editar"));
		$panel->AddUserAction('adm_patrimonio_movimentacoes',A_EXECUTE,'Movimentações',$ui->GetImageTheme('','icons/patrimonio_movimentacaobens.png'),'adm',$action, $this->oid, array("form"=>"movimentacoes"));
        $panel->AddUserAction('adm_patrimonio_transferir',A_EXECUTE,'Transferir',$ui->GetImageTheme('','icons/itens_patrimoniais_transferir.png'),'adm',$action, $this->oid, array("form"=>"transferir"));
        $panel->AddUserAction('adm_patrimonio_excluir',A_EXECUTE,'Baixa',$ui->GetImageTheme('','icons/baixa.png'),'adm',$action, $this->oid, array("form"=>"excluir"));

		$this->patrimonio->retrieveAssociation('empenhado');
		if(($this->patrimonio->empenhado->status == '2') || (!$this->patrimonio->idEmpenhado))
		{
			$panel->AddUserAction('adm_patrimonio_excluir',A_EXECUTE,'Estorno',$ui->GetImageTheme('', 'icons/estorno.png'),'adm',$action, $this->oid, array("form"=>"estorno"));
		}

		$panel->AddUserAction('adm_patrimonio_reavaliar', A_EXECUTE, 'Reavaliação', $ui->GetImageTheme('', 'icons/editar_rubrica.png'), 'adm', $action, $this->oid, array("form"=>"reavaliar"));
	
		 $panel->AddUserAction('adm_patrimonio_termo',A_EXECUTE,'Termo de Responsabilidade',$ui->GetImageTheme('','icons/relatorio.png'),'adm',$action, $this->oid, array("idpat"=>$this->patrimonio->idItemPatrimonio, "event"=>"imprimeTermo"));
 	}

	function btnAnterior_click()
	{
		global $MIOLO,$module,$action;

		$id = $this->patrimonio->GetIdAproximada($this->patrimonio->idItemPatrimonio,'anterior');
		if($id)
		{
			$this->page->redirect($MIOLO->GetActionURL($module,$action,$id));
		}
	}
	function btnProximo_click()
	{
		global $MIOLO,$module,$action;

		$id = $this->patrimonio->GetIdAproximada($this->patrimonio->idItemPatrimonio,'posterior');
		if($id)
		{
			$this->page->redirect($MIOLO->GetActionURL($module,$action,$id));
		}
	}

	function imprimeTermo()
	{
		global $MIOLO, $module, $item;
		
		$idItem = $this->getFormValue('idpat');
        $report = new MJasperReport('sigaept'); 
        $parameters['SUBREPORT_DIR']	= $MIOLO->GetConf('home.modules');
        $parameters['int_pIdUsuario']	= $MIOLO->login->idkey;
        $parameters['int_pIdItem']	= $idItem; 
        $parameters['int_pItem2']	= $idItem;
       
        $parameters['pURL']		= $MIOLO->GetConf('home.url');
        $report->Execute('adm', 'repTermo2', $parameters);
	}
}
?>
