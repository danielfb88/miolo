
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?
class frmUoAlmoxarifadoEntradaSaida extends Form
{
    protected $uoalmoxarifado;

    function __construct($objUO)
    {
        $this->uoalmoxarifado = $objUO;
		parent::__construct('Entrada e Saída de Material');
        $this->EventHandler();
    }

    function CreateFields()
    {
		$fields = array(
			//new MTextField('idRequisicao','','Requisição',5,'Ex: 390'),
			//new MHiddenField('idUoReq'),
			//new MLookupTextField('lkpUo','','Uo Requisitante',40),
			new MHiddenField('idMaterial','','Idmaterial'),
			new MLookupTextField('lkpMaterial','','Material',40),
			new MTextField('quantidade','','Quantidade',10,'Ex: 1000'),
			new MCurrencyField('valorTotal','','Valor',10,'Ex: 45,00'),
        );
		
        $this->SetFields($fields);
                
        $this->SetFieldAttr('lkpMaterial','module','adm');
        $this->SetFieldAttr('lkpMaterial','item','material');
        $this->SetFieldAttr('lkpMaterial','event','filler');
        $this->SetFieldAttr('lkpMaterial','related','idMaterial,lkpMaterial');

        /*
        $this->SetFieldAttr('lkpUo','module','adm');
        $this->SetFieldAttr('lkpUo','item','uo');
        $this->SetFieldAttr('lkpUo','event','filler');
        $this->SetFieldAttr('lkpUo','related','idUoReq,lkpUo');
        */

		$validators = array(
            //new MRequiredValidator('idRequisicao'),
			new MRequiredValidator('idMaterial'),
			//new MRequiredValidator('idUoReq'),
			new MRequiredValidator('estoque'),
			new MRequiredValidator('valorTotal'),
		);
		$this->SetValidators($validators);
		
		$buttons = array(
        	new FormButton('btnPost', 'Gravar'),
            );
		$this->SetButtons($buttons);

    }

    function btnPost_click()
    {
        $data = $this->getData();
        $cf = new MCurrencyFormatter();
        $data->valorTotal = $cf->toDecimal($data->valorTotal);
        
        // nova requisicao de compra
        /*
        $requisicao = $this->manager->GetBusiness('adm','requisicao');
        $requisicao->dataHora = date("d/m/Y H:i:s");
        $requisicao->idTipoReq = 7;
        $requisicao->status = 'E';
        $requisicao->idUoRequisitante = $data->idUoReq; 
        $requisicao->idUoExecutante = 108;
        $requisicao->idUsuarioRequisitante = $login->idkey;
        try
        {
            $requisicao->save();
            $requisicao->Log(OP_INS,"Requisição inserida com sucesso.");
        }
        catch (Exception $e)
        {
            $this->addError($e->getMessage());
        }
        */
        
        // inclui material de compra
        /*
        $material = $this->manager->getBusiness('adm','itemreq');
        $material->idMaterial = $data->idMaterial;
        $material->quantPedida = $data->quantPedida;
        $material->precoEstimado = $data->valorTotal;
        $material->descricao = $data->descricao;
        $requisicao->addItem($material);
        try
        {
            $requisicao->save();
            $requisicao->Log(OP_INS,"Requisição atualizada com sucesso.");
        }
        catch (Exception $e)
        {
            $this->addError($e->getMessage());
        }
        */

        // movimento de entrada
        $today = getDate();
        $movimento = $this->manager->getBusiness('adm','movimento');
        $movimento->idMaterial = $data->idMaterial;
        $movimento->tipoMovimento = 5;
        $movimento->dataMovimento = $today['mday']."/".$today['mon']."/".$today['year'];
        $movimento->quantidade = $data->quantidade;        
        $movimento->valorTotal = $data->valorTotal;
        //$movimento->idRequisicao = $requisicao->idRequisicao;
        try
        {
            $movimento->save();
            $movimento->Log(OP_INS,"Movimento lançado com sucesso.");
        }
        catch (Exception $e)
        {
            $this->addError($e->getMessage());
        }

        $url = $this->manager->GetActionURL('adm','main:uoalmoxarifado',$this->uoalmoxarifado->idUo);
        $this->manager->information("Entrada e saída de material realizada com sucesso.",$url);
        //$this->manager->information("Entrada e saída de material realizada com sucesso. Requisicao de compras número ".$requisicao->idRequisicao.".",$url);
    }
 }

?>
