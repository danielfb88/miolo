<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class frmUoAlmoxarifadoEntradaMaterial extends MForm
{
    protected $empenho;
    function __construct($objEmpenho)
    {
        global $MIOLO,$page;
        $this->empenho = $objEmpenho;
		parent::__construct('Adicionar Nota');
        $this->eventHandler();
    }
    function CreateFields()
    {
        global $item;
        $fields = array(
            new MSeparator('Dados da nota fiscal'),
            new MTextField('notaFiscal','','Nota Fiscal',16),
            new MCalendarField('dataNotaFiscal','','Data',10),
            new MCalendarField('dataAtesteNotaFiscal','','Data de Ateste',10),

//Taka
	    //new MCurrencyField('valor','','Valor',14),
            //new McurrencyField('desconto','','Desconto',14),
            new MCurrencyField('valor','','Valor',10,'Ex: 45,00'),
	    new MCurrencyField('desconto','','Desconto',10,'Ex: 45,00')
	    //new MTextField('valor','','Valor',14),
            //new MTextField('desconto','','Desconto',14),
//Taka
        );

        $this->setFields($fields);
        $grid = $this->manager->getUI()->getGrid('adm','gridUoAlmoxarifadoEntradaMaterialItensEmpenho',$this->empenho);
        $this->addField(new MSpacer('5px'));
        $this->addField(new MSeparator('Materiais recebidos'));
       
        $this->addField($grid);
        
        $this->setButtons(
            array(
                new MButton('btnItens','Enviar'),
                new MButton('btnAdicionar','Adicionar Nota'),
                new MButton('btnAlterarValor','Alterar Valor da Nota'),
                new MButton('btnSaida','Dar Saída'),
            )
        );
        $this->setButtonAttr('btnAdicionar','visible',false);
        $this->setButtonAttr('btnAlterarValor','visible',false);
        $this->setButtonAttr('btnSaida','visible',false);
    }

    function btnItens_click()
    {
        $cf = new MCurrencyFormatter();

		$dataNota = Form::getFormValue(dataNotaFiscal);
		$dataAteste = Form::getFormValue(dataAtesteNotaFiscal);
		$partes_da_data = explode('/',$dataAteste);
        $dataAteste =  $partes_da_data[2].'/'.$partes_da_data[1].'/'.$partes_da_data[0];

        $partes_da_data = explode('/',$dataNota);
        $dataNota =  $partes_da_data[2].'/'.$partes_da_data[1].'/'.$partes_da_data[0];

        // Consistências		
        switch (true)
        {   
			 
            case (!Form::getFormValue(notaFiscal)):
                $this->addError('O número da nota fiscal é obrigatório.');
                return;
            case (!Form::getFormValue(dataNotaFiscal)):
                $this->addError('A data da nota fiscal é obrigatória.');
                return;
			case ($dataAteste < $dataNota):
	            $this->addError('A data de ateste deve ser maior ou igual à data da nota fiscal.');
	            return;			
            case (!Form::getFormValue(valor)):
                $this->addError('O valor da nota fiscal é obrigatório.');
                return;
            case (Form::getFormValue(dataNotaFiscal) <= 0):
                $this->addError('É Obrigatório informar o valor da nota.');
                return;

 
//TAKA         


	//$anterior = array('R$','.',',');
	//$proximo  = array('','','.');

	   /* case (round(str_replace( $anterior, $proximo , Form::getFormValue(valor))) <= 0):
                $this->addError('O valor da nota fiscal é obrigatório.');
                return;
            case ( 
		round (str_replace( $anterior, $proximo , $this->empenho->valorSaldo)) < 
		round (str_replace( $anterior, $proximo ,  Form::getFormValue(valor)) + 
		str_replace( $anterior, $proximo , Form::getFormValue(desconto)))):
                $this->addError('O valor da nota fiscal é superior ao valor empenhado');
                return;
            case (
		round(str_replace( $anterior, $proximo , Form::getFormValue(valor))) < 
		str_replace( $anterior, $proximo ,  $this->empenho->valorSaldo)):
                $this->setTitle('Entrada Parcelada de Material');		
                break;*/



            case (round($cf->toDecimal(Form::getFormValue(valor)),2) <= 0):
                $this->addError('O valor da nota fiscal é obrigatório.');
                return;
            case (round($cf->toDecimal($this->empenho->valorSaldo),2) < round($cf->toDecimal(Form::getFormValue(valor))+$cf->toDecimal(Form::getFormValue(desconto)),2)):
                $this->addError('O valor da nota fiscal é superior ao valor empenhado');
                return;
            case (round($cf->toDecimal(Form::getFormValue(valor)),2) < round($cf->toDecimal($this->empenho->valorSaldo),2)):
                $this->setTitle('Entrada Parcelada de Material');
                break;

//TAKA
        }

        // se a nota existe --- OBS: REVER ESSA PARTE
        $nota = $this->manager->getBusiness('adm','notafiscal');
        $nota->getByNumero(Form::getFormValue('notaFiscal'),$this->empenho->idEmpenho);
        if ($nota->isPersistent())
        {
            $this->addError('Esta nota fiscal já deu entrada para este empenho.');
            return;
        }
        $this->setButtonAttr('btnItens','visible',false);
        $this->setFieldAttr('notaFiscal','readonly',true);
        $this->setFieldAttr('dataNotaFiscal','readonly',true);
        $this->setFieldAttr('dataAtesteNotaFiscal','readonly',true);
        $this->setFieldAttr('valor','readonly',true);
        $this->setFieldAttr('desconto','readonly',true);

		// Quando a instrução abaixo era executada, os valores do form eram perdidos.
        //$this->setFields($fields);

        $grid = $this->manager->getUI()->getGrid('adm','gridUoAlmoxarifadoEntradaMaterialItens',$this->empenho);
        $this->addField(new MSpacer('5px'));
        $this->addField(new MSeparator('Materiais recebidos'));
       
        $this->addField($grid);
        
      if (round($cf->toDecimal($this->empenho->valorSaldo),2) > round($cf->toDecimal(Form::getFormValue(valor)),2) && count($this->empenho->notaFiscal) == 0)
        {
            $this->addInfo('Este empenho é do tipo original, para parcela-lo é necessário uma justificativa.');
            $this->addField(new MSpacer('5px'));
            $this->addField(new MSeparator('Justificativa de parcelamento'));
            $this->addField(new MMultiLineField('obs','','Justificativa',25,5,58));
        }
        $this->setButtonAttr('btnAdicionar','visible',true);
        $this->setButtonAttr('btnAlterarValor','visible',true);
        $this->setButtonAttr('btnItens','visible',false);
    }

    function btnAdicionar_click()
    {
        $cf = new MCurrencyFormatter();

        foreach ($quantAutorizada = Form::getFormValue(quantAutorizada) as $idEmpenhado=>$quantidade)
        {
            foreach ($this->empenho->empenhado as $empenhado)
            {
                if ($empenhado->idEmpenhado == $idEmpenhado)
                {

					$emp = $cf->toDecimal($empenhado->quantidadeEmpenhada);
					$entr = $cf->toDecimal($empenhado->quantidadeEntregue);
					$qtdEmpenhada = $emp-$entr;

                    $empenhado->getAtributos();

                    switch (true)
                    {
                        case (round($cf->toDecimal($quantidade),2) < 0):
                            $this->addError("A quantidade no item {$empenhado->item} não pode ser negativa.");
                            $this->btnItens_click();
                            return;
                        case (round($cf->toDecimal($quantidade),2) > round($qtdEmpenhada,2)):
                            $this->addError("A quantidade no item {$empenhado->item} é superior à quantidade empenhada.");
                            $this->btnItens_click();
                            return;
                        case (round($cf->toDecimal($this->empenho->valorSaldo),2) > round($cf->toDecimal(Form::getFormValue(valor)),2) && count($this->empenho->notaFiscal) == 0 && $this->empenho->tipoEmpenho == 'OR' && !Form::getFormValue('obs')):
                            $this->addError('A justificativa é obrigatória.');
                            $this->btnItens_click();
                            return;
                        default:
                            $valorTotal += $cf->toDecimal($quantAutorizada[$idEmpenhado])*$cf->toDecimal($empenhado->valorUnitario);
                    }
                }
            }
        }
        if (round($cf->toDecimal(Form::getFormValue('valor'))+$cf->toDecimal(Form::getFormValue('desconto')),2) != round($cf->toDecimal($valorTotal),2))
        {
            if (round($cf->toDecimal(Form::getFormValue('valor'))+$cf->toDecimal(Form::getFormValue('desconto')),2) != round($cf->toDecimal($this->empenho->valorSaldo),2))
            {
                $this->addError('A soma dos itens da nota não confere com o valor informado.');
                $this->btnItens_click();
                if ($cf->toDecimal(Form::getFormValue('valor')) < $cf->toDecimal($valorTotal))
                {
                    $this->addError('Confira o valor da nota, as quantidades entregues ou confirme o desconto calculado.');
                    $this->setFieldValue('desconto',$cf->toDecimal($valorTotal)-$cf->toDecimal((Form::getFormValue('valor'))));
                    $this->setFieldAttr('desconto','readonly',false);
                }
                return;
            }
        }
        $nota = $this->manager->getBusiness('adm','notafiscal');
        $nota->getByNumero(Form::getFormValue('notaFiscal'),$this->empenho->idEmpenho);
        if ($nota->isPersistent())
        {
            $this->addError('Esta nota fiscal já deu entrada para este empenho.');
            return;
        }
        try 
        {
            $nota->beginTransaction();
            $nota->notaFiscal = Form::getFormValue('notaFiscal');
            $nota->dataNotaFiscal = Form::getFormValue('dataNotaFiscal');
            $nota->dataAteste = Form::getFormValue('dataAtesteNotaFiscal');
            $nota->valor = $cf->toDecimal(Form::getFormValue('valor'));
            $nota->idEmpenho = $this->empenho->idEmpenho;
            $nota->desconto = $cf->toDecimal(Form::getFormValue('desconto'));
            $nota->obs = Form::getFormValue('obs');
            $nota->save();
            $msg = "Nota fiscal  número {$nota->notaFiscal} adicionada com sucesso.";
            $nota->Log(OP_INS,$msg);
            foreach ($quantAutorizada as $idEmpenhado=>$quantidade)
            {
                foreach ($this->empenho->empenhado as $empenhado)
                {
                    if ($empenhado->idEmpenhado == $idEmpenhado)
                    {
                        if ($cf->toDecimal($quantidade))
                        {
                            $itemNota = $this->manager->getBusiness('adm','itemnota');
                            $itemNota->idEmpenhado = $empenhado->idEmpenhado;
                            $itemNota->quantidade = $cf->toDecimal($quantidade);
                            $itemNota->valor = $cf->toDecimal($empenhado->valorUnitario);
                            $itemNota->idNotaFiscal = $nota->idNotaFiscal;
                            $itemNota->setTransaction($nota->getTransaction());
                            $itemNota->save();
                            $empenhado->retrieveAssociation('itemreq');
                            unset($itemQuantEmpenhada,$itemQuantAutorizada,$quantEmpenhadaPendente);
                            foreach ($empenhado->itemreq as $material)
                            {
                                $itemQuantEmpenhada = $cf->toDecimal($itemQuantEmpenhada) + $cf->toDecimal($material->quantEmpenhada);
                                $itemQuantAutorizada = $cf->toDecimal($itemQuantAutorizada) + $cf->toDecimal($material->quantAutorizada);
                            }
                            $quantEmpenhadaPendente = $cf->toDecimal($itemQuantEmpenhada) - $cf->toDecimal($itemQuantAutorizada);
                            if (count($empenhado->itemreq) == 1)
                            {
                                foreach ($empenhado->itemreq as $itemRequisicao)
                                {
                                    if ($cf->toDecimal($quantidade) > 0)
                                    {
                                        $itemRequisicao->retrieveAssociation('requisicao');
                                        $itemRequisicao->requisicao->retrieveAssociation('uoRequisitante');
                                        $itemRequisicao->requisicao->retrieveAssociation('uoExecutante');
                                        if ($this->empenho->idUoEntrega == $itemRequisicao->requisicao->idUoRequisitante)
                                        {
                                            $movimento = $this->manager->getBusiness('adm','movimento');
                                            $movimento->idMaterial = $itemRequisicao->idMaterial;
                                            $movimento->idRequisicao = $itemRequisicao->idRequisicao;
                                            $movimento->tipoMovimento = 1;
                                            $movimento->dataMovimento = date("d/m/Y");                
                                            $movimento->quantidade = $cf->toDecimal($quantidade);        
                                            $movimento->valorTotal = $cf->toDecimal($quantidade) * $cf->toDecimal($itemNota->valor);
                                            $movimento->idItemNota = $itemNota->idItemNota;
                                            $movimento->idUoAlmoxarifado = $this->empenho->idUoEntrega;
                                            $movimento->setTransaction($nota->getTransaction());
                                            $movimento->save();
                                            $estoque = $this->manager->getBusiness('adm','estoque');
                                            $estoque->getById($this->empenho->idUoEntrega,$itemRequisicao->idMaterial);
                                            $estoque->estoque = $cf->toDecimal($estoque->estoque) + $cf->toDecimal($quantidade);
                                            $estoque->valorTotal = $cf->toDecimal($estoque->valorTotal) + $cf->toDecimal($quantidade) * $cf->toDecimal($itemNota->valor);
                                            $estoque->setTransaction($nota->getTransaction());
                                            $estoque->save();
                                        }
                                        else
                                        {
                                            $ordem = $this->manager->getBusiness('adm','ordementrega');
                                            $ordem->data = date('d/m/Y');
                                            $ordem->numero = $ordem->getUltimoNumeroByUo($this->empenho->idUoEntrega);
                                            $ordem->numero++;
                                            $ordem->idUoExecutante = $this->empenho->idUoEntrega;
                                            $ordem->impresso = 0;
                                            $ordem->setTransaction($nota->getTransaction());
                                            $ordem->save();
                                            $movimento = $this->manager->getBusiness('adm','movimento');
                                            $movimento->idMaterial = $itemRequisicao->idMaterial;
                                            $movimento->idRequisicao = $itemRequisicao->idRequisicao;
                                            $movimento->tipoMovimento = 5;
                                            $movimento->dataMovimento = date("d/m/Y");                
                                            $movimento->quantidade = $cf->toDecimal($quantidade);        
                                            $movimento->valorTotal = $cf->toDecimal($quantidade) * $cf->toDecimal($itemNota->valor);
                                            $movimento->idItemNota = $itemNota->idItemNota;
                                            $movimento->idUoAlmoxarifado = $this->empenho->idUoEntrega;
                                            $movimento->idOrdemEntrega = $ordem->idOrdemEntrega;
                                            $movimento->setTransaction($nota->getTransaction());
                                            $movimento->save();
                                        }
                                        $itemRequisicao->quantAutorizada = $cf->toDecimal($itemRequisicao->quantAutorizada) + $cf->toDecimal($quantidade);
                                        $itemRequisicao->status = 7;
                                        $itemRequisicao->setTransaction($nota->getTransaction());
                                        $itemRequisicao->save();
                                        $itemRequisicao->requisicao->retrieveAssociation('materialCompra');
                                        if ($itemRequisicao->requisicao->materialCompra && $itemRequisicao->status == 7)
                                        {
                                            $itemRequisicao->requisicao->status = 8;
                                            foreach ($itemRequisicao->requisicao->materialCompra as $material)
                                            {
                                                if ($material->idMaterial != $itemRequisicao->idMaterial && $material->status != 7) $itemRequisicao->requisicao->status = 8; 
                                            }
                                        }
                                        else
                                        {
                                            $itemRequisicao->requisicao->status = 8;
                                        }
                                        $itemRequisicao->requisicao->setTransaction($nota->getTransaction());
                                        $itemRequisicao->requisicao->save();
                                    }
                                }
                            }
                            elseif ($cf->toDecimal($quantidade) == $cf->toDecimal($quantEmpenhadaPendente))
                            {
				 foreach ($empenhado->itemreq as $itemRequisicao)
                                {
                                    $quantAutorizada = $cf->toDecimal($itemRequisicao->quantEmpenhada) - $cf->toDecimal($itemRequisicao->quantAutorizada);
                                    $quantAutorizada = ($cf->toDecimal($quantidade) < $cf->toDecimal($quantAutorizada)) ? $cf->toDecimal($quantidade) : $cf->toDecimal($quantAutorizada);
                                    if ($cf->toDecimal($quantAutorizada) > 0)
                                    {
                                        $itemRequisicao->retrieveAssociation('requisicao');
                                        $itemRequisicao->requisicao->retrieveAssociation('uoRequisitante');
                                        $itemRequisicao->requisicao->retrieveAssociation('uoExecutante');
                                        if ($this->empenho->idUoEntrega == $itemRequisicao->requisicao->idUoRequisitante)
                                        {
                                            $movimento = $this->manager->getBusiness('adm','movimento');
                                            $movimento->idMaterial = $itemRequisicao->idMaterial;
                                            $movimento->idRequisicao = $itemRequisicao->idRequisicao;
                                            $movimento->tipoMovimento = 1;
                                            $movimento->dataMovimento = date("d/m/Y");                
                                            $movimento->quantidade = $cf->toDecimal($quantAutorizada);        
                                            $movimento->valorTotal = $cf->toDecimal($quantAutorizada) * $cf->toDecimal($itemNota->valor);
                                            $movimento->idItemNota = $itemNota->idItemNota;
                                            $movimento->idUoAlmoxarifado = $this->empenho->idUoEntrega;
                                            $movimento->setTransaction($nota->getTransaction());
                                            $movimento->save();
                                            $estoque = $this->manager->getBusiness('adm','estoque');
                                            $estoque->getById($this->empenho->idUoEntrega,$itemRequisicao->idMaterial);
                                            $estoque->estoque = $cf->toDecimal($estoque->estoque) + $cf->toDecimal($quantAutorizada);
                                            $estoque->valorTotal = $cf->toDecimal($estoque->valorTotal) + $cf->toDecimal($quantAutorizada) * $cf->toDecimal($itemNota->valor);
                                            $estoque->setTransaction($nota->getTransaction());
                                            $estoque->save();
                                        }
                                        else
                                        {
                                            $ordem = $this->manager->getBusiness('adm','ordementrega');
                                            $ordem->data = date('d/m/Y');
                                            $ordem->numero = $ordem->getUltimoNumeroByUo($this->empenho->idUoEntrega);
                                            $ordem->numero++;
                                            $ordem->idUoExecutante = $this->empenho->idUoEntrega;
                                            $ordem->impresso = 0;
                                            $ordem->setTransaction($nota->getTransaction());
                                            $ordem->save();
                                            $movimento = $this->manager->getBusiness('adm','movimento');
                                            $movimento->idMaterial = $itemRequisicao->idMaterial;
                                            $movimento->idRequisicao = $itemRequisicao->idRequisicao;
                                            $movimento->tipoMovimento = 5;
                                            $movimento->dataMovimento = date("d/m/Y");                
                                            $movimento->quantidade = $cf->toDecimal($quantAutorizada);        
                                            $movimento->valorTotal = $cf->toDecimal($quantAutorizada) * $cf->toDecimal($itemNota->valor);
                                            $movimento->idItemNota = $itemNota->idItemNota;
                                            $movimento->idUoAlmoxarifado = $itemNota->idUoEntrega;
                                            $movimento->idOrdemEntrega = $ordem->idOrdemEntrega;
                                            $movimento->setTransaction($nota->getTransaction());
                                            $movimento->save();
                                        }
                                        $itemRequisicao->quantAutorizada = $cf->toDecimal($itemRequisicao->quantAutorizada) + $cf->toDecimal($quantAutorizada);
                                        $itemRequisicao->status = 7;
                                        $itemRequisicao->setTransaction($nota->getTransaction());
                                        $itemRequisicao->save();
                                        $itemRequisicao->requisicao->retrieveAssociation('materialCompra');
                                        $itemRequisicao->requisicao->status = 9;
                                        foreach ($itemRequisicao->requisicao->materialCompra as $material)
                                        {
                                            if ($material->idMaterial != $itemRequisicao->idMaterial && $material->status != 7) $itemRequisicao->requisicao->status = 8; 
                                        }
                                        $itemRequisicao->requisicao->setTransaction($nota->getTransaction());
                                        $itemRequisicao->requisicao->save();
                                    }
                                }
                            }
                        }
                    }
                }
            }
            $nota->endTransaction();
            $url = $this->manager->GetActionURL('adm','main:uoalmoxarifado:main',$this->empenho->idUoEntrega,array('form'=>'entradamaterial','idEmpenho'=>$this->empenho->idEmpenho,"idNotaFiscal"=>$nota->idNotaFiscal));
            $this->manager->information("Nota adicionada com sucesso.",$url);
        }
        catch(Exception $e) {$this->manager->Error($e->getMessage());}
    }
 }
?>
