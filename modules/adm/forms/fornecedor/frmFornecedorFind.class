
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?
global $MIOLO;
/**
 * Use Module Control
 */

$MIOLO->Uses('controls/linkfornecedor.class','adm');

/**
 * Formulário básico para seleção de Fornecedores
 * 
 */
class frmFornecedorFind extends Form
{
	function __construct()
	{
		global $MIOLO, $module;

		$this->Form('Pesquisar Fornecedores');
		$this->SetClose($MIOLO->GetActionURL($module,'main:mantutencao'));
		$this->EventHandler();
	}

	function CreateFields()
	{
		global $MIOLO, $action;

		$busca = new MThemeBox('&nbsp;&nbsp;Buscar', array(
			new MLabel('Nome ou CNPJ:'),
			new MTextField('fornecedor',Form::getFormValue('fornecedor'),'',40),
			new MButton('btnPost','Buscar'))
		);

		$ui = $MIOLO->GetUI();
		$grid = $ui->GetGrid('adm','gridFornecedor',Form::getFormValue('fornecedor'));
		$grid->SetTitle('Fornecedores');

		$lnkNew = new Linkfornecedor('lnkNew', FALSE);
		$lnkNew->setNew();

		$findButton = new ButtonFind('');
		$findButton->SetName('btnFind');

		$fields = array(
			array(
				$busca,
				$lnkNew
			),
		$grid
		);
        $this->SetFields($fields);
        $this->defaultButton = false;

	}
    
	function btnDel_click()
	{
		global $module,$MIOLO,$self,$item;
	
	
		$aux = explode("_|_",$item);
		
		$idFornecedor = $aux[0];
		$nomeFornecedor = $aux[1];
	
		
		$action_sim = $this->manager->GetActionURL($module,$self,$idFornecedor,array('conf'=>'sim','event'=>'btnDel:click'));
		$action_nao = $this->manager->GetActionURL($module,$self);

		$conf = $this->GetFormValue('conf');

		if ($conf == 'sim')
		{
 			try
 			{
				
				$objFornecedor = $MIOLO->GetBusiness($module,'fornecedor',$idFornecedor);
				
				$instituicao = $MIOLO->GetBusiness('common','instituicao');


				
				$instituicao->GetById($objFornecedor->idInstituicao);
								
				$objFornecedor->delete();
				

				$instituicao->Delete($objFornecedor->idInstituicao);
					
 				$this->manager->Information('Fornecedor excluído com sucesso!',$this->manager->GetActionURL($module,$self));
 			}
 			catch ( Exception $e )
 			{
 				//$this->manager->Error($e->getMessage());
				$this->manager->Information('O fornecedor não pode ser excluído, pois ele possivelmente participa ou participou de alguma licitação cadastrada no sistema!',$this->manager->GetActionURL($module,$self));
 			}
		}
		else
		{
			$this->manager->Question("Tem certeza que deseja excluir o fornecedor '$nomeFornecedor' ?",$action_sim,$action_nao);
		}		
	}

 }
?>
