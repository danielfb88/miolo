
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?
class frmIrrfNew extends MForm
{
	function __construct()
	{
		global $MIOLO, $module;

		parent::__construct('Adicionar IRRF');
		$this->setClose($MIOLO->GetActionURL($module, 'main'));	
		$this->eventHandler();
	}

	function createFields()
	{
		global $MIOLO, $action;

		$this->ClearButtons();
		
		$fields = array(
			new MCalendarField('dataIni','','Data Início',10),
			new MCalendarField('dataFim','','Data Fim',10),
			new MTextField('aliquota','','Alíquota',1, 'Máx. 1 número'),
			new MCurrencyField('ate','','Valor Máximo',20),
			new MTextField('percentual','','Percentual',6),
			new MCurrencyField('deducao','','Dedução',20),
		);
		$this->setFields($fields);
		
		$buttons = array(new MButton("btnNew", "Incluir IRRF"));
		$this->aliquota->addAttribute('maxlength',1);
		$this->setButtons($buttons);
		
		$validators = array(
			new MRequiredValidator('dataIni'),
			new MRequiredValidator('dataFim'),
			new MMaskValidator('aliquota','','9','required'),
			new MRequiredValidator('ate'),
			new MRequiredValidator('percentual'),
			new MRequiredValidator('deducao'),
		);
		$this->SetValidators($validators);
	}


	function btnNew_click()
	{
		global $MIOLO , $page, $module;
		$data = $this->getData();
		$irrf = $MIOLO->getBusiness('common', 'irrf');
		$irrf->setData($data);
		$cf = new MCurrencyFormatter();
	//	$irrf->ate = $cf->toDecimal($irrf->ate);
	//	$irrf->deducao = $cf->toDecimal($irrf->deducao);
		$irrf->ate =  $cf->removePrefixAndSuffix($irrf->ate,'REAL');
		$irrf->deducao = $cf->removePrefixAndSuffix($irrf->deducao,'REAL');
	
		$irrf->ate = str_replace(".","",$irrf->ate);
		$irrf->deducao = str_replace(".","",$irrf->deducao);
		
		$irrf->ate = str_replace(",",".",$irrf->ate);
		$irrf->deducao = str_replace(",",".",$irrf->deducao);		
		
		$inicio = $irrf->dataIni;
                $final = $irrf->dataFim;

                $partes_da_data = explode('/',$inicio);
                $datainicial =  $partes_da_data[2].'/'.$partes_da_data[1].'/'.$partes_da_data[0];
                $partes_da_data = explode('/',$final);
                $datafinal =  $partes_da_data[2].'/'.$partes_da_data[1].'/'.$partes_da_data[0];

                if ($datainicial >= $datafinal)
                {
                        $this->addError('É necessário que a data inicial seja inferior a data final!');
                }
               
               
                       if ($datainicial >= $datafinal)
        {
        	$this->addError('É necessário que a data inicial seja inferior a data final!');
        }		
        elseif(!preg_match("/^[0-9]/" ,$irrf->aliquota))
        {
        	$this->AddError('O campo "Alíquota" deve conter no máximo 1 caracter.');
        }
		elseif( Form::GetFormValue('percentual') <= 0 )
        {
            $this->AddError('Informe um percentual válido.');
        }
       	elseif( $irrf->deducao <= 0 )
        {
        	$this->AddError('Informe uma dedução válida.');
        }
		else
		{
			try {
				$irrf->save();
				$go = $MIOLO->getActionURL('adm', 'main:irrf:find', $irrf->idIrrf);
				$this->manager->Information('Alíquota do IRRF inserida com sucesso.',$go);

			}catch (Exception $e){
				$this->addError($e->getMessage());
			}
		}
	}

 }
?>
