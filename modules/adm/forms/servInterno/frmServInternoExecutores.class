
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?
class frmServInternoExecutores extends Form
{
	protected $objTipoServInterno;
	
    function __construct($objTipoServInterno)
    {
        global $MIOLO, $module, $self, $page;
        
		$this->objTipoServInterno = $objTipoServInterno;
        
        //$urlBase = $MIOLO->getActionUrl($module,'main:uo',$this->objTipoServInterno->idUo,array('form'=>'gestor'));
        //$page->setAction($urlBase);
        
        $this->Form('Incluir');
        $this->EventHandler();
    }

    function CreateFields()
    {
		$fields = array(
			new MLookupTextField('lkpUsuario','','Login',20),
			new MTextField('nome','','Nome',50),
            new MCalendarField('dataInicio','','Data Inicio',15),
            new MCalendarField('dataFim','','Data Fim',15),
			new MHiddenField('idUsuario','')
        );
		
        $this->SetFields($fields);

        $validators = array(
            new MDateDMYValidator('dataInicio','','required'),
            new MDateDMYValidator('dataFim','','required')
        );
        
        $this->SetValidators($validators);
		
        $this->SetFieldAttr('lkpUsuario','module','common');
	    $this->SetFieldAttr('lkpUsuario','item','usuario');
	    $this->SetFieldAttr('lkpUsuario','event','filler');
	    $this->SetFieldAttr('lkpUsuario','related','idUsuario,lkpUsuario,NULL,NULL,NULL,NULL,nome');
		
		$buttons = array(
        	new FormButton('btnSalvar', 'Incluir')
        );

		$this->SetButtons($buttons);
    }

	public function btnSalvar_click()
	{
		 //$dataInicial = Form::GetFormValue('dataInicio');
		
	
		$dataInicial = Form::GetFormValue('dataInicio');
    		$dataFinal   = Form::GetFormValue('dataFim');
   
   		$mkDataInicio = mktime(0,0,0,substr($dataInicial,3,2),substr($dataInicial,0,2),substr($dataInicial,6,4));
   		$mkDataFim    = mktime(0,0,0,substr($dataFinal,3,2),substr($dataFinal,0,2),substr($dataFinal,6,4));

		//echo"<script>alert('$mkDataInicio')</script>";	
    
		if($mkDataInicio >= $mkDataFim)
		{
			$this->addError("A data inicial deve ser menor que a final!");	
		} 
		else
		{
			$data = $this->getData();
			$executor = $this->manager->getBusiness('adm','executorservint');
	        $executor->setData($data);
	       	//var_dump($executor);
	       	$executor->idTipoServInt = $this->objTipoServInterno->idTipoServInt;
    
	       	//var_dump($this->idUsuario);
	        
			if ($data->idUsuario == 0)
			{
				$this->addError('Usuário inexistente.');
			}
			elseif($executor->findByExecutor($data->idUsuario) != 0)
			{
				$this->addError("Usuário já cadastrado neste Serviço Interno!");
			}
            else
       	    {
		    	try
		        {
		    	    $executor->save();
		            $this->manager->Information('Executor adicionado com sucesso.');
		        }
		        catch (Exception $e)
		        {
		    	    $this->manager->Error("Informe o seguinte erro à equipe do CGCO: ",$e->getMessage());
		        }        
		   }
	   }
    }	
 }
?>
