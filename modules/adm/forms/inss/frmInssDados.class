
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?
class frmInssDados extends MForm
{
	protected $objinss;

	function __construct($objinss)
	{
		$this->objinss = $objinss;
		parent::__construct('Dados da alíquota do INSS');
		$this->EventHandler();
	}

	function CreateFields()
	{
		global $MIOLO;
		$fields = array(
			new MTextField('idInss','','código','5'),
			new MCalendarField('dataIni','','Data de início','10'),
			new MCalendarField('dataFim','','Data fim','10'),
			new MCurrencyField( 'ate', '', 'Valor Máximo','20'), 
			new MTextField('percentual','','Percentual','6'),
			new MCurrencyField( 'fixo', '', 'Fixo','20'), 
			new MTextField('percPatronal','','Percentual Patronal','6')
		);
		$this->SetFields($fields);

		$this->SetFieldAttr('idInss','readonly',true);

		$buttons = array(
			new MButton('btnSalvar','Salvar'),
		);
		$this->SetButtons($buttons);

		$validators = array(
			new MRequiredValidator('dataIni'),
			new MRequiredValidator('dataFim'),
			new MRequiredValidator('percentual'),
			new MRequiredValidator('percPatronal')
		);
		$this->setValidators($validators);

		$this->SetData();
	}

	function SetData()
	{
		$data = $this->objinss;
		$this->SetFieldValue('idInss',$data->idInss);
		$this->SetFieldValue('dataIni',$data->dataIni);
		$this->SetFieldValue('dataFim',$data->dataFim);
		$this->SetFieldValue('ate',$data->ate);
		$this->SetFieldValue('percentual',$data->percentual);
		$this->SetFieldValue('fixo',$data->fixo);
		$this->SetFieldValue('percPatronal',$data->percPatronal);
	}
	public function btnSalvar_click()
	{
		global $MIOLO;
		
		$this->objinss->SetData($this->GetData());
		$cf = new MCurrencyFormatter();
		//$this->objinss->ate = $cf->toDecimal($this->objinss->ate);
		//$this->objinss->fixo = $cf->toDecimal($this->objinss->fixo);
		
		
		$this->objinss->ate =  $cf->removePrefixAndSuffix($this->objinss->ate,'REAL');
		$this->objinss->fixo = $cf->removePrefixAndSuffix($this->objinss->fixo,'REAL');
	
		$this->objinss->ate = str_replace(".","",$this->objinss->ate);
		$this->objinss->fixo = str_replace(".","",$this->objinss->fixo);
		
		$this->objinss->ate = str_replace(",",".",$this->objinss->ate);
		$this->objinss->fixo = str_replace(",",".",$this->objinss->fixo);		
	
		$this->objinss->percentual = str_replace(",",".",$this->objinss->percentual);
		$this->objinss->percPatronal = str_replace(",",".",$this->objinss->percPatronal);	
		
		$inicio = $this->objinss->dataIni;
                $final = $this->objinss->dataFim;

                $partes_da_data = explode('/',$inicio);
                $datainicial =  $partes_da_data[2].'/'.$partes_da_data[1].'/'.$partes_da_data[0];
                $partes_da_data = explode('/',$final);
                $datafinal =  $partes_da_data[2].'/'.$partes_da_data[1].'/'.$partes_da_data[0];

                if ($datainicial >= $datafinal)
                {
                        $this->addError('É necessário que a data inicial seja inferior a data final!');
                }
		elseif(!is_numeric ($this->objinss->percentual) or ($this->objinss->percentual <= 0 ))
		{
			$this->AddError('Informe um percentual válido.');
		}
		elseif(!is_numeric ($this->objinss->percPatronal) or ($this->objinss->percPatronal <= 0 ))
		{
			$this->AddError('Informe um percentual patronal válido.');
		}		elseif(trim($this->objinss->ate) == '')
		{
			$this->AddError('Informe o valor máximo.');
		}
		elseif(!is_numeric($this->objinss->ate))
		{
			$this->AddError('Informe o valor máximo corretamente.');
		}
		elseif($this->objinss->ate <= 0)
		{
			$this->AddError('O valor máximo não pode ser negativo.');
		}
		elseif(trim($this->objinss->fixo) == '')
		{
			$this->AddError('Informe o valor fixo.');
		}
		elseif(!is_numeric($this->objinss->fixo))
		{
			$this->AddError('Informe o valor fixo corretamente.');
		}
		elseif($this->objinss->fixo <= 0)
		{
			$this->AddError('O valor fixo não pode ser negativo.');
		}
		else
		{
			try
			{
				$this->objinss->save();
				$go = $MIOLO->getActionURL('adm', 'main:inss:find', $this->objinss->idInss);
				$this->manager->Information('Dados alterados com sucesso!',$go);
				
			}
			catch (Exception $e)
			{
				$this->AddError($e->GetMessage);
			}
		}
	}
}
?>
  
	
