<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?php
class frmInssNew extends MForm
{
	function __construct()
	{
		parent::__construct('Manutenção de alíquota do INSS');
		$this->EventHandler();
	}

	function CreateFields()
	{
		global $MIOLO;

		$fields = array(
			new MCalendarField('dataIni','','Data de início','10'),
			new MCalendarField('dataFim','','Data fim','10'),
			new MCurrencyField( 'ate', '', 'Valor Máximo','20'),
			new MTextField('percentual','','Percentual','6'),
			new MCurrencyField( 'fixo', '', 'Fixo','20'),
			new MTextField('percPatronal','','Percentual Patronal','6')
		);
		$this->SetFields($fields);

		$buttons = array(
			new MButton('btnNew', 'Incluir alíquota')
		);
		$this->setButtons($buttons);

		$validators = array(
			new MRequiredValidator('dataIni'),
			new MRequiredValidator('dataFim'),
			new MRequiredValidator('percentual'),
			new MRequiredValidator('percPatronal')

		);
		$this->setValidators($validators);
	}

	function btnNew_click()
	{
		global $MIOLO,$page,$module;
		$data = $this->GetData();
		$inss = $MIOLO->GetBusiness('common','inss');
		$inss->SetData($data);
		$cf = new MCurrencyFormatter();
	//	$inss->ate = $cf->toDecimal($inss->ate);
	//	$inss->fixo = $cf->toDecimal($inss->fixo);
	
		$inss->ate =  $cf->removePrefixAndSuffix($inss->ate,'REAL');
		$inss->fixo = $cf->removePrefixAndSuffix($inss->fixo,'REAL');
	
		$inss->ate = str_replace(".","",$inss->ate);
		$inss->fixo = str_replace(".","",$inss->fixo);
		
		$inss->ate = str_replace(",",".",$inss->ate);
		$inss->fixo = str_replace(",",".",$inss->fixo);
		
		$inss->percentual = str_replace(",",".",$inss->percentual);
		$inss->percPatronal = str_replace(",",".",$inss->percPatronal);		
	
	
 		$inicio = $inss->dataIni;
                $final = $inss->dataFim;

                $partes_da_data = explode('/',$inicio);
                $datainicial =  $partes_da_data[2].'/'.$partes_da_data[1].'/'.$partes_da_data[0];
                $partes_da_data = explode('/',$final);
                $datafinal =  $partes_da_data[2].'/'.$partes_da_data[1].'/'.$partes_da_data[0];

                if ($datainicial >= $datafinal)
		{
                        $this->addError('É necessário que a data inicial seja inferior a data final!');
		}
		elseif(!is_numeric ($inss->percentual) or ($inss->percentual <= 0 ))
		{
			$this->AddError('Informe um percentual válido.');
		}
		elseif(!is_numeric ($inss->percPatronal) or ($inss->percPatronal <= 0 ))
		{
			$this->AddError('Informe um percentual patronal válido.');
		}
		elseif(trim($inss->ate) == '')
		{
			$this->AddError('Informe o valor máximo.');
		}
		elseif(!is_numeric($inss->ate))
		{
			$this->AddError('Informe o valor máximo corretamente.');
		}
		elseif($inss->ate <= 0)
		{
			$this->AddError('O valor máximo não pode ser negativo.');
		}
		elseif(trim($inss->fixo) == '')
		{
			$this->AddError('Informe o valor fixo.');
		}
		elseif(!is_numeric($inss->fixo))
		{
			$this->AddError('Informe o valor fixo corretamente.');
		}
		elseif($inss->fixo <= 0)
		{
			$this->AddError('O valor fixo não pode ser negativo.');
		}
		else
		{
			try
			{
				$inss->save();
				$go = $MIOLO->GetActionURL('adm','main:inss',$inss->idInss);
				$this->manager->Information('Alíquota de INSS criada com sucesso.',$go);
			}
			catch (Exception $e)
			{
				$this->AddError($e->GetMessage());
			}
		}
	}
}
?>
