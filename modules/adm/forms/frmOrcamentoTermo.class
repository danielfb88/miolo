
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

	<?
	class frmOrcamentoTermo extends Form
	{
		
		//var $objOrcTerm,$IdLicita,$item,$itens;

		function __construct($objOrcTerm)
		{
	$this->objOrcTerm = $objOrcTerm;
			global $MIOLO, $module;

			// Titulo do Form		
			$this->Form('Orçamento Termo');

		$this->EventHandler();
		}
		
		function CreateFields()
		{

	global $MIOLO,$itens;

	$ui = $MIOLO->GetUI();

	//$this->grid = $ui->getGrid('adm','gridOrcTerm');
			$fields = array(
					new MTextField('idlicitacao','','Licitação',8),
					new MTextField('item','','Item',3),
					new MTextField('Requisicao','','Nº da Requisição',15),
					new MTextField('idmaterial','','Material',8),
					new MMultiLineField('descricao','','Descrição',500,8,50),
					//Requisicao Livros
					new MSeparator(),
					new MTextField('titulo','','Titulo',50),
					new MTextField('subtitulo','','Subtitulo',50),					
					new MTextField('autor','','Autor',50),					
					new MTextField('edicao','','Edição',20),
					new MTextField('editora','','Editora',20),
					new MTextField('localpublica','','Local de Publicação',20),
					new MTextField('datapublica','','Data Publicação',20),
					new MTextField('descfisica','','Descrição Física',20),
					new MTextField('volume','','Volume',20),					
					new MSeparator(),
				//Fim Requisicao Livros		
				
					new MTextField('datalim','','Data-Limite',10),				
					new MTextField('quantpedida','','Quantidade',8),
				//    new MTextField('idlicitacao','','Licitação',8),
					new MTextField('precoestimado','','Preço',12),
					new MTextField('numpro','','Número do Processo',25),
					new MTextField('campus','','Campus',50),
					new MTextField('empresa1','','1ª Empresa',30,'Max. 30 caracteres'),
					new MCurrencyField('orcamento1','','1º Orçamento',12, 'R$0,00'),
					new MTextField('empresa2','','2ª Empresa',30,'Max. 30 caracteres'),
					new MCurrencyField('orcamento2','','2º Orçamento',12, 'R$0,00'),
					new MTextField('empresa3','','3ª Empresa',30,'Max. 30 caracteres'),
					new MCurrencyField('orcamento3','','3º Orçamento',12, 'R$0,00'),
					new MMultiLineField('termoref','','Termo de Referência',60000,8,50,'Max. 60000 caracteres'),
					new MTextField('valortotal','','Valor Total',12),
					
					new MHiddenField('saldo','','',20),
					new MHiddenField('orcado','','',20),
				   new MHiddenField('livro'),				   

						);


		$buttons = array(
		
		new Text('Txtcanc1','Clique aqui para cancelar o item:'),				
		new MButton('btnCancela', 'Cancelar'),
		new Text('Txtcanc2','Clique aqui para reativar o item:'),	
		new MButton('btnRetorna', 'Reativar Item'),
		 new Separator(),
		new MButton('btnExibir', 'Exibir'),
		new MButton('btnTermo', 'Alterar Termo'),				
		new MButton('btnSalvar', 'Gravar'),
		new MButton('btnVoltar', 'Voltar',$MIOLO->getActionURL( $module, "main:orcterm")),
		new MButton('btnExcluir', 'Excluir Item Definitivamente'),				
		);

			$this->SetButtons($buttons);
		$this->setFields($fields);

			if ( $MIOLO->getPerms()->isMemberOf($MIOLO->getLogin()->id,'ADM_ADMINORCTERMO') /*or $MIOLO->getPerms()->isAdmin()*/)
			{//var_dump('Funcionou!!');
			$this->SetButtonAttr('btnTermo', 'visible',true);
			$this->SetButtonAttr('btnExcluir', 'visible',true);			
			}else
			{
			$this->SetButtonAttr('btnTermo', 'visible',false);
			$this->SetButtonAttr('btnExcluir', 'visible',false);			
			}			
			

			$this->SetButtonAttr('Txtcanc1', 'visible',false);
		$this->SetButtonAttr('Txtcanc2', 'visible',false);
	//$this->SetButtonAttr('btnCancela', 'SetAlign','right');
	$this->SetButtonAttr('btnCancela', 'visible',false);
	$this->SetButtonAttr('btnVoltar', 'visible',false);
	$this->SetButtonAttr('btnSalvar', 'visible',false);
	$this->SetButtonAttr('btnRetorna', 'visible',false);
	$this->empresa1->addAttribute('maxlength',30);
	$this->empresa2->addAttribute('maxlength',30);
	$this->empresa3->addAttribute('maxlength',30);
	$this->termoref->addAttribute('maxlength',60000);
	
	// Torna obrigatório o preenchimento dos campos "nº do processo" e "item" no form
	/*$validators = array( 	new RegExpValidator('empresa1','',null),
							new RegExpValidator('empresa2'),
							new RegExpValidator('empresa3'),
							new RegExpValidator('orcamento1'),
							new RegExpValidator('orcamento2'),
							new RegExpValidator('orcamento3'),
							new RegExpValidator('termoref'),
                                           );
	$this->SetValidators( $validators );*/
	/*$this->AddValidator(new RequiredValidator('processo'));
	$this->AddValidator(new RequiredValidator('item'));*/
	// Torna obrigatório o uso de dados numericos nos campos 'orcamento1','orcamento2','orcamento3', "nº do processo" e "item"
/*	$this->AddValidator(new MCompareValidator('orcamento1','','','','i','optional'));
	$this->AddValidator(new MCompareValidator('orcamento2','','','','i','optional'));
	$this->AddValidator(new MCompareValidator('orcamento3','','','','i','optional'));
*/
	// Faz com que os campos não fiquem visíveis ao usuario
		//$this->SetFieldAttr('idlicitacao', 'visible', false);
		
		$this->SetFieldAttr('idmaterial', 'visible', false);
		$this->SetFieldAttr('numpro', 'visible', false);
		$this->SetFieldAttr('descricao', 'visible', false);
		$this->SetFieldAttr('quantpedida', 'visible', false);
		$this->SetFieldAttr('precoestimado', 'visible', false);
		$this->SetFieldAttr('campus', 'visible', false);
		$this->SetFieldAttr('valortotal', 'visible', false);

		$this->SetFieldAttr('empresa1', 'visible', false);
		$this->SetFieldAttr('orcamento1', 'visible', false);
		$this->SetFieldAttr('empresa2', 'visible', false);
		$this->SetFieldAttr('orcamento2', 'visible', false);
		$this->SetFieldAttr('empresa3', 'visible', false);
		$this->SetFieldAttr('orcamento3', 'visible', false);
		$this->SetFieldAttr('termoref', 'visible', false);


		
		}

		function btnExcluir_click()
			{
		
		global $MIOLO;
		
		$excluir = $this->GetFormValue('excluir');

	if ($excluir == 'true')
	{
	$Idlicitacao = $this->GetFormValue('idlicitacao');
	
	$item = $this->GetFormValue('item');
	$IdRequisicao = $this->GetFormValue('idrequisicao');
	//var_dump('OK 1');
	$this->RemoverOrctermo($Idlicitacao,$item,$IdRequisicao);

	}
	else if ($excluir == 'false')
	{
	$action = $MIOLO->getActionURL( $module, "main:orcterm");
		$this->manager->Information('O item não foi excluido', $action );
	}

		$action_sim = $MIOLO->getActionURL( $module, "main:orcamentotermo",'',array	('event'=>'btnExcluir_click','excluir'=>'true','idlicitacao'=>$this->GetFieldValue('idlicitacao'),'item'=>$this->item->value,'idrequisicao'=>$this->GetFormValue('idrequisicao')));

		$action_nao = $MIOLO->GetActionURL($module, "main:orcamentotermo",'',array	('event'=>'btnExcluir_click','excluir'=>'false'));

		$this->manager->Question("Deseja mesmo excluir o item ?",$action_sim,$action_nao);

			}
 
	function btnExibir_click()
	{
		global $MIOLO;

	 $data = $this->getData();
		$objOrcTerm  = $MIOLO->getBusiness('adm', 'orcamentotermo');
		$ItemReq = $MIOLO->getBusiness('adm', 'itemreq');
		 $instituicao = $MIOLO->getBusiness('common', 'instituicao');
		 $processo = $MIOLO->getBusiness('protocolo', 'processo'); 
	//$na = $objOrcTerm->GetItemDefByLicitacao(315);

	
	
	//var_dump($na->result[5]);
		// Atribui dos campos do formulário na grid

	  // $data = $this->getData();
	   // $objOrcTerm->setData($data);

		// efetua a busca e seta os registros na grid
		//$data = $bus->getOrcTerm('processo','item');

	//		$processo = $this->GetFieldValue('processo'); 
	//		$item = $this->GetFieldValue('item'); 
	//		$campus = $this->GetFieldValue('campus');
	//var_dump($this->item->value);
	$IdRequisicao = ($this->GetFormValue('idrequisicao'));	
		$data = $objOrcTerm->getOrcTerm($this->GetFieldValue('idlicitacao'),$this->item->value,$IdRequisicao);
		$infoitem = $objOrcTerm->getGetInfoOrcTerm($this->GetFieldValue('idlicitacao'),$this->item->value,$IdRequisicao);
		
		
		
		if ( $infoitem->result == null)
		{
		$infoitem = $objOrcTerm->getGetInfoBibOrcTerm($this->GetFieldValue('idlicitacao'),$this->item->value,$IdRequisicao);
		$itemreqbib = $MIOLO->getBusiness('adm', 'itemreqbib');
		$bibinfo = $itemreqbib->GetById($infoitem->GetValue('idrequisicao'));

		$this->SetFieldValue('livro',true) ;		
		}else{
			$this->SetFieldAttr('titulo', 'visible', false);
		$this->SetFieldAttr('autor', 'visible', false);
		$this->SetFieldAttr('edicao', 'visible', false);
		$this->SetFieldAttr('localpublica', 'visible', false);
		$this->SetFieldAttr('editora', 'visible', false);
		$this->SetFieldAttr('datapublica', 'visible', false);
		$this->SetFieldAttr('subtitulo', 'visible', false);
		$this->SetFieldAttr('descfisica', 'visible', false);
		$this->SetFieldAttr('volume', 'visible', false);

		}		
		//$ItemReq->GetCampusByReq($IdRequisicao);
	// echo(implode('<br>', $data));
			$objOrcTerm->setData($data);
			
	//Data de hoje		
	$today = date("Y-m-d");
	//Data-Limite para digitação dos termos
	$datalimite = $data->GetValue('datalimite');
	$datalim = substr($datalimite,8,2).'/'.substr($datalimite,5,2).'/'.substr($datalimite,0,4);
	$this->SetFieldValue('datalim', $datalim);
	 
	$this->SetFieldAttr('datalim','readonly',true);
	//Taka
	
		$login = $this->manager->GetLogin();
			//id do usuário atual
			$idUsuario = $login->idkey;
		$IdInst = $ItemReq->GetCampusByReq($infoitem->GetValue('idrequisicao'));
		
		$NumPro = $processo->numProcessoFormatado($infoitem->GetValue('numpro'));
		$Campus = $instituicao->GetById($IdInst[0][0]);
	//	var_dump($Campus->instituicao);
		//id do usuário responsável pela digitação do termo
	 $iduser = $data->GetValue('iduser');
	 // se o usuário for um dos pré estabelecidos, ignora as condições de id do usuario e data limite
		
	//	$this->SetFieldValue('idlicitacao', $data->GetValue('idlicitacao'));
		$this->SetFieldValue('numpro', $NumPro);
		$this->SetFieldValue('descricao', $infoitem->GetValue('descricao'));
		$this->SetFieldValue('quantpedida',$infoitem->GetValue('quantpedida'));
		$this->SetFieldValue('precoestimado', $infoitem->GetValue('precoestimado'));
		$this->SetFieldValue('campus', $Campus->instituicao);
		$this->SetFieldValue('Requisicao', $infoitem->GetValue('idrequisicao'));
		$this->SetFieldValue('valortotal', $infoitem->GetValue('valortotal'));
		$this->SetFieldValue('idmaterial', $infoitem->GetValue('idmaterial'));
		$this->SetFieldValue('empresa1', trim($data->GetValue('empresa1')));
		$this->SetFieldValue('orcamento1', trim($data->GetValue('orcamento1')));
		$this->SetFieldValue('empresa2', trim($data->GetValue('empresa2')));
		$this->SetFieldValue('orcamento2', trim($data->GetValue('orcamento2')));
		$this->SetFieldValue('empresa3', trim($data->GetValue('empresa3')));
		$this->SetFieldValue('orcamento3', trim($data->GetValue('orcamento3')));
		$this->SetFieldValue('termoref', trim($data->GetValue('termoref')));
		
	//	var_dump($bibinfo);
	// Livro
		$this->SetFieldValue('titulo', $bibinfo->titulo);
		$this->SetFieldValue('autor',$bibinfo->autor);
		$this->SetFieldValue('edicao', $bibinfo->edicao);
		$this->SetFieldValue('localpublica', $bibinfo->localPublicacao);
		$this->SetFieldValue('editora',$bibinfo->editora);
		$this->SetFieldValue('datapublica', $bibinfo->dataPublicacao);
		$this->SetFieldValue('subtitulo', $bibinfo->subtitulo);
		$this->SetFieldValue('descfisica',$bibinfo->descFisica);
		$this->SetFieldValue('volume', $bibinfo->volume);
	//Fim Livro		//$this->SetFieldValue('item', $this->item->value);
		
	/*$data->item = $data->GetValue('item');
	$data->processo = $data->GetValue('processo');
	*/
	// Faz com que os campos não sejam editáveis pelo usuário
	/*	$this->SetFieldAttr('idlicitacao', 'readonly', true);
		$this->SetFieldAttr('item', 'readonly', true);
		$this->SetFieldAttr('numpro', 'readonly', true);
		$this->SetFieldAttr('descricao', 'readonly', true);
		$this->SetFieldAttr('quantpedida', 'readonly', true);
		$this->SetFieldAttr('precoestimado', 'readonly', true);
		$this->SetFieldAttr('campus', 'readonly', true);
		$this->SetFieldAttr('valortotal', 'readonly', true);

		$this->SetFieldAttr('processo', 'readonly', true);
		$this->SetFieldAttr('idmaterial', 'readonly', true);
	*/
		$this->Travar();
		
		



	// Torna visíveis os campos do formulario
		$this->SetFieldAttr('idlicitacao', 'visible', true);
		$this->SetFieldAttr('idmaterial', 'visible', true);
		$this->SetFieldAttr('numpro', 'visible', true);
		$this->SetFieldAttr('descricao', 'visible', true);
		$this->SetFieldAttr('quantpedida', 'visible', true);
		$this->SetFieldAttr('precoestimado', 'visible', true);
		$this->SetFieldAttr('campus', 'visible', true);
		$this->SetFieldAttr('valortotal', 'visible', true);
		$this->SetFieldAttr('item', 'visible', true);

		$this->SetFieldAttr('empresa1', 'visible', true);
		$this->SetFieldAttr('orcamento1', 'visible', true);
		$this->SetFieldAttr('empresa2', 'visible', true);
		$this->SetFieldAttr('orcamento2', 'visible', true);
		$this->SetFieldAttr('empresa3', 'visible', true);
		$this->SetFieldAttr('orcamento3', 'visible', true);
		$this->SetFieldAttr('termoref', 'visible', true);
	
//	var_dump($infoitem->GetValue('status'));
	$status = $infoitem->GetValue('status');
	if  ($status == '2')
	{
	$this->SetButtonAttr('Txtcanc2', 'visible',true);
	$this->SetButtonAttr('btnRetorna', 'visible',true);
	$this->SetButtonAttr('btnCancela', 'visible',false);
	$this->SetButtonAttr('btnSalvar', 'visible',false);
	}else{
	$this->SetButtonAttr('Txtcanc1', 'visible',true);
	$this->SetButtonAttr('btnCancela', 'visible',true);
	$this->SetButtonAttr('btnRetorna', 'visible',false);
	$this->SetButtonAttr('btnSalvar', 'visible',true);
	}
	/*
	$this->SetButtonAttr('btnCancela', 'visible',true);
	$this->SetButtonAttr('btnRetorna', 'visible',false);
*/	
	$this->SetButtonAttr('btnVoltar', 'visible',true);
	
	$this->SetButtonAttr('btnExibir', 'visible',false);
			//admin				Suzana				Delma					Rodrigo				Nelson				Manoel				Regina				Rosana
//	 if ($idUsuario == 0 or $idUsuario == 227 or $idUsuario == 228  or $idUsuario == 71  or $idUsuario == 277  or $idUsuario == 132 or $idUsuario == 56   or $idUsuario == 44 )
	// {
	 $idUsuario = $iduser;
	// $today = $datalimite;

	 //}
	//var_dump ('hoje',$today,'DataLimite',$datalimite);
			//Se o usuário ñ for o responsável, ou se ultrapassou a data limite para a digitação, o acesso a edição dos termos de orçamento é bloqueado
		 if ($idUsuario == $iduser and $today <= $datalimite) 
					{
		if($status !== '2')
		{
	//	$this->AddError('Você não tem permissão para fazer o termo de orçamento dessa requisição');

		$this->SetButtonAttr('btnSalvar', 'visible',true);
		$this->SetFieldAttr('empresa1', 'readonly', false);
		$this->SetFieldAttr('orcamento1', 'readonly', false);
		$this->SetFieldAttr('empresa2', 'readonly', false);
		$this->SetFieldAttr('orcamento2', 'readonly', false);
		$this->SetFieldAttr('empresa3', 'readonly', false);
		$this->SetFieldAttr('orcamento3', 'readonly', false);
		$this->SetFieldAttr('termoref', 'readonly', false);

		
		}
					}else{
//	
			$this->SetButtonAttr('btnSalvar', 'visible',false);
			$this->SetButtonAttr('btnTermo', 'visible',false);			
	$this->SetButtonAttr('Txtcanc1', 'visible',false);
	$this->SetButtonAttr('btnCancela', 'visible',false);
	$this->SetButtonAttr('btnRetorna', 'visible',false);
	$this->SetButtonAttr('btnSalvar', 'visible',false);
						
//	
	$this->AddError('Data-Limite Ultrapassada');
							}

	}
	function btnVoltar_click()
		{
	//	var_dump($this->orcado->value);

		//$ok = $this->Validar();
		//	$ok = $this->ValidateAll(false,'ignore');
			//var_dump($ok);
			//$data = $this->getData();
			//$this->setData($data);
			//$MIOLO->getActionURL( $module, "main:orctermo");
		}
	/*	if (cancela = true)
			{
			$objOrcTerm->status = 'C';
			}
		*/
		
	function btnTermo_click()
		{
		global $MIOLO;

		$ok = true;

		$data = $this->getData();
		if (substr_count($data->orcamento1, ",") == 0) {
        	        $data->orcamento1 = str_replace(".",",",$data->orcamento1);
	        }else{
			$data->orcamento1 = str_replace(".","",$data->orcamento1);
        	}
	        $cf = new MCurrencyFormatter();
	        $data->orcamento1 = $cf->toDecimal($data->orcamento1);
			if( $data->empresa1 != '' &&  (!preg_match("/^[A-Z|0-9|]/" ,$data->empresa1)))
			{
					$this->AddError('Insira um valor válido para nome empresa 1.');
					$ValorOk = false;
			}	        
			if ($data->orcamento1 <= 0)
            {
                $this->AddError('Insira um valor válido para orçamento 1.');
				$ok = false;
			}
			if (substr_count($data->orcamento2, ",") == 0) {
	             $data->orcamento2 = str_replace(".",",",$data->orcamento2);
		    }else{
	             $data->orcamento2 = str_replace(".","",$data->orcamento2);
		    }
		    $data->orcamento2 = $cf->toDecimal($data->orcamento2);
			if( $data->empresa2 != '' &&  (!preg_match("/^[A-Z|0-9|]/" ,$data->empresa2)))
			{
				$this->AddError('Insira um valor válido para nome empresa 2.');
				$ValorOk = false;
			}		            
		    if ($data->orcamento2 <= 0)
		    {
		        $this->AddError('Insira um valor válido para orçamento 2.');
				$ok = false;
			}

			if (substr_count($data->orcamento3, ",") == 0) {
                    $data->orcamento3 = str_replace(".",",",$data->orcamento3);
            }else{
                    $data->orcamento3 = str_replace(".","",$data->orcamento3);
            }
            $data->orcamento3 = $cf->toDecimal($data->orcamento3);
            if ($data->orcamento3 <= 0)
            {
                $this->AddError('Insira um valor válido para orçamento 3.');
				$ok = false;
			}
			if( $data->empresa3 != '' &&  (!preg_match("/^[A-Z|0-9|]/" ,$data->empresa3)))
			{
					$this->AddError('Insira um valor válido para nome empresa 3.');
					$ValorOk = false;
			}			
		$objOrcTerm  = $MIOLO->getBusiness('adm', 'orcamentotermo');
		$objOrcTerm->setData($data);
		if ($ok == true){
		try
		{
		/*	
			$objOrcTerm->empresa1 = $this->getFieldValue('empresa1');
			$objOrcTerm->empresa2 = $this->getFieldValue('empresa2');       
			$objOrcTerm->empresa3 = $this->getFieldValue('empresa3');
			$objOrcTerm->orcamento1 = $this->getFieldValue('orcamento1');
			$objOrcTerm->orcamento2 = $this->getFieldValue('orcamento2');
			$objOrcTerm->orcamento3 = $this->getFieldValue('orcamento3');
			$objOrcTerm->termoref = $this->getFieldValue('termoref');
*/  
			//Validar saldo
                        $ValorOk = $this->ValidaSaldo();

			if($ValorOk == true) 
			{
				$ok = $objOrcTerm->AlteraTermo($this->GetFieldValue('idlicitacao'),$this->item->value);
			
				$action = $MIOLO->getActionURL( $module, "main:orcterm");

				if ($ok == true)
				{
					$this->manager->Information('O item foi alterado com sucesso', $action );
				}else{
					$this->manager->Information('Erro na alteração do termo', $action );			
				}
			}else{
					$this->manager->Information('Saldo indisponível.', $action);
			}
						
		}  
		catch (EMioloException $e)
		   {
			   $this->AddError('Erro no cadastramento/alteração das informações do Orçamento');
		   }
		}
		}
		
		function btnSalvar_click()
		{
						global $MIOLO;

							$ValorOk = true;

									$data = $this->getData();
									if (substr_count($data->orcamento1, ",") == 0) {
										    $data->orcamento1 = str_replace(".",",",$data->orcamento1);
									}else{
										    $data->orcamento1 = str_replace(".","",$data->orcamento1);
									}
									$cf = new MCurrencyFormatter();
									$data->orcamento1 = $cf->toDecimal($data->orcamento1);
									if( $data->empresa1 != '' &&  (!preg_match("/^[A-Z|0-9|]/" ,$data->empresa1)))
									{
										    $this->AddError('Insira um valor válido para nome empresa 1.');
										    $ValorOk = false;
									}									
									if (($data->orcamento1 <= 0))
									{
										    $this->AddError('Insira um valor válido para orçamento 1.');
										    $ValorOk = false;
									}									
									if (substr_count($data->orcamento2, ",") == 0) {
										    $data->orcamento2 = str_replace(".",",",$data->orcamento2);
									}else{
										    $data->orcamento2 = str_replace(".","",$data->orcamento2);
									}
									$data->orcamento2 = $cf->toDecimal($data->orcamento2);
									
									if( $data->empresa2 != '' &&  (!preg_match("/^[A-Z|0-9|]/" ,$data->empresa2)))
									{
										    $this->AddError('Insira um valor válido para nome empresa 2.');
										    $ValorOk = false;
									}									
									if ($data->orcamento2 <= 0)
									{
										    $this->AddError('Insira um valor válido para orçamento 2.');
										    $ValorOk = false;
									}

									if (substr_count($data->orcamento3, ",") == 0) {
										    $data->orcamento3 = str_replace(".",",",$data->orcamento3);
									}else{
										    $data->orcamento3 = str_replace(".","",$data->orcamento3);
									}
									$data->orcamento3 = $cf->toDecimal($data->orcamento3);
									if( $data->empresa3 != '' &&  (!preg_match("/^[A-Z|0-9|]/" ,$data->empresa3)))
									{
										    $this->AddError('Insira um valor válido para nome empresa 3.');
										    $ValorOk = false;
									}									
									if ($data->orcamento3 <= 0)
									{
										    $this->AddError('Insira um valor válido para orçamento 3.');
										    $ValorOk = false;
									}
									$objOrcTerm  = $MIOLO->getBusiness('adm', 'orcamentotermo');
									$objOrcTerm->setData($data);
									if ($ValorOk == true)
									{
									   try
									   {
											$livro = $this->GetFieldValue('livro');
											//var_dump($livro);			
											//Validar Campos
											$ok = $this->Validar();
											$ValorOk = $this->ValidaSaldo();
			
											if ($ok == 2 or ($livro == true and $ok == 1 ))
											{
												if ($ValorOk == true)
												{
													$objOrcTerm->status = '1';
													$semsaldo = false;
												}
												else
												{
													$semsaldo = true;
													$objOrcTerm->status = '0';
												}
											}
											else
											{
												$objOrcTerm->status = '0';
											}
	
											//var_dump($objOrcTerm->status);

											/*$objOrcTerm->empresa1 = $this->getFieldValue('empresa1');
												$objOrcTerm->empresa2 = $this->getFieldValue('empresa2');       
												$objOrcTerm->empresa3 = $this->getFieldValue('empresa3');
												$objOrcTerm->orcamento1 = $this->getFieldValue('orcamento1');
												$objOrcTerm->orcamento2 = $this->getFieldValue('orcamento2');
												$objOrcTerm->orcamento3 = $this->getFieldValue('orcamento3');
												$objOrcTerm->termoref = $this->getFieldValue('termoref');
											*/			
											//var_dump('Lic',$this->GetFieldValue('idlicitacao'),'item',$this->item->value);
											if($semsaldo == false){
											   $objOrcTerm->Update($this->GetFieldValue('idlicitacao'),$this->item->value);
											}
			
											//$action = $this->manager->GetCurrentURL();
											$action = $MIOLO->getActionURL( $module, "main:orcterm");
											if ($ok == 0 or ($ok == 1 and $livro == false))
											{
												$this->manager->Information('Dados Salvos Parcialmente.', $action );	
											}
										  	else
											{
										 		if ($semsaldo == true)
										 		{
										 			$this->manager->Information('Valor Maximo Ultrapassado.', $action );
										 	 	}
										  		else
												{
												  	$this->manager->Information('Dados cadastrados com sucesso.', $action );
												}
											}
									   }//try
									   catch (EMioloException $e)
									   {
										   $this->AddError('Erro no cadastramento/alteração das informações do Orçamento');
									   }
								}//if
								return;
						}

	
	function btnRetorna_click()
	
	{
	global $MIOLO;
	$ret = $this->GetFormValue('ret');

if ($ret == 'true')
{
$Idlicitacao = $this->GetFormValue('idlicitacao');
$item = $this->GetFormValue('item');
$this->ReativarItem($Idlicitacao,$item);

}
else if ($ret == 'false')
{
$action = $MIOLO->getActionURL( $module, "main:orcterm");
	$this->manager->Information('O item não foi reativado', $action );
}

	$action_sim = $MIOLO->getActionURL( $module, "main:orcamentotermo",'',array	('event'=>'btnRetorna_click','ret'=>'true','idlicitacao'=>$this->GetFieldValue('idlicitacao'),'item'=>$this->item->value));

	$action_nao = $MIOLO->GetActionURL($module, "main:orcamentotermo",'',array	('event'=>'btnRetorna_click','ret'=>'false'));
	$this->manager->Question('Deseja mesmo reativar o item?',$action_sim,$action_nao);


	}
	
	function btnCancela_click()
	
	{
	global $MIOLO, $module,$Idlicitacao,$item;


		$canc = $this->GetFormValue('canc');

		if ($canc == 'true')
		{
		$Idlicitacao = $this->GetFormValue('idlicitacao');
		$item = $this->GetFormValue('item');
		$this->CancelarItem($Idlicitacao,$item);

		}
		else if ($canc == 'false')
		{
		$action = $MIOLO->getActionURL( $module, "main:orcterm");
			$this->manager->Information('O item não foi cancelado', $action );
		}
			//$MIOLO->getActionURL( $module, "main:orcterm")
		$action_sim = $MIOLO->getActionURL( $module, "main:orcamentotermo",'',array('event'=>'btnCancela_click','canc'=>'true','idlicitacao'=>$this->GetFieldValue('idlicitacao'),'item'=>$this->item->value));
		//$action_sim = $MIOLO->GetActionURL($module,$action,'', array('event'=>'CancelarItem','canc'=>'true'));
		$action_nao = $MIOLO->GetActionURL($module, "main:orcamentotermo",'',array('event'=>'btnCancela_click','canc'=>'false'));
			$this->manager->Question('Deseja mesmo cancelar o item?',$action_sim,$action_nao);
			//;



			}
	
	function CancelarItem($Idlicitacao,$item)
	{
	global $MIOLO,$Idlicitacao,$item;
	

	try
		{
		$objOrcTerm  = $MIOLO->getBusiness('adm', 'orcamentotermo');
	
	
			$objOrcTerm->status = 2 ;
			$stat = true;
	//var_dump('Lic',$this->GetFieldValue('idlicitacao'),'item',$this->item->value);

			   $objOrcTerm->Update($Idlicitacao,$item,$stat);
		} 
		catch (EMioloException $e)
		   {
			   $this->AddError('Erro no Cancelamento');
		   }	
			//$this->manager->GetCurrentURL();
			$action = $MIOLO->getActionURL( $module, "main:orcterm");
	$this->manager->Information('Item cancelado com sucesso', $action );
	}
	
	function ReativarItem($Idlicitacao,$item)
	{
	global $MIOLO;
	

		try
		{
		$objOrcTerm  = $MIOLO->getBusiness('adm', 'orcamentotermo');
	
	
			$objOrcTerm->status = 0 ;
			$stat = true;
	//var_dump('Lic',$this->GetFieldValue('idlicitacao'),'item',$this->item->value);

			   $objOrcTerm->Update($Idlicitacao,$item,$stat);
		} 
		catch (EMioloException $e)
		   {
			   $this->AddError('Erro no Cancelamento');
		   }	
//			$action = $this->manager->GetCurrentURL();

			$action = $MIOLO->getActionURL( $module, "main:orcterm",array("form"=>'frmorcamentotermo',"event"=>'btnExibir_click'));
	$this->manager->Information('Item reativado com sucesso', $action );
	}
	
	function Travar()
	{
		$this->SetFieldAttr('idlicitacao', 'readonly', true);
		$this->SetFieldAttr('item', 'readonly', true);
		$this->SetFieldAttr('numpro', 'readonly', true);
		$this->SetFieldAttr('descricao', 'readonly', true);
		$this->SetFieldAttr('quantpedida', 'readonly', true);
		$this->SetFieldAttr('precoestimado', 'readonly', true);
		$this->SetFieldAttr('campus', 'readonly', true);
		$this->SetFieldAttr('valortotal', 'readonly', true);
		$this->SetFieldAttr('Requisicao', 'readonly', true);
		
		//Requisição Livro
		$this->SetFieldAttr('titulo', 'readonly', true);
		$this->SetFieldAttr('autor', 'readonly', true);
		$this->SetFieldAttr('edicao', 'readonly', true);
		$this->SetFieldAttr('localpublica', 'readonly', true);
		$this->SetFieldAttr('editora', 'readonly', true);
		$this->SetFieldAttr('datapublica', 'readonly', true);
		$this->SetFieldAttr('subtitulo', 'readonly', true);
		$this->SetFieldAttr('descfisica', 'readonly', true);
		$this->SetFieldAttr('volume', 'readonly', true);
		//Fim Requisição Livro
		
	
		$this->SetFieldAttr('processo', 'readonly', true);
		$this->SetFieldAttr('idmaterial', 'readonly', true);

		$this->SetFieldAttr('empresa1', 'readonly', true);
		$this->SetFieldAttr('orcamento1', 'readonly', true);
		$this->SetFieldAttr('empresa2', 'readonly', true);
		$this->SetFieldAttr('orcamento2', 'readonly', true);
		$this->SetFieldAttr('empresa3', 'readonly', true);
		$this->SetFieldAttr('orcamento3', 'readonly', true);
		$this->SetFieldAttr('termoref', 'readonly', true);
	}

	function Validar()
	{
		if 	((trim($this->getFieldValue('empresa1')) != null)
 			and (trim($this->getFieldValue('empresa2')) != null) 
			and (trim($this->getFieldValue('empresa3')) != null)
			 and (trim($this->getFieldValue('orcamento1')) != null) 
			and (trim($this->getFieldValue('orcamento2')) != null) 
			and (trim($this->getFieldValue('orcamento3')) != null)
			)
		  {
		  $ok = 1;
		  
		    if (trim($this->getFieldValue('termoref')) != null and $ok == 1)
			{
			$ok = 2;
			}
			
		}
			else
		  {
		  $ok = 0;
		  }
//		  var_dump($ok);
		return $ok;
	}
	
	function ValidaSaldo()
	{
		$data = $this->getData();
                if (substr_count($data->orcamento1, ",") == 0) {
                        $data->orcamento1 = str_replace(".",",",$data->orcamento1);
                }else{
                        $data->orcamento1 = str_replace(".","",$data->orcamento1);
                }
                $cf = new MCurrencyFormatter();
                $data->orcamento1 = $cf->toDecimal($data->orcamento1);

                if (substr_count($data->orcamento2, ",") == 0) {
                        $data->orcamento2 = str_replace(".",",",$data->orcamento2);
                }else{
                        $data->orcamento2 = str_replace(".","",$data->orcamento2);
                }
                $data->orcamento2 = $cf->toDecimal($data->orcamento2);

                if (substr_count($data->orcamento3, ",") == 0) {
                        $data->orcamento3 = str_replace(".",",",$data->orcamento3);
                }else{
                        $data->orcamento3 = str_replace(".","",$data->orcamento3);
                }
                $data->orcamento3 = $cf->toDecimal($data->orcamento3);
                	
//		$Total = ($this->orcado->value+((($data->orcamento1+$data->orcamento2+$data->orcamento3)/3) * $this->quantpedida->value));
		$Total = (($data->orcamento1+$data->orcamento2+$data->orcamento3)/3) * $this->quantpedida->value;
	//	var_dump('Total',$Total);
	//	var_dump('Saldo',$this->saldo->value);
		if 	($Total <= $this->saldo->value)
		{
		$ValorOk = true;
		}else{
		$ValorOk = false;
		}
		
	return $ValorOk;
	}

	
function RemoverOrctermo($Idlicitacao,$numitem,$IdRequisicao)
	{ 

		global $MIOLO, $module,$item, $page, $theme, $action;	

		$licitacao  = $MIOLO->getBusiness('adm', 'licitacao');

		$DadosLicitacao = $licitacao->getById($Idlicitacao);
		//Diferente para serviço ou material

		if ($DadosLicitacao->idTipoLicitacao == '1' || $DadosLicitacao->idTipoLicitacao == '4')
			{
			$itemReq = $this->manager->getBusiness('adm','itemreq');

			}
		elseif ($DadosLicitacao->idTipoLicitacao == '2')
			$itemReq = $this->manager->getBusiness('adm','itemservext');
        else
		{
			$itemReq = $this->manager->getBusiness('adm','itemreqbib');
	

		}
		
		$OrcTermo = $this->manager->getBusiness('adm','orcamentotermo');

        $itemLicitacao = $this->manager->getBusiness('adm','itemlicitacao');


        try
        {
				//var_dump('$itemReq->removeDaLicitacao',$Idlicitacao,$numitem,$IdRequisicao);
                $itemReq->removeDaLicitacao($Idlicitacao,$numitem,$IdRequisicao);// parâmetro $numitem adicionado

				$OrcTermo->RemoveOrcTermo($Idlicitacao,$numitem);


                if ($DadosLicitacao->status == 1 and $itemReq->getStatusByItem($DadosLicitacao->idLicitacao,$numitem) == 0)
                {
                    $DadosLicitacao->reordenaItens($numitem); //Reordena os itens para eliminar o buraco	 parâmetro $numitem adicionado
			//var_dump('OK Licitação Reordenada');					
                    $itemLicitacao->removeUltimoItem($Idlicitacao); //Atualiza o item na tabela itemlicitacao
			//var_dump('OK Licitação Ultimo item removido');										
					$OrcTermo->ReordenaOrcTerm($Idlicitacao,$numitem);
			//var_dump('OK OrcTermo Reordenado');										
                }
                else
                {
                    $DadosLicitacao->deleteItemDoMapa($itemReq->item);
                }

		$action = $MIOLO->getActionURL( $module, "main:orcterm");
		$this->manager->Information('Ítem de licitação cancelado. Itens de Requisição voltaram pra licitação.', $action );
            
        }
        catch (Exception $e)
        {
            $this->addError($e->getMessage());
        }
		
	}

		
	}

	?>
