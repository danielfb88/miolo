
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?
class frmVeiculoNew extends MForm
{
	function __construct()
	{
		parent::__construct('Incluir Novo Veículo');
		$this->EventHandler();
	}

	function CreateFields()
	{
		global $MIOLO;

		$tabelaGeral = $this->manager->getBusiness('common','tabelageral');
		$tipoVeiculos = $tabelaGeral->listByTabela('AD_TIPOVEICULO')->result;
		$tipoCombustiveis = $tabelaGeral->listByTabela('AD_TIPOCOMBUSTIVEL')->result;
		$instituicao = $MIOLO->GetBusiness('common','instituicao');
		$idinstituicao = $this->manager->GetBusiness('common','instituicao');
		$instituicao = $idinstituicao->listAll();  	 

		$fields = array(
			new MTextField('placa','','Placa','7','Máx. 7 caracteres'),
			new MSelection('tipoVeiculo',1,'Tipo Veiculo',$tipoVeiculos),
			new MTextField('renavam','','Renavam','12','Máx. 12 caracteres'),
			new MTextField('chassis','','Chassis','20','Máx. 20 caracteres'),
			new MTextField('marca','','Marca','15','Máx. 15 caracteres'),
			new MTextField('modelo','','Modelo','20','Máx. 20 caracteres'),
			new MTextField('anoFab','','Ano Fabricação','4','Máx. 4 números'),
			new MTextField('anoMod','','Ano Modelo','4','Máx. 4 números'),
			new MTextField('capacidade','','Capacidade','3'),
			new MSelection('combustivel',1,'Combustível',$tipoCombustiveis),
			new MCurrencyField('valorKm','','Custo por Km','9','Máx. 9 números'),
			new MSelection ('idinstituicao','','Instituição'),
		);

		$this->SetFields($fields);
		$this->placa->addAttribute('maxlength','7');
		$this->renavam->addAttribute('maxlength','12');
		$this->chassis->addAttribute('maxlength','20');
		$this->marca->addAttribute('maxlength','15');
		$this->modelo->addAttribute('maxlength','20');
		$this->anoFab->addAttribute('maxlength','4');
		$this->anoMod->addAttribute('maxlength','4');
		$this->capacidade->addAttribute('maxlength','10');
		$this->valorKm->addAttribute('maxlength','9');

		$buttons = array(
			new FormButton('btnNew', 'Cadastrar Veiculo')
		);
		$this->SetButtons($buttons);

		$validators = array(
			new MRequiredValidator('placa'),
			new MRequiredValidator('renavam'),
			new MRequiredValidator('chassis'),
			new MRequiredValidator('marca'),
			new MRequiredValidator('modelo'),
			new MRequiredValidator('anoFab'),
			new MRequiredValidator('anoMod'),
			new MIntegerValidator('capacidade','','required'),
			new MRequiredValidator('valorKm'),
		);

                $objinst = $MIOLO->GetBusiness('common','instituicao');
		$query = $objinst->ListRange(NULL, 'instituicao');
		while ( !$query->eof() )
  		{
			
			if(($query->fields('ug')!='') or ($query->fields('uasg')!='')){
			      $options[$query->fields('idinstituicao')] = $query->fields('instituicao');
			}
    			$query->moveNext();  
   		}
		$this->SetFieldAttr('idinstituicao','options', $options);
		$this->SetValidators($validators);
	}

	function btnNew_click()
	{

		$veiculo = $this->manager->GetBusiness('adm','veiculo');


		$cf = new MCurrencyFormatter();
		
		$valorkm = Form::GetFormValue('valorKm');
		if (substr_count($valorKm, ",") == 0) {
                      $valorKm = str_replace(".",",",$valorKm);
                }else{
                      $valorKm = str_replace(".","",$valorKm);
                }

		$valorkm = $cf->toDecimal($valorkm);
		
		
		$placa = strtoupper(Form::GetFormValue('placa'));
		$chassis = strtoupper(Form::GetFormValue('chassis'));
		$renavam =  Form::GetFormValue('renavam');

		$temrenavam = $veiculo->GetByRenavam($renavam);
		$temchassis = $veiculo->GetByChassis($chassis);
		$ano = date('Y');


		if ( !preg_match("/^[A-Z]{3}[0-9]{4}/" ,$placa) )
		{
			$this->AddError('A placa informada está inválida.');
		}
		elseif ( $temrenavam->result != '' )
		{
			$this->AddError('Esse RENAVAM já está cadastrado.');
		}
		elseif ( $temchassis->result != '' )
		{
			$this->AddError('Esse Chassis já está cadastrado.');
		}				
		elseif ( Form::GetFormValue('tipoVeiculo') == '' )
		{
			$this->AddError('Você deve selecionar um tipo de veículo.');
		}
		elseif ( !preg_match("/^[0-9]{9}/" , Form::GetFormValue('renavam')) )
		{
			$this->AddError('Informe um RENAVAM válido.');
		}
		elseif ( !preg_match("/^[A-Z|0-9]{17}/" , $chassis) )
		{
			$this->AddError('Informe o Chassis corretamente.');
		}
		elseif( strlen(trim(Form::GetFormValue('marca'))) < 3 )
		{
			$this->AddError('Informe corretamente a marca.');
		}
		elseif( strlen(trim(Form::GetFormValue('modelo'))) < 3 )
		{
			$this->AddError('Informe corretamente o modelo.');
		}
		elseif( preg_match("/\D/", Form::GetFormValue('anoFab')) or  (strlen(Form::GetFormValue('anoFab')) !=4 ) or  (Form::GetFormValue('anoFab') < 1900) or (Form::GetFormValue('anoFab') > $ano))
		{
			$this->AddError('Informe um ano de fabricação válido.');
		}
		elseif( preg_match("/\D/", Form::GetFormValue('anoMod')) or  (strlen(Form::GetFormValue('anoMod')) !=4 ) or  (Form::GetFormValue('anoMod') < 1900) or (Form::GetFormValue('anoMod') > ($ano+1)))
		{
			$this->AddError('O campo ano modelo está inválido.');
		}
		elseif( Form::GetFormValue('capacidade') < 2)
		{
			$this->AddError('A capacidade do veículo informada é inválida.');
		}
		elseif( Form::GetFormValue('combustivel') == '')
		{
			$this->AddError('Você deve selecionar um tipo de combustível');
		}
		elseif( $valorkm == '' or $valorkm<=0)
		{
			$this->AddError('Você deve inserir um valor válido em custo por Km ');
		}
		elseif( Form::GetFormValue('idinstituicao') == '')
		{
			$this->AddError('Você deve selecionar uma Instituição');
		}
		else
		{
			$data = $this->GetData();
			
			$veiculo->SetData($data);
		
			if (substr_count($data->valorKm, ",") == 0) {
	                      $data->valorKm = str_replace(".",",",$data->valorKm);
        	        }else{
                	      $data->valorKm = str_replace(".","",$data->valorKm);
	                }

	
			$veiculo->idinstituicao = $data->idinstituicao;
			$veiculo->valorKm = $data->valorKm;
			
			$cf = new MCurrencyFormatter();
			$veiculo->placa = strtoupper($veiculo->placa);
			$veiculo->valorKm = $cf->toDecimal($veiculo->valorKm);
			
			
			
			try
			{
				$veiculo->save();
				$veiculo->Log(OP_INS,"Novo veículo criado");
				$go = $this->manager->GetActionURL('adm','main:veiculo',$veiculo->placa);
				$this->manager->Information('Veículo criado com sucesso.',$go);
			}
			catch (Exception $e)
			{
				$this->addError($e->getMessage());
			}
		}
	}

}
?>
