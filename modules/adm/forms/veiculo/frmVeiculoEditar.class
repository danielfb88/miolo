
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?
class frmVeiculoEditar extends MForm
{

    protected $objVeiculo;
	
    function __construct($objVeiculo)
    {
        $this->objVeiculo = $objVeiculo;
        parent::__construct('Dados do Veiculo');
        $this->EventHandler();
    }

    function CreateFields()
    {

        global $MIOLO;

        $veiculo = $this->objVeiculo;
        $tabelaGeral = $this->manager->getBusiness('common','tabelageral');
        $tipoVeiculos = $tabelaGeral->listByTabela('AD_TIPOVEICULO')->result;
        $tipoCombustiveis = $tabelaGeral->listByTabela('AD_TIPOCOMBUSTIVEL')->result;
        $instituicao = $MIOLO->GetBusiness('common','instituicao');
        $idinstituicao = $this->manager->GetBusiness('common','instituicao');
        $instituicao = $idinstituicao->listAll();  	 
        
	$fields = array	(
            new MTextField('placa',$veiculo->placa,'Placa','7','Máx. 7 caracteres'),
            new MSelection('tipoVeiculo',$veiculo->tipoVeiculo,'Tipo Veiculo',$tipoVeiculos),
            new MTextField('renavam',$veiculo->renavam,'Renavam','12','Máx. 12 caracteres'),
            new MTextField('chassis',$veiculo->chassis,'Chassis','20','Máx. 20 caracteres'),
            new MTextField('marca',$veiculo->marca,'Marca','15','Máx. 15 caracteres'),
            new MTextField('modelo',$veiculo->modelo,'Modelo','20','Máx. 20 caracteres'),
            new MTextField('anoFab',$veiculo->anoFab,'Ano Fabricação','4','Máx. 4 números'),
            new MTextField('anoMod',$veiculo->anoMod,'Ano Modelo','4','Máx. 4 números'),
            new MTextField('capacidade',$veiculo->capacidade,'Capacidade','3'),
            new MSelection('combustivel',$veiculo->combustivel,'Combustível',$tipoCombustiveis),
            new MCurrencyField('valorKm',$veiculo->valorKm,'Custo por Km','9','Máx. 9 números'),
            
//IFSP
           
            new MSelection('idinstituicao',$veiculo->idinstituicao,'Instituição',$instituicao->result),
        );

                $objinst = $MIOLO->GetBusiness('common','instituicao');
		$query = $objinst->ListRange(NULL, 'instituicao');
	
	

		while ( !$query->eof() )
  		{	if(($query->fields('mesmoif')=='S') or ($query->fields('mesmoif')=='s')){
			      $options[$query->fields('idinstituicao')] = $query->fields('instituicao');
			}
    			$query->moveNext();  
   		}
	        $this->SetFieldAttr('idinstituicao','options', $options);
        
//IFSP        
		
        $this->SetFields($fields);
        $this->placa->addAttribute('maxlength','7');
        $this->renavam->addAttribute('maxlength','12');
        $this->chassis->addAttribute('maxlength','20');
        $this->marca->addAttribute('maxlength','15');
        $this->modelo->addAttribute('maxlength','20');
        $this->anoFab->addAttribute('maxlength','4');
        $this->anoMod->addAttribute('maxlength','4');
        $this->capacidade->addAttribute('maxlength','10');
        $this->valorKm->addAttribute('maxlength','9');
	   
        $this->SetFieldAttr('placa','readonly',TRUE);
        $this->SetFieldAttr('placa','hint',FALSE);
		
        $buttons = array (
            new FormButton('btnSalvar', 'Salvar')
        );
        $this->SetButtons($buttons);
        $validators = array (
            new MRequiredValidator('placa'),
            new MRequiredValidator('renavam'),
            new MRequiredValidator('chassis'),
            new MRequiredValidator('marca'),
            new MRequiredValidator('modelo'),
            new MRequiredValidator('anoFab'),
            new MRequiredValidator('anoMod'),
            new MIntegerValidator('capacidade','','required'),
            new MRequiredValidator('valorKm'),
        );
        $objinst = $MIOLO->GetBusiness('common','instituicao');
	$query = $objinst->ListRange(NULL, 'instituicao');  
        while ( !$query->eof() )
  		{
   			 if(($query->fields('mesmoif')=='S') or ($query->fields('mesmoif')=='s')){
			      $options[$query->fields('idinstituicao')] = $query->fields('instituicao');
			 }
    			 $query->moveNext();  
   		}
	$this->SetFieldAttr('idinstituicao','options', $options);
	$this->SetValidators($validators);
    }

    public function btnSalvar_click()
    {
        $veiculo = $this->objVeiculo;
        
        $chassis = strtoupper(Form::GetFormValue('chassis'));
		$renavam =  Form::GetFormValue('renavam');

		$temrenavam = $veiculo->GetByRenavam($renavam);
		$temchassis = $veiculo->GetByChassis($chassis);
		
		$cf = new MCurrencyFormatter();
		
		$valorkm = Form::GetFormValue('valorKm');
		if (substr_count($valorkm, ",") == 0) {
                      $valorkm = str_replace(".",",",$valorkm);
                }else{
                      $valorkm = str_replace(".","",$valorkm);
                }
		$valorkm = $cf->toDecimal($valorkm);
		$ano = date('Y');
        
        if ( Form::GetFormValue('tipoVeiculo') == '' )
		{
			$this->AddError('Você deve selecionar um tipo de veículo.');
		}
		elseif ( !preg_match("/^[0-9]{9}/" , Form::GetFormValue('renavam')) )
		{
			$this->AddError('Informe um RENAVAM válido.');
		}
		elseif ( !preg_match("/^[A-Z|0-9]{17}/" , $chassis) )
		{
			$this->AddError('Informe o Chassis corretamente.');
		}
		elseif( strlen(trim(Form::GetFormValue('marca'))) < 3 )
		{
			$this->AddError('Informe corretamente a marca.');
		}
		elseif( strlen(trim(Form::GetFormValue('modelo'))) < 3 )
		{
			$this->AddError('Informe corretamente o modelo.');
		}
		elseif( preg_match("/\D/", Form::GetFormValue('anoFab')) or  (strlen(Form::GetFormValue('anoFab')) !=4 ) or  (Form::GetFormValue('anoFab')<1900) or (Form::GetFormValue('anoFab') > $ano))
		{
			$this->AddError('Informe um ano de fabricação válido.');
		}
		elseif( preg_match("/\D/", Form::GetFormValue('anoMod')) or  (strlen(Form::GetFormValue('anoMod')) !=4 ) or  (Form::GetFormValue('anoMod')<1900) or (Form::GetFormValue('anoMod') > ($ano+1)))
		{
			$this->AddError('O campo ano modelo está inválido.');
		}	
		elseif( Form::GetFormValue('capacidade') < 2)
		{
			$this->AddError('A capacidade do veículo informada é inválida.');
		}
		elseif( Form::GetFormValue('combustivel') == '')
		{
			$this->AddError('Você deve selecionar um tipo de combustível');
		}
		elseif( $valorkm == '' or $valorkm<=0)
		{
			$this->AddError('Você deve inserir um valor válido em custo por Km ');
		}
		elseif( Form::GetFormValue('idinstituicao') == '')
		{
			$this->AddError('Você deve selecionar uma Instituição');
		}
		else
		{
	    	$data = $this->GetData();
	    	$veiculo->SetData($data);
		if (substr_count($veiculo->valorKm, ",") == 0) {
                      $veiculo->valorKm = str_replace(".",",",$veiculo->valorKm);
                }else{
                      $veiculo->valorKm = str_replace(".","",$veiculo->valorKm);
                }


            $cf = new MCurrencyFormatter();
            $veiculo->valorKm = $cf->toDecimal($veiculo->valorKm);
            try
                {
                    $veiculo->renavan = strtoupper($veiculo->renavan); 
                    $veiculo->chassis = strtoupper($veiculo->chassis);
                    $veiculo->marca = strtoupper($veiculo->marca);
                    $veiculo->modelo = strtoupper($veiculo->modelo);
                    $veiculo->save();
                    $veiculo->Log(OP_UPD,"Dados de veículo modificados");
                    $go = $this->manager->GetActionURL('adm','main:veiculo',$veiculo->placa,array('form'=>'find'));
                    $this->manager->Information('Veículo alterado com sucesso.',$go);
                }
                catch (Exception $e)
                {
                    $this->addError($e->getMessage());
                }
    	}
    }
}
?>
