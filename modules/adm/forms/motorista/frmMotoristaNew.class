
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?
class frmMotoristaNew extends MForm
{
    function __construct()
    {
        parent::__construct('Incluir Novo Motorista');
        $this->EventHandler();
    }

    function CreateFields()
    {
        $tabelaGeral = $this->manager->getBusiness('common','tabelageral');
        $categorias = $tabelaGeral->listByTabela('AD_CATEGORIAHABILITACAO')->result;
        $fields = array (
            new MHiddenField('idPessoa'),
            new MLookupTextField('lkpPessoa','','Nome',50),
            new MTextField('carteiraHab','','Carteira de Habilitação','15','Máx. 15 caracteres'),
            new MSelection('categoria','','Categoria',$categorias),
            new MCalendarField('dataValidade','','Data de Validade'),
        );
        $this->SetFields($fields);
        $this->carteiraHab->addAttribute('maxlength',15);
        $this->SetFieldAttr('lkpPessoa','module','common');
        $this->SetFieldAttr('lkpPessoa','item','pessoa');
        $this->SetFieldAttr('lkpPessoa','event','filler');
        $this->SetFieldAttr('lkpPessoa','related','idPessoa, lkpPessoa');
	   
        $buttons = array (
            new FormButton('btnNew', 'Cadastrar Motorista')
        );
        $this->SetButtons($buttons);

        $validators = array (
            new MRequiredValidator('lkpPessoa'),
            new MRequiredValidator('carteiraHab'),
            //new MRequiredValidator('categoria'),
            new MDateDMYValidator('dataValidade')
        );
        $this->SetValidators($validators);
    }

    function btnNew_click()
    {
		$data = $this->GetData();
		$motorista = $this->manager->GetBusiness('adm','motorista');

		if( Form::GetFormValue('idPessoa') == '')
		{
			$this->AddError('Selecione uma pessoa.');
		}
		elseif($motorista->findByIdPessoa($data->idPessoa))
		{
			$this->addError('Esta pessoa já está cadastrada.');
		}
		elseif(!is_numeric($data->carteiraHab) or ($data->carteiraHab <= 0) or ( strlen(trim($data->carteiraHab)) < 4))
		{
			$this->AddError('Informe corretamente o número da carteira de motorista.');
		}
		elseif($data->categoria == '')
		{
			$this->AddError('Defina a categoria da carteira de habilitação.');
		}
		elseif($data->dataValidade == '')
		{
			$this->AddError('Defina a Data de Validade da carteira de habilitação.');
		}
		elseif($motorista->GetByCarteiraHab($data->carteiraHab)->result)
		{			
			$this->AddError('Esta Carteira de habilitação já foi cadastrada.');
		}				
		else
		{
			$motorista->ativo="S";
			$motorista->SetData($data);
			try
			{
				$motorista->save();
				$motorista->Log(OP_INS,"Novo motorista criado");
				$go = $this->manager->GetActionURL('adm','main:motorista',$motorista->idMotorista);
				$this->manager->Information('Novo motorista criado com sucesso',$go);
			}
			catch (Exception $e)
			{
				$this->addError($e->getMessage());
			}
		}
	}

}
?>
