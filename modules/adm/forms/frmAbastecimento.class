
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?
class frmAbastecimento extends Form
{
	protected $objRequisicao;
	protected $grid;
	
	function __construct($objRequisicao)
    {
        $this->objRequisicao = $objRequisicao;
        $this->Form("Cadastro de Abastecimento de veículo");
        $this->EventHandler();
        // Adiciona script para criação de máscaras.
        $this->page->AddJsCode(file_get_contents(dirname(__FILE__) . '/../ui/js/mask.js'));
    }
   
	function CreateFields()
	{
	       	global $MIOLO, $module, $perms, $auth, $page, $ui, $action, $theme, $item, $self ;

		$login = $MIOLO->GetLogin();
		$perm = $MIOLO->getPerms()->isMemberOf($login,'ADM_EXECUTORUO');
		if ($perms)
		{
			$form = Form::GetFormValue('form');
		
			$combustivel = array ("0"=>"GASOLINA",
								"1"=>"ÁLCOOL",
								"2"=>"DIESEL",
								"3"=>"GNV");
			$this->grid = $this->manager->GetUI()->GetGrid('adm','gridAbastecimento',$this->objRequisicao->idRequisicao);
	       		$this->grid->SetTitle('Abastecimentos');
			$fields = Array (
				new TextField('idRequisicao',$this->objRequisicao->idRequisicao,'Requisicao',4),
				new MTextField('posto','','Posto',30),
				new MTextField('enderecoPosto','','Endereço',50),
				new MTextField('cidadePosto','','Cidade',30),
				new MCalendarField('dataAbastecimento','','Data',10),
				new MTextField('horaAbastecimento','','Hora','5','00:00'),
				new MTextField('quantidade','','Litros'),
				new MCurrencyField('valorAbastecimento','','Valor'),
				new MSelection('combustivel','','Combustível',$combustivel),
				new MSeparator(''),
				$this->grid );
		
	    		$this->SetFields($fields);
	    
	         $this->dataAbastecimento->addAttribute('onKeyUp','makeMask(this, \'##/##/####\');');
	         $this->horaAbastecimento->addAttribute('onKeyUp','makeMask(this, \'##:##\');');
	         //$this->quantidade->addAttribute('onKeyUp','makeMask(this, \'###,##\');');
	   	   $this->posto->addAttribute('maxlength',50);
				$this->enderecoPosto->addAttribute('maxlength',50);
				$this->cidadePosto->addAttribute('maxlength',50);
				$this->valorAbastecimento->addAttribute('maxlength',10);
				$this->quantidade->addAttribute('maxlength',6);
				$this->horaAbastecimento->addAttribute('maxlength',5);
					    
				$validators = array(
				new RequiredValidator('posto'),
				new RequiredValidator('enderecoPosto'),
			  	new RequiredValidator('cidadePosto'),
			  	new RequiredValidator('dataAbastecimento'),
			  	new RequiredValidator('horaAbastecimento'),
			  	new RequiredValidator('quantidade'),
			  	new RequiredValidator('valorAbastecimento'),
	
			  	new MDATEDMYValidator('dataAbastecimento'),
			);	
		
		$this->SetValidators($validators);
	    
		 $this->SetFieldAttr('idRequisicao','readonly',true);

			$buttons = Array(
		            new FormButton('btnPost','Enviar'),
		            //new MButtonClose('btnFechar','Fechar')
			    new FormButton('btnPost2','Finalizar'),
			    new FormButton('btnEditar','Editar')
		        );
    
		        $this->SetButtons($buttons);
			$this->setButtonAttr('btnEditar','visible',false);
			if ($this->objRequisicao->abastecimento)
			{
				$this->setData();
				$this->setButtonAttr('btnPost','visible',false);
				$this->setButtonAttr('btnPost2','visible',false);

			}
		}
		else
		{
			$this->grid = $this->manager->GetUI()->GetGrid('adm','gridAbastecimento',$this->objRequisicao->idRequisicao);
	       		$this->grid->SetTitle('Abastecimentos');
			$fields = Array(
				new MSeparator(''),
				$this->grid
			);
	       		$this->SetFields($fields);
			$buttons = Array(
				new FormButton('btnPost2','Fechar')
			);
		        $this->SetButtons($buttons);
		}
	}
	function setData()
	{
		global $MIOLO;
		$objAbastecimento = $MIOLO->GetBusiness('adm','abastecimento');
		$objAb = $objAbastecimento->GetById($this->objRequisicao->abastecimento);
		$this->setFieldValue('posto',$objAb->posto);
		$this->setFieldValue('enderecoPosto',$objAb->enderecoPosto);
		$this->setFieldValue('cidadePosto',$objAb->cidadePosto);
		$hora = $objAb->dataHoraAbastecimento;
		$datahora = explode(' ',$hora);
		$hora = explode(':',$datahora[1]);
		$this->setFieldValue('dataAbastecimento',$datahora[0]);
		$this->setFieldValue('horaAbastecimento',$hora[0].':'.$hora[1]);
		$this->setFieldValue('quantidade',$objAb->quantidade);
		$this->setFieldValue('valorAbastecimento',$objAb->valorAbastecimento);
		$this->setFieldValue('combustivel',$objAb->combustivel);
		$this->setButtonAttr('btnEditar','visible',true);
		
	}
	function btnEditar_click()
	{
		global $MIOLO;
		$objAbastecimento = $MIOLO->GetBusiness('adm','abastecimento');
		$objAb = $objAbastecimento->GetById($this->objRequisicao->abastecimento);
		$data = $this->getData();
		$vAbastecimento = strlen(trim(Form::GetFormValue('valorAbastecido')));
		$cf = new MCurrencyFormatter();
        	$data->valorAbastecimento = $cf->toDecimal($data->valorAbastecimento);
		$dAbastecimento = strlen(trim(Form::GetFormValue('dataAbastecimento')));
		$hAbastecimento = strlen(trim(Form::GetFormValue('horaAbastecimento')));
        	$data->dataHoraAbastecimento =  $data->dataAbastecimento." ".$data->horaAbastecimento.":00";
		$objAb->setData($data);
		try
    		{
    			$objAb->save();
			$idRequisicao = ($this->objRequisicao->idRequisicao);
    			$go = $this->manager->GetActionURL('adm','main:abastecimento',$this->objRequisicao->idRequisicao);
                	$this->manager->Information('Abastecimento editado com sucesso.',$go);
		}
    		catch(Exception $e)
    		{
    			$this->addError($e->getMessage());
    		}   		
	}
	function btnPost_click()
	{
    		global $MIOLO, $module, $ui, $action;
	
		$data = $this->GetData();

		$data->posto = trim(Form::GetFormValue('posto'));
		$data->enderecoPosto = trim(Form::GetFormValue('enderecoPosto'));
		$data->cidadePosto = trim(Form::GetFormValue('cidadePosto'));
		$data->quantidade = trim(Form::GetFormValue('quantidade'));
		$posto = strlen(trim(Form::GetFormValue('posto')));
		$ePosto = strlen(trim(Form::GetFormValue('enderecoPosto')));
		$cPosto = strlen(trim(Form::GetFormValue('cidadePosto')));
		$dAbastecimento = strlen(trim(Form::GetFormValue('dataAbastecimento')));
		$hAbastecimento = strlen(trim(Form::GetFormValue('horaAbastecimento')));
		$quant = strlen(trim(Form::GetFormValue('quantidade')));
		$vAbastecimento = strlen(trim(Form::GetFormValue('valorAbastecido')));
		$cf = new MCurrencyFormatter();
      $vAbastecimento = $cf->toDecimal($data->valorAbastecimento);
		$combustivel = strlen(trim(Form::GetFormValue('combustivel')));	
		$hora = $data->horaAbastecimento;
		
		// Retirando os caracteres especiais. :-)
		$caracteres = array("#","*", "&", "%", "(", ")", "$", "@", "!", "'", "\"", "+", "=", "-", "/", ".", ",", "^", "?", ":", "}", "]", "[", "º","{","|",">","<",";");
		$data->posto = str_replace($caracteres,"", $data->posto);
		$data->enderecoPosto = str_replace($caracteres,"", $data->enderecoPosto);
		$data->cidadePosto = str_replace($caracteres,"", $data->cidadePosto);
		
		//$is_decimal = preg_match('/^\d+(\,\.\d+)?$/', $data->quantidade);
		
		if($posto == '0')		
		{
			$this->addError("Você precisa informar corretamente o campo Posto.",'');
		}
		elseif($ePosto == '0')
		{
			$this->addError("Você precisa informar corretamente o campo Endereço.",'');
		}
		elseif($cPosto == '0')
		{
			$this->addError("Você precisa informar corretamente o campo Cidade.",'');
		}
		elseif($dAbastecimento == '0')
		{
			$this->addError("Você precisa informar corretamente o campo Data Abastecimento.",'');			
		}
		elseif($hAbastecimento == '0')
		{
			$this->addError("Você precisa informar corretamente o campo Hora Abastecimento.",'');			
		}
		elseif($quant == '0')
		{
			$this->addError("Você precisa informar corretamente o campo Litros.",'');			
		}
		elseif($data->quantidade <= '0')
		{
			$this->addError("Você precisa informar corretamente o campo Litros.",'');			
		}
		else if ( strpos($data->quantidade,".") == false || strpos($data->quantidade,",") != false){
			$this->addError("Você precisa informar o campo Litros no formato: 000.00.",'');
		}
		/*else if ($is_decimal == 0) {
			$this->addError("Você precisa informar corretamente o campo Litros.",'');
		}*/
		else if($vAbastecimento <= '0')
		{
			$this->addError("Você precisa informar corretamente o campo Valor.",'');			
		}
		else if($combustivel == '0')
		{
			$this->addError("Você precisa selecionar o tipo de combustível.",'');			
		}
		else if ( ($hora == '') || (substr($hora,0,2) < 0) || (substr($hora,0,2) > 23) || (substr($hora,3,2) < 0) || (substr($hora,3,2) > 60))
		{
			$this->addError('Hora inválida!');
		} 
		else
		{
    			$objAbastecimento = $MIOLO->GetBusiness('adm','abastecimento');
	    		$cf = new MCurrencyFormatter();
	        	$data->valorAbastecimento = $cf->toDecimal($data->valorAbastecimento);
	        	$data->dataHoraAbastecimento =  $data->dataAbastecimento." ".$data->horaAbastecimento.":00";
	    		$objAbastecimento->setData($data);
	    		try
	    		{
	    			$objAbastecimento->save();
				$idRequisicao = ($this->objRequisicao->idRequisicao);
				$objAbastecimento->saveItemReqVeiculo($idRequisicao);
	    			$go = $this->manager->GetActionURL('adm','main:abastecimento',$this->objRequisicao->idRequisicao);
	                	$this->manager->Information('Registro efetuado com sucesso.',$go);
				}
	    		catch(Exception $e)
	    		{
	    			$this->addError($e->getMessage());
	    		}   		
		}
	}

	function btnPost2_click()
	{
		global $MIOLO;

		$this->addInfo("Por Favor feche esta janela para finalizar");	
		$this->setFieldAttr('idRequisicao','visible',false);
		$this->setFieldAttr('posto','visible',false);
		$this->setFieldAttr('enderecoPosto','visible',false);
		$this->setFieldAttr('cidadePosto','visible',false);
		$this->setFieldAttr('valorAbastecimento','visible',false);
		$this->setFieldAttr('dataAbastecimento','visible',false);
		$this->setFieldAttr('horaAbastecimento','visible',false);
		$this->setFieldAttr('quantidade','visible',false);
         	$this->setFieldAttr('combustivel','visible',false);
		$this->setButtonAttr('btnPost','visible',false);
		$this->setButtonAttr('btnPost2','visible',false);

	}
}
?>
