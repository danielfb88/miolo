<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class frmMaterialNew extends Form
{
    function __construct()
    {
        $this->Form('Incluir Novo Material');
        $this->EventHandler();
    }
    function CreateFields()
    {
        global $MIOLO;

        $opcoes1 = array(
                "S"=>"SIM",
                "N"=>"NÃO",
            );
            
        $opcoes2 = array(
                "C"=>"CONSUMO",
                "P"=>"PERMANENTE",
            );

        $fields = array(
			new MTextField('codmaterial','','CATMAT','14','Máx. 14 números'),
			new MMultiLineField('descresum','','Descricao Resumida','',3,60,'Máx. 200 caracteres'),
			new MMultiLineField('descricao','','Descricao','',5,60,'Máx. 800 caracteres'),
			new MTextField('unidade','KG','Unidade','10','Máx. 10 caracteres'),
			new MCurrencyField('precoestimado','','Preço Estimado',14),
			//	    new MTextField('precoestimado','','Preço Estimado','14','Separação decimal por ponto'),
			new MSelection('permcons','C','Tipo',$opcoes2),
			new MSelection('estocavel','N','Estocável',$opcoes1),
			new MTextField('idelemento','','Elemento','6','Máx. 6 números'),
			new MTextField('idsubelemento','','Subelemento','2','Máx. 2 números'),
			new MSelection('ativo','S','Ativo',$opcoes1)
        );
        $this->SetFields($fields);
	
	$this->codmaterial->addAttribute('maxlength',14);
	$this->descresum->addAttribute('maxlength',200);
	$this->descricao->addAttribute('maxlength',800);
	$this->unidade->addAttribute('maxlength',10);
	$this->idelemento->addAttribute('maxlength',6);
	$this->idsubelemento->addAttribute('maxlength',2);

        $validators = array(
                            new MRequiredValidator('codmaterial'),
                            new MRequiredValidator('idelemento'),
                            new MRequiredValidator('idsubelemento'),
                            );
        $this->SetValidators($validators);

        
        $buttons = array(
            new MButton('btnNew', 'Incluir Material')
        );
        $this->SetButtons($buttons);

    }

    function btnNew_click()
    {
        global $MIOLO, $page, $module;
       
		$data = $this->getData();
		
        if (substr_count($data->precoestimado, ",") == 0) {
              $data->precoestimado = str_replace(".",",",$data->precoestimado);
        }else{
              $data->precoestimado = str_replace(".","",$data->precoestimado);
        }
	
		$cf = new MCurrencyFormatter();
        $data->precoestimado = $cf->toDecimal($data->precoestimado);

		$material = $MIOLO->GetBusiness($module,'material');
        $material->SetData($data);
		
		if ($data->precoestimado <= 0)
		{
			$this->AddError('O material não pode ter valor igual ou menor que zero.');
		}
		elseif(!is_numeric($data->codmaterial))
		{
			$this->AddError('O campo CATMAT deve conter somente números.');
		}
		elseif(strlen(trim($data->descresum)) > 400)
		{
			$this->AddError('O campo Descrição Resumida deve conter no máximo 400 caracteres.');
		}
		elseif(strlen(trim($data->descricao)) > 800)
		{
			$this->AddError('O campo Descrição deve conter no máximo 800 caracteres.');
		}
		elseif(!strlen(trim($data->descricao)))
		{
			$this->AddError('O campo Descrição não pode ser vazio.');
		}
		elseif(!strlen(trim($data->unidade)))
		{
			$this->AddError('O campo Unidade não pode ser vazio.');
		}
		elseif(!is_numeric($data->idelemento))
		{
			$this->AddError('O campo Elemento deve conter somente números.');
		}
		elseif(!is_numeric($data->idsubelemento))
		{
			$this->AddError('O campo Subelemento deve conter somente números.');
		}
		elseif(!($material->findBySubID((int)$data->idelemento, (int)$data->idsubelemento)))
		{
			$this->AddError('Elemento não cadastrado.');
		}
		elseif($data->permcons == "")
		{
			$this->AddError('Selecione o tipo do material.');
		}
		elseif($data->estocavel == "")
		{
			$this->AddError('Selecione se é ou não estocável.');
		}
		elseif($data->ativo == "")
		{
			$this->AddError('Selecione se o material está ou não ativo.');
		}
		else
		{

        //Colocando ativo se não foi selecionado
        if ($data->ativo == "")
        {
           $data->ativo = "S";
        }

        foreach ($data as $chave=>$valor)
        {
            $array["$chave"] = $valor;
        }
        $array['conf'] = 'sim';
        $array['event'] = 'Insere';

        $action_sim = $this->manager->getActionURL('adm', 'material:new', '', $array);
		$action_nao = $this->manager->getActionURL('adm', 'material:new', '');
        
        //Verifica se há algum produto cadastrado com este codigo
        $query = $material->GetDescByCod($data->codmaterial);
        if ($query->result != NULL)
        {
            $msg = "Já existe produto cadastrado com o código ".$data->codmaterial.": <br> ";
            foreach ($query->result as $res)
            {
               $msg.="<br> Descrição: ".$res[0]."<br> Unidade: ".$res[1]."<br>";
            }
            $this->manager->question("$msg"."<br>Deseja cadastrar mesmo assim?",$action_sim, $action_nao);
        }
	else
	{
            try
            {
				$material->descricao = str_replace("\n"," ", $material->descricao); 
		        $material->descricao = str_replace("\r"," ", $material->descricao); 
               $material->save(); //grava no banco
   		       $this->manager->information("Material cadastrado com sucesso.",$this->manager->getActionUrl('adm','main:material:find') );
		
            }
            catch (Exception $e)
            {
               $this->AddError($e->GetMessage());
            }
         }
       }
    }

    function Insere()
    {
        $MIOLO = MIOLO::getInstance();
        global $module;
        $material = $MIOLO->GetBusiness($module,'material');

        $conf = $this->getFormValue('conf');
        $data->codmaterial = $this->getFormValue('codmaterial');
		$data->descresum = $this->getFormValue('descresum');
        $data->descricao = $this->getFormValue('descricao');        
        $data->unidade = $this->getFormValue('unidade');
        $data->permcons = $this->getFormValue('permcons');
        $data->estocavel = $this->getFormValue('estocavel');
        $data->idelemento = $this->getFormValue('idelemento');
        $data->idsubelemento = $this->getFormValue('idsubelemento');
        $data->ativo = $this->getFormValue('ativo');
        $material->SetData($data);
        
        try
        {
            $material->save(); //grava no banco
   		    $this->manager->information("Material cadastrado com sucesso.",$this->manager->getActionUrl('adm','main:material:find') );
        }
        catch (Exception $e)
        {
                  $this->AddError($e->GetMessage());
        }
    }
 }
?>
