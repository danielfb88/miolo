
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?
class frmAlteracaoLiquidacaoPagamento extends Form
{
    function __construct()
    {
		global $MIOLO, $module, $action;

        $this->Form('Alteração Liquidação/Pagamento');
		$this->SetClose($MIOLO->GetActionURL($module,'main:financeiro'));
		$this->page->SetAction($MIOLO->GetActionURL($module,$action));
		$this->EventHandler();
		$this->defaultButton = false;
		// Adiciona script para criação de máscaras.
        $this->page->AddJsCode(file_get_contents(dirname(__FILE__) . '/../../ui/js/mask.js'));
    }

	function CreateFields()
	{
		global $MIOLO, $module, $action, $item, $theme;

		$empenho = $MIOLO->GetBusiness($module, 'empenho');
		$columns = array(
			new MDataGridColumn('numero','Número','center',false, '15%'),
			new MDataGridColumn('fornecedor','Fornecedor','left', true, '85%'),
		);

		$fields = array(
                new MLookupTextField('empenho','','Empenho',20),
			//	new MTextField('notaFiscal', '', 'Nota Fiscal', 20),
		);
		$this->SetFields($fields);
		
		$this->SetFieldAttr('empenho','module',$module);
		$this->SetFieldAttr('empenho','item','Empenho');
		$this->SetFieldAttr('empenho','event','filler');
		$this->SetFieldAttr('empenho','related', '"",empenho');
		
		$buttons = array(
			new FormButton('btnEmpenhos', 'Buscar'),
			new FormButton('btnLiquidacaoPagamento', 'Liquidação/Pagamento'),
			new FormButton('btnVoltar', 'Voltar', $MIOLO->GetActionURL($module, $action) ),
		);
		$this->SetButtons($buttons);
	    $this->SetButtonAttr('btnLiquidacaoPagamento', 'visible', false);
		$this->SetButtonAttr('btnVoltar', 'visible', false);
	}

	function btnEmpenhos_click()
	{
		global $MIOLO, $module, $action, $item, $theme;

		$notaFiscal = $this->GetFormValue('notaFiscal');
		$numero = $this->GetFormValue('empenho');
		if($numero == null)
		{
			$numero = $this->GetFormValue('empenho2');
		}

		if( ($fornecedor == null) and ($numero == null) ) //não foi definido critério para o filtro
		{
		}
		else
		{
			if($numero != null) //foi definido um empenho específico
			{
				$empenho = $MIOLO->GetBusiness($module, 'empenho');
				$dados = $empenho->ListByNumero($numero);
				$idFornecedor = $dados->result[0][5];
				$fornecedor = $dados->result[0][10];
			}
			else
			{
				if($idFornecedor == null) //nao foi usado o lookup
				{
					$objFornecedor = $MIOLO->GetBusiness($module, 'fornecedor');
					$dados = $objFornecedor->GetByDocumentoOuNome($fornecedor);
					$idFornecedor = $dados[0];
					$fornecedor = $dados[1];
				}
			}
		}

		$item_aux = $item;

		$fields = array(
			new HiddenField('idFornecedor', $idFornecedor),
			new HiddenField('fornecedor', $fornecedor),
		);

		$empenho = $MIOLO->GetBusiness($module, 'empenho', $item[1]);
		$empenho->getEmpenhado();

		if($numero == null) //não foi definido um empenho específico
		{
			$query2 = $empenho->ListDetalhesEmpenhoLiquidacao($idFornecedor);
		}
		else //foi definido um empenho específico
		{
			$query2 = $empenho->ListDetalhesEmpenhoLiquidadoByNumero($numero);
		}

		$nota = $MIOLO->GetBusiness($module, 'notafiscal');
		$i = 0;
		if($query2)
		{
			foreach($query2 as $r)
			{
				$query2[$i][3] = $empenho->numProcessoFormatado($query2[$i][3]); //processo
				$query2[$i][7] = number_format(str_replace(',','.',$r[7]),2,',','.'); //vl emp
				$query2[$i][8] = number_format(str_replace(',','.',$r[8]),2,',','.'); //vl nf
				$query2[$i][9] = number_format(str_replace(',','.',$r[9]),2,',','.'); //saldo
				$i++;
			}
		}

		$columns2 = array(
			new MGridColumn('idEmpenho','center',true, '0%',false),
			new MGridColumn('Empenho','center',true, '13%',true, null),
			new MGridColumn('Tipo','center',true, '12%',true, null),
			new MGridColumn('Proc Pgto','center',true, '15%',true, null),
			new MGridColumn('idNotaFiscal','center',true, '0%',false),
			new MGridColumn('Nota Fiscal','center',true, '15%',true, null),
			new MGridColumn('Data Nota Fiscal','center',true, '15%',true, null),
			new MGridColumn('Valor Empenho','center',true, '16%',true, null),
			new MGridColumn('Valor NF','center',true, '16%',true, null),
//			new GridColumn('Saldo','center',true, '12%',true, null),
		);

		$grid2 = new Grid($query2, $columns2, $href_datagrid, 0, 0, 'grid2');
		$grid2->SetTitle('Fornecedor: ' . $fornecedor);
		$grid2->SetLinkType('linkbutton');
		$grid2->SetWidth('99%');
        $grid2->AddActionSelect();
	//	$grid2->SetRowMethod('frmLiquidacao', 'MyRowMethod');

		$fields[] = $grid2;
		$this->SetFields($fields);
        $this->SetButtonAttr('btnLiquidacaoPagamento', 'visible', true);
		$this->SetButtonAttr('btnVoltar', 'visible', true);
		$this->SetButtonAttr('btnEmpenhos', 'visible', false);
		$this->AddField(new HiddenField('item_aux',$item_aux));
	}

	function btnLiquidacaoPagamento_click()
	{
		global $MIOLO, $module, $action, $item;

		$cf = new MCurrencyFormatter();
		$item_aux = $this->GetFormValue('item_aux');
		$this->SetTitle('Liquidação');
		$select = $this->GetFormValue('selectgrid2');

        //testa de foi selecionado algum empenho
		if($select == null)
		{
			$MIOLO->Error('Por favor, selecione os empenhos', $MIOLO->GetActionURL($module, $action) );
			return;
		}
		else
		{
           $count = 0;
           foreach ($select as $notaSelecionada) //conta qtas notas foram selecionadas
		   {
               $count++;
		   }
		   if ($count > 1)
		   {
             $MIOLO->Error('Por favor, selecione somente uma nota', $MIOLO->GetActionURL($module, $action) );
			 return;
	       }
		}

		//primeira nota selecionada
		$selected = reset($select);
		$selected = explode('-', $selected);

		//monta conjunto com notas e testa se foram selecionados apenas empenhos de mesmo numPro
		$empenho = $MIOLO->GetBusiness($module, 'empenho', $selected[0]);
		$id = explode('-',$selected[0]);

        $idNotaFiscal = $selected[1];
        $idEmpenho = $id[0];

		$numPro = $empenho->GetProcessoPagamento($id[0]);
		$numPro = $empenho->numProcessoFormatado($numPro);
		$notas = '(';
		foreach($select as $sel)
		{
			$s = explode('-',$sel);
			$id = $empenho->GetProcessoPagamento($s[0]);
			$id = $empenho->numProcessoFormatado($id);
			if($id != $numPro)
			{
				$MIOLO->Error('Empenhos selecionados possuem Processos de Pagamento diferentes.', $MIOLO->GetActionURL($module, $action) );
				return;
			}
			if($s[1] != null)
			{
				$notas .= $s[1] . ",";
			}
		}
		$notas = substr($notas, 0, -1) . ')';

		$nota = $MIOLO->GetBusiness($module, 'notafiscal');
		$query = $nota->GetNotasParaLiquidar($notas);
		//totalização
		$valorTotal = 0;
		for($i = 0; $i < count($query->result); $i++)
		{
			$valor = str_replace(',','.',$query->result[$i][4]);
			$valorTotal += $valor;
			$query->result[$i][4] = number_format(str_replace(',','.',$query->result[$i][4]),2,',','.');//val
		}
		$valorTotal = number_format(str_replace(',','.',$valorTotal),2,',','.');
		$query->result[][0] = ' ';
		$query->result[count($query->result)-1][1] = ' ';
		$query->result[count($query->result)-1][2] = ' ';
		$query->result[count($query->result)-1][3] = '<b>Valor A Liquidar</b>';
		$query->result[count($query->result)-1][4] = $valorTotal;

		//busca dados sobre o empenho
		$valorEmpenho = $empenho->valor;
		$empenho->getFornecedor();
		$fornecedor = $empenho->fornecedor->instituicao->nome;
		$valorEmpenho = 'R$ ' . number_format(str_replace(',','.',$valorEmpenho),2,',','.');

		$notaFiscal = $MIOLO->GetBusiness('adm','notafiscal');
		$notasEmpenho = $notaFiscal->GetNotasByIdEmpenho($empenho->idEmpenho);
		$valorNotas = 0.0;
		if($notasEmpenho->result)
		{
			foreach($notasEmpenho->result as $n)
			{
				$valorNotas = $cf->toDecimal($valorNotas) + $cf->toDecimal($n[3]);
			}
		}
		$saldoEmpenho = $cf->toDecimal($valorEmpenho) - $cf->toDecimal($valorNotas);
		$saldoEmpenho = 'R$ ' . number_format(str_replace(',','.',$saldoEmpenho),2,',','.');

		$columns = array(
			new DataGridColumn('numero','Empenho','center',true, '25%',true, null),
			new DataGridColumn('notaFiscal','Nota Fiscal','center',true, '25%',true, null),
			new DataGridColumn('dataNotaFiscal','Data','center',true, '25%',true, null),
			new DataGridColumn('valor','Valor R$','center',true, '25%',true, null),
		);

		$gridNota = new DataGrid2($query, $columns, '', 0);
		$gridNota->SetTitle('Notas Fiscais');
		$gridNota->SetLinkType('linkbutton');
		$gridNota->SetWidth('70%');

		$procPagamento = $empenho->numProcessoFormatado();
		$empenho->getEmpenhado();
		$licitacao = $MIOLO->GetBusiness($module, 'licitacao', $empenho->empenhado[0]->idLicitacao);
		$procLicitacao = $licitacao->numProcessoFormatado();

        $liquidacao = $MIOLO->GetBusiness($module, 'liquidacao');
        $objNotaFiscal = $nota->GetById($idNotaFiscal);

        $idLiquidacao = $objNotaFiscal->idLiquidacao;
        $objLiquidacao = $liquidacao->getById($idLiquidacao);

        $pagamento = $MIOLO->GetBusiness($module, 'ordembancaria');
        $idPagamento = $pagamento->GetByIdLiquidacao($idLiquidacao);
        $idOrdemBancaria = $idPagamento[2];

        $objPagamento = $pagamento->getById($idOrdemBancaria);

		$fields = array(
			new MTextField('fornecedor',$fornecedor, 'Fornecedor',90),
			new MTextField('processo',$procPagamento,'Processo Pagamento',15),
			new MTextField('procLic',$procLicitacao,'Processo Licitação',15),
			new MSpacer(1),
			new MTextField('valorEmpenho',$valorEmpenho, 'Valor Empenho',20),
			new MTextField('saldoEmpenho',$saldoEmpenho, 'Saldo Empenho',20),
			new MSpacer(1),
			$gridNota,
			new MSeparator('Liquidacao'),
			new MTextField('valorIRRF',$objLiquidacao->valorIRRF,'Valor IN/SRF',15),
			new MTextField('valorINSS',$objLiquidacao->valorINSS,'Valor INSS',15),
			new MTextField('valorISS',$objLiquidacao->valorISS,'Valor ISS',15),
			new MCalendarField('dataLiquidacao',$objLiquidacao->dataLiquidacao,'Data Liquidação',20),
			new MMultiLineField('obs',$objLiquidacao->obs,'Observação','',3,60),

			new MSeparator('Pagamento'),
			new MTextField('ordemBancaria',$objPagamento->numeroOrdemBancaria,'Ordem Bancária',15),
			new MTextField('DARF',$objPagamento->DARF,'DARF',15),
			new MCalendarField('dataOB',$objPagamento->dataOrdemBancaria,'Data',15),
			new MTextField('GPS',$objPagamento->GPS,'GPS',15),
			new MCalendarField('dataGPS',$objPagamento->dataGPS,'Data GPS',15),
			new MTextField('valor',$objPagamento->valor,'Valor',10),
			new MHiddenField('idLiquidacao',$idLiquidacao),
			new MHiddenField('idOrdemBancaria',$idOrdemBancaria),
            new MHiddenField('idEmpenho',$idEmpenho),
            new MHiddenField('idNotaFiscal',$idNotaFiscal)

		);

		$this->SetFields($fields);
		$this->SetFieldAttr('fornecedor','readonly',true);
		$this->SetFieldAttr('empenho','readonly',true);
		$this->SetFieldAttr('procLic','readonly',true);
		$this->SetFieldAttr('valorEmpenho','readonly',true);
		$this->SetFieldAttr('saldoEmpenho','readonly',true);
		$buttons = array(
			new FormButton('btnLiquidacaoPagamentoConfirmar','Confirmar Alteracoes'),
			new FormButton('btnExcluirLiquidacaoPagamento','Excluir Liquidacao/Pagamento')
		);
		$this->SetButtons($buttons);
		$this->SetButtonAttr('btnEmpenhos', 'visible', false);
		$this->SetButtonAttr('btnVoltar', 'visible', true);
		$this->AddField(new HiddenField('item_aux',$item_aux));
		$this->AddField(new HiddenField('notas',substr($notas, 1, -1)));
		$this->AddField(new HiddenField('idFornecedor', $idFornecedor));
		
		$this->dataLiquidacao->addAttribute('onKeyUp','makeMask(this, \'##/##/####\');');
		$this->dataOB->addAttribute('onKeyUp','makeMask(this, \'##/##/####\');');
		$this->dataGPS->addAttribute('onKeyUp','makeMask(this, \'##/##/####\');');
		$this->valorIRRF->addAttribute('onKeyUp','makeMask(this, \'#####\');');

		$this->valorIRRF->AddAttribute('maxlength',14);
		$this->valorINSS->AddAttribute('maxlength',14);	
		$this->valorISS->AddAttribute('maxlength',14);	
		$this->dataLiquidacao->AddAttribute('maxlength',14);	
		$this->DARF->AddAttribute('maxlength',14);	
		$this->dataOB->AddAttribute('maxlength',14);
		$this->dataGPS->AddAttribute('maxlength',14);
		$this->GPS->AddAttribute('maxlength',14);
		$this->valor->AddAttribute('maxlength',10);
		$this->obs->AddAttribute('maxlength',200);
		    
		$validators = array(
			new RequiredValidator('valorIRRF'),
			new RequiredValidator('valorINSS'),
		  	new RequiredValidator('valorISS'),
		  	new RequiredValidator('ordemBancaria'),
		  	new RequiredValidator('DARF'),
		  	new RequiredValidator('GPS'),
		  	new RequiredValidator('valor'),
		  	new RequiredValidator('dataLiquidacao'),
		  	new RequiredValidator('dataOB'),
		  	new RequiredValidator('dataGPS'),
	
		  	new MDATEDMYValidator('dataOB'),
		  	new MDATEDMYValidator('dataGPS'),
		  	new MDATEDMYValidator('dataLiquidacao'),
		);	
		
		$this->SetValidators($validators);
    }

	function btnLiquidacaoPagamentoConfirmar_click()
	{
		global $MIOLO, $module, $action;
        $data = $this->getData();

		$item = $this->GetFormValue('item_aux');
		$notas = $this->GetFormValue('notas');

		$objEmpenho = $MIOLO->GetBusiness($module, 'empenho');

		$idFornecedor = $this->GetFormValue('idFornecedor');
		$valorIRRF = $this->GetFormValue('valorIRRF');
		$valorINSS = $this->GetFormValue('valorINSS');
		$valorISS = $this->GetFormValue('valorISS');
		$dataLiquidacao = $this->GetFormValue('dataLiquidacao');
		$obs = $this->GetFormValue('obs');
		$processo = $this->GetFormValue('processo');

		$idOrdemBancaria = $this->GetFormValue('idOrdemBancaria');
		$idLiquidacao = $this->GetFormValue('idLiquidacao');
		$numeroOrdemBancaria = $this->GetFormValue('ordemBancaria');
		$DARF = $this->GetFormValue('DARF');
		$dataOrdemBancaria = $this->GetFormValue('dataOB');
		$GPS = $this->GetFormValue('GPS');
		$dataGPS = $this->GetFormValue('dataGPS');
		$valorOB = $this->GetFormValue('valor');

		try
		{
			if($processo)
			{
				$objProcesso = $MIOLO->GetBusiness('protocolo', 'processo');
				$objProcesso->getByNumeroFormatado($processo);
				$arrayNotas = explode(',', $notas);
				$objNota = $MIOLO->GetBusiness('adm', 'notafiscal');
				foreach($arrayNotas as $nota)
				{
					$objNota->GetById($nota);
					$objNota->retrieveAssociation('itens');
					foreach($objNota->itens as $i)
					{
						$i->retrieveAssociation('empenhado');
						$idEmpenho = $i->empenhado->idEmpenho;
						$objEmpenho->GetById($idEmpenho);
						$objEmpenho->numPro = $objProcesso->numProcesso;
						$objEmpenho->save();
					}
				}
			}
			
            $objEmpenho->alteraLiquidacaoPagamento($idLiquidacao,$idOrdemBancaria, $notas, $valorIRRF, $valorINSS, $valorISS, $dataLiquidacao, $obs, $numeroOrdemBancaria, $dataOrdemBancaria, $valorOB, $descontos, $DARF, $GPS, $dataGPS);

   			$action_ok = $MIOLO->GetActionURL($module, $action);

 			$MIOLO->Information("Liquidação/Pagamento alterados com sucesso<BR><BR><BR>&nbsp;");
		}
		catch (Exception $e)
			{
				$this->addError($e->getMessage());
			}

	}

    function btnExcluirLiquidacaoPagamento_click()
	{
    	global $MIOLO, $module, $action;
        $data = $this->getData();

       	$objEmpenho = $MIOLO->GetBusiness($module, 'empenho');

		$valorIRRF = $this->GetFormValue('valorIRRF');
		$valorINSS = $this->GetFormValue('valorINSS');
		$valorISS = $this->GetFormValue('valorISS');
		$dataLiquidacao = $this->GetFormValue('dataLiquidacao');
		$obs = $this->GetFormValue('obs');
		$processo = $this->GetFormValue('processo');

		$idOrdemBancaria = $this->GetFormValue('idOrdemBancaria');
		$idLiquidacao = $this->GetFormValue('idLiquidacao');
		$numeroOrdemBancaria = $this->GetFormValue('ordemBancaria');
		$DARF = $this->GetFormValue('DARF');
		$dataOrdemBancaria = $this->GetFormValue('dataOB');
		$GPS = $this->GetFormValue('GPS');
		$dataGPS = $this->GetFormValue('dataGPS');
		$valorOB = $this->GetFormValue('valor');
        $idEmpenho = $this->GetFormValue('idEmpenho');
        $idNotaFiscal = $this->GetFormValue('idNotaFiscal');


        $objEmpenho->excluiLiquidacaoPagamento($idLiquidacao,$idOrdemBancaria,$idEmpenho,$idNotaFiscal);

        $objEmpenho->Log(OP_UPD,"Liquidacao Excluida: ".$idLiquidacao.
                //", ValorIRRF: ".$valorIRRF.
                //", ValorINSS: ".$valorINSS.
               // ", ValorISS: ".$valorISS.
                //", DataLiq: ".$dataLiquidacao.
                //", Observacao: ".$objLiquidacao->obs.
                ", Pagamento Excluido: ".$idOrdemBancaria.
                ", OrdemBanc: ".$numeroOrdemBancaria.
                ", DataOrdemBanc: ".$dataOrdemBancaria.
                ", DARF: ".$DARF.
                ", GPS: ".$GPS.
                //", DataGPS: ".$dataGPS.
                ", Valor: ".$valor
         );

        $MIOLO->Information("Liquidação/Pagamento excluído(s) com sucesso<BR><BR><BR>&nbsp;");
	}

}
