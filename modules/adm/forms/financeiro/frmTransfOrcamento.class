
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?
class frmTransfOrcamento extends Form
{
    function __construct()
    {
		global $MIOLO, $module, $action;
		
        $this->Form('Transferência de Orçamento');
		$this->SetClose($MIOLO->GetActionURL($module,'main:financeiro'));
		$this->page->SetAction($MIOLO->GetActionURL($module,$action));
		$this->EventHandler();
		$this->defaultButton = false;
    }

	function CreateFields()
	{
		global $MIOLO, $module, $action;

		$fields = array(
			new MSeparator('Orçamento original:'),
			array(
				new MTextField('ano1', date("Y"), 'Ano', 5),
				new MTextField('esfera1', '', 'Esfera', 5),
				//new MTextField('idptr1', '', 'PTR', 10),
				//new MTextField('idfonte1', '', 'Fonte', 13),
				new LookupTextField('idptr1','','PTR',10),
                new LookupTextField('idfonte1','','Fonte',13),
				new MLookupTextField('idrubrica1', '', 'Rubrica', 10),
//				new MTextField('saldo1', '', 'Saldo', 13),
				new HiddenField('idOrcamento1'),
			),
			new MSpacer(1),
			new MSeparator('Orçamento de destino:'),
			array(
				new MTextField('ano2', date("Y"), 'Ano', 5),
				new MTextField('esfera2', '', 'Esfera', 5),
				//new MTextField('idptr2', '', 'PTR', 10),
				//new MTextField('idfonte2', '', 'Fonte', 13),
				new LookupTextField('idptr2','','PTR',10),
                new LookupTextField('idfonte2','','Fonte',13),
				new MLookupTextField('idrubrica2', '', 'Rubrica', 10),
//				new MTextField('saldo2', '', 'Saldo', 13),
				new HiddenField('idOrcamento2'),
			),
			new MSpacer(2),
			new MSeparator('Valor a ser transferido:'),
			new MCurrencyField('valor', '', 'Valor', 10)
		);
		$this->SetFields($fields);
		$this->valor->AddAttribute('maxlength',12);

		$this->SetFieldAttr('idrubrica1','module',$module);
		$this->SetFieldAttr('idrubrica1','item','Orcamento');
		$this->SetFieldAttr('idrubrica1','event','filler');
		$this->SetFieldAttr('idrubrica1','related', "idOrcamento1,ano1,idptr1,idfonte1,idrubrica1,,esfera1");
		$this->SetFieldAttr('idrubrica1','filter','ano1_ro,idptr1,idfonte1,idrubrica1,esfera1');
		$this->SetFieldAttr('ano1','readonly',true);
		$this->SetFieldAttr('idptr1','module',$module);
        $this->SetFieldAttr('idptr1','item','Ptr');
        $this->SetFieldAttr('idptr1','event','filler');
        $this->SetFieldAttr('idptr1','related','idptr1');
        $this->SetFieldAttr('idfonte1','module',$module);
        $this->SetFieldAttr('idfonte1','item','Fonte');
        $this->SetFieldAttr('idfonte1','event','filler');
        $this->SetFieldAttr('idfonte1','related','idfonte1');
        $this->idptr1->addAttribute('readonly',true);
        $this->idfonte1->addAttribute('readonly',true);
        $this->idrubrica1->addAttribute('readonly',true);
        $this->esfera1->addAttribute('maxlength',1);

		$this->SetFieldAttr('idrubrica2','module',$module);
		$this->SetFieldAttr('idrubrica2','item','Orcamento');
		$this->SetFieldAttr('idrubrica2','event','filler');
		$this->SetFieldAttr('idrubrica2','related', "idOrcamento2,ano2,idptr2,idfonte2,idrubrica2,,esfera2");
		$this->SetFieldAttr('idrubrica2','filter','ano2_ro,idptr2,idfonte2,idrubrica2,esfera2');
		$this->SetFieldAttr('ano2','readonly',true);
		$this->SetFieldAttr('idptr2','module',$module);
        $this->SetFieldAttr('idptr2','item','Ptr');
        $this->SetFieldAttr('idptr2','event','filler');
        $this->SetFieldAttr('idptr2','related','idptr2');
        $this->SetFieldAttr('idfonte2','module',$module);
        $this->SetFieldAttr('idfonte2','item','Fonte');
        $this->SetFieldAttr('idfonte2','event','filler');
        $this->SetFieldAttr('idfonte2','related','idfonte2');
        $this->idptr2->addAttribute('readonly',true);
        $this->idfonte2->addAttribute('readonly',true);
        $this->idrubrica2->addAttribute('readonly',true);
        $this->esfera2->addAttribute('maxlength',1);

		$buttons = array(
			new FormButton('btnTransferir', 'Transferir'),
		);
		$this->SetButtons($buttons);
	}
		
	function btnTransferir_click()
	{
		global $MIOLO, $module, $action;

		$data = $this->GetData();
		$orcamento = $MIOLO->GetBusiness($module, 'orcamento');	
		$valor = $data->valor;
		if ( ($valor != NULL) ) {
			if (substr_count($data->valor, ",") == 0)
         {
              $data->valor = str_replace(".",",",$data->valor);
         }
         else {
              $data->valor = str_replace(".","",$data->valor);
         }
      }
      $cf = new MCurrencyFormatter();	
      $data->valor = $cf->toDecimal($data->valor);
      $valor = $data->valor;
      
      if ($valor < 0) {
			$this->AddError("O valor do Orçamento não pode ser negativo.");
		}else if ( ($valor == NULL) || ($valor == 0) ) {
			$this->AddError("Forneça um valor válido.");
		}else if ( ($data->esfera1 == NULL) || ($data->idptr1 == NULL) || ($data->idfonte1 == NULL) ){
			$this->AddError("Complete os campos para o orçamento original");
		}else if ( ($data->idptr2 == NULL) || ($data->idfonte2 == NULL) ){
			$this->AddError("Complete os campos para o orçamento destino");
		}else if ($data->esfera1 == $data->esfera2 && $data->idptr1 == $data->idptr2 && $data->idfonte1 == $data->idfonte2 && $data->idrubrica1 == $data->idrubrica2){
			$this->AddError("Não é possivel realizar uma tranferência entre orçamentos de mesma origem e destino.");
		}else{
		
		
		if(!$data->idOrcamento1) {
			$idOrcamento1 = $orcamento->GetByClassOrcamentaria($data->ano1, $data->idptr1, $data->idfonte1, $data->idrubrica1, $data->esfera1);
			if(!$idOrcamento1->result)
			{
				$MIOLO->Error('Orçamento original não encontrado.', $MIOLO->GetActionURL($module,$action));
				return;
			}
			$data->idOrcamento1 = $idOrcamento1->result[0][0];
		}
		$tipoTransf = '2';//SUPLEMENTACAO
		if(!$data->idOrcamento2)
		{
			$idOrcamento2 = $orcamento->GetByClassOrcamentaria($data->ano2, $data->idptr2, $data->idfonte2, $data->idrubrica2, $data->esfera2);
			$data->idOrcamento2 = $idOrcamento2->result[0][0];
			if(!$idOrcamento2->result)//cria orçamento destino
			{
				$orcamento->dotacao = ":0";
				$orcamento->suplementacao = ":0";
				$orcamento->bloqueio = ":0";
				$orcamento->anulacao = ":0";
				$orcamento->pago = ":0";
				$orcamento->ano = $data->ano2;
				$orcamento->idPtr = $data->idptr2;
				$orcamento->idFonte = $data->idfonte2;
				$orcamento->idRubrica = $data->idrubrica2;
				$orcamento->esfera = $data->esfera2;
				try
				{
					$orcamento->save();
					$orcamento->Log(OP_INS,"Novo orcamento criado: ".$orcamento->idOrcamento);
				}
				catch (Exception $e)
				{
					$this->addError($e->getMessage());
				}
				$tipoTransf = '1';//DOTACAO
				$data->idOrcamento2 = $orcamento->idOrcamento;
			}
		}
		$saldo1 = $cf->toDecimal($orcamento->GetSaldo($data->idOrcamento1));
		if($data->valor > $saldo1)
		{
			$MIOLO->Error('Orçamento original não possui saldo suficiente.', $MIOLO->GetActionURL($module,$action));
			return;
		}

		$orcamentoHist1 = $MIOLO->GetBusiness($module, 'orcamentohist');
		$orcamentoHist1->idOrcamento = $data->idOrcamento1;
		$orcamentoHist1->data = $orcamentoHist1->_db->CharToTimestamp(date('d/m/Y H:i:s'));
		$orcamentoHist1->tipoOrc = '5'; //ESTORNO DOTACAO
		$orcamentoHist1->valor = $data->valor;
		$orcamentoHist2 = $MIOLO->GetBusiness($module, 'orcamentohist');
		$orcamentoHist2->idOrcamento = $data->idOrcamento2;
		$orcamentoHist2->data = $orcamentoHist1->_db->CharToTimestamp(date('d/m/Y H:i:s'));
		$orcamentoHist2->tipoOrc = $tipoTransf; //DOTACAO ou SUPLEMENTACAO
		$orcamentoHist2->valor = $data->valor;
		try
		{
			$orcamentoHist1->beginTransaction();
			$orcamentoHist1->save();
			$orcamentoHist2->setTransaction($orcamentoHist1->getTransaction());
			$orcamentoHist2->save();
			$orcamentoHist2->endTransaction();
		
			
			$orc = $MIOLO->GetBusiness($module, 'orcamento');
			//
			$IdOrc1 = $data->idOrcamento1;
			$IdOrc2 = $data->idOrcamento2;
			$ValOrc1 = $orcamento->GetDotacao($IdOrc1);
			$ValOrc2 = $orcamento->GetDotacao($IdOrc2);
			$Quant = $data->valor;
			$orc->TransfereOrc($IdOrc1,$IdOrc2,$ValOrc1,$ValOrc2,$Quant);
		//
		
			$orcamento->Log(OP_INS,"Transferencia de orcamento: " . $data->idOrcamento1 . ' a ' . $data->idOrcamento2 . ' R$ ' . $data->valor);
			$MIOLO->Information('Transferência feita com sucesso.', $MIOLO->GetActionURL($module,$action));
		}
		catch (Exception $e)
		{
			$this->addError($e->getMessage());
		}
		}
	}
}
?>
