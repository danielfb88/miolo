
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?
class frmUoDados extends Form
{

	protected $objUo;
	
    function __construct($objUo)
    {
		$this->objUo = $objUo;
        $this->Form('Dados da Unidade Orçamentária');
        $this->EventHandler();
    }

    function CreateFields()
    {
       global $MIOLO;
       
       $tabelaGeral = $this->manager->getBusiness('common','tabelageral');
	   $query = $tabelaGeral->listByTabela('AD_TIPOUO');
	   
	   $opcoes = array('N'=>'Não','S'=>'Sim');
       
		$fields = array(
            new MTextField('sigla','','Sigla','30','Máx. 30 caracteres'),
            new MTextField('nome','','Nome','50','Máx. 50 caracteres'),
			new MSelection('tipo','','Tipo',$query->result),
			new MTextField('documentoRef','','Documento'),
		//	new MLookupTextField('lkpUsuario','','Usuário Gestor',50),
			new MLookupTextField('lkpSetor','','Setor',50),
		//	new MHiddenField('idUsuarioGestor','','Id usuario'),
			new MHiddenField('idSetor','','Id setor'),
			new MSelection('saldoPublico','','Saldo Público', $opcoes),
			new MSelection('ativo',$this->objUo->ativo,'Ativa', array('S' => 'SIM', 'N' => 'NAO'))
        );
		
        $this->SetFields($fields);
        
        $this->sigla->addAttribute('maxlength', 30);
        $this->nome->addAttribute('maxlength', 50);
        $this->documentoRef->addAttribute('maxlength', 200);
        $this->lkpSetor->addAttribute('readonly', TRUE);
        
		
	  // $this->SetFieldAttr('lkpUsuario','module','common');
	  // $this->SetFieldAttr('lkpUsuario','item','usuario');
	  // $this->SetFieldAttr('lkpUsuario','event','filler');
	  // $this->SetFieldAttr('lkpUsuario','related','idUsuarioGestor,NULL,NULL,NULL,NULL,NULL,lkpUsuario');
	   
	   //$this->SetFieldAttr('lkpSetor','readonly',TRUE);
	   $this->SetFieldAttr('lkpSetor','module','common');
	   $this->SetFieldAttr('lkpSetor','item','setor');
	   $this->SetFieldAttr('lkpSetor','event','filler');
	   $this->SetFieldAttr('lkpSetor','related','idSetor,NULL,lkpSetor');
		
		$buttons = array(
        	new FormButton('btnSalvar', 'Salvar')
            );
		$this->SetButtons($buttons);

		$validators = array(
			new RequiredValidator('sigla'),
			new RequiredValidator('nome'),
			//new RequiredValidator('lkpSetor')
		);
		$this->SetValidators($validators);
		$this->SetData();

    }

	function SetData()
	{
		$data = $this->objUo;
		$this->SetFieldValue('sigla',$data->sigla);
		$this->SetFieldValue('nome',$data->nome);
		$this->SetFieldValue('documentoRef',$data->documentoRef);
		$this->SetFieldValue('tipo',$data->tipo);
		//$this->SetFieldValue('idUsuarioGestor',$data->idUsuarioGestor);
		$this->SetFieldValue('idSetor',$data->idSetor);
		$this->SetFieldValue('saldoPublico',$data->saldoPublico);

		//$usuario = $this->manager->GetBusiness('common','usuario');
		$pessoa = $this->manager->GetBusiness('common','pessoa');
		if ( $data->idSetor )
		{
			$setor = $this->manager->GetBusiness('common','setor');
			$setor->GetById($data->idSetor);
			$this->SetFieldValue('lkpSetor',$setor->nome);
		}
		
		//$usuario->GetById($data->idUsuarioGestor);
		//$pessoa->GetById($usuario->idPessoa);

	//	$this->SetFieldValue('lkpUsuario',$pessoa->nome);
	}
	
	public function btnSalvar_click()
	{
		$sigla 			= Form::GetFormValue('sigla');
		$nome 			= Form::GetFormValue('nome');
		$setor 			= Form::GetFormValue('idSetor');
		$lkpSetor		= Form::GetFormValue('lkpSetor');
		$tipo 			= Form::GetFormValue('tipo');
		$saldoPublico 	= Form::GetFormValue('saldoPublico');
		$ativo 			= Form::GetFormValue('ativo');

		if( strlen(trim($sigla)) < 5 )
		{
			$this->AddError("O campo 'sigla' deve conter pelo menos 5 cinco caracteres.");
		
		}elseif( strlen(trim($nome)) < 5 )
		{
			$this->AddError("O campo 'nome' deve conter pelo menos 5 cinco caracteres.");
		}
		elseif(!$setor)
		{
			$this->AddError("Um setor deve ser definido.");
		}
		elseif(!$tipo)
		{
			$this->AddError("Um tipo deve ser definido.");
		}
		elseif($saldoPublico == "")
		{
			$this->AddError("Saldo Público deve ser definido.");
		}
		elseif(!$ativo)
		{
			$this->AddError("Deve definir se a UO está ativa ou não.");
		}
		else
		{
			$this->objUo->SetData($this->GetData());
			try
			{
				$this->objUo->save();
				$this->objUo->Log(OP_UPD,"Dados de UO modificado");
				$go = $this->manager->GetActionURL('adm','main:uo',$this->objUo->idUo);
				$this->manager->Information('Unidade Orçamentária alterada com sucesso.', $go);
			}
			catch (Exception $e)
			{
				$this->addError($e->getMessage());
			}	
		}
	}
 }
?>
