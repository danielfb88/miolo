
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?
MIOLO::Import('extensions::class.phpmailer.php','PHPMailer');
class frmLiberaOrcTerm extends Form
{
	
	var $objTransfOrcUO;

    function __construct($objTransfOrcUO)
    {
$this->objTransfOrcUO = $objTransfOrcUO;
		global $MIOLO, $module;

		// Titulo do Form		
        $this->Form('Liberação de Termo de Orçamento');

	$this->EventHandler();
    }
    
	function CreateFields()
	{

		global $MIOLO;

		$ui = $MIOLO->GetUI();

		//$Uo = $MIOLO->GetBusiness('adm','uo');
		$Inst = $MIOLO->GetBusiness('common','instituicao');
		//$ListaUos = $Uo->listUosOrdemNome();
		$ListaCampus = $Inst->listCampus();
		//var_dump($ListaCampus->result);

        $fields = array(
				//new MSeparator('UO de Origem'),
				array(
				new MSelection('campus','','Campus',$ListaCampus->result), 
			//	new MLookupTextField('lkpRubricaOrigem', '', 'Rubrica', 11),
				new MTextField('ano', date("Y"), 'Ano', 4),
					
					),
		
				array(
				new MSelection('licitacao','','Licitação',array()),
				new HiddenField('idlicitacao',''),
				new HiddenField('idusuario','')
			//	new MLookupTextField('lkpRubricaDestino', '', 'Rubrica', 11),				
			//	new MTextField('anodestino', date("Y"), 'Ano', 5),
			
					),
				//new MSeparator(''),	
              //  new MTextField('valor','','Valor',3)              

            		);


		$buttons = array(
		new MButton('btnExibir', 'Exibir'),
		//new MButton('btnSalvar', 'Transferir'),
		new MButton('btnExibirItem', 'Exibir Itens'),
		new MButton('btnVoltar', 'Voltar'),
		new MButton('btnAlterar', 'Alterar Selecionados'),
					   	);

        $this->SetButtons($buttons);
		$this->setFields($fields);

		$this->SetButtonAttr('btnSalvar','visible',false);
		$this->SetFieldAttr('valor','visible',false);
		$this->SetButtonAttr('btnAlterar','visible',false);
		$this->SetButtonAttr('btnExibirItem','visible',false);
	/*//Lookup Rubrica da UO de Origem
	  $this->SetFieldAttr('lkpRubricaOrigem','module','adm');
        $this->SetFieldAttr('lkpRubricaOrigem','item','rubrica');
        $this->SetFieldAttr('lkpRubricaOrigem','event','filler');
        $this->SetFieldAttr('lkpRubricaOrigem','related','lkpRubricaOrigem');
	//Lookup Rubrica da UO de Destino	
	  $this->SetFieldAttr('lkpRubricaDestino','module','adm');
        $this->SetFieldAttr('lkpRubricaDestino','item','rubrica');
        $this->SetFieldAttr('lkpRubricaDestino','event','filler');
        $this->SetFieldAttr('lkpRubricaDestino','related','lkpRubricaDestino');
	//Setar ano como somente leitura
		$this->SetFieldAttr('anoorigem','readonly',true);
		$this->SetFieldAttr('anodestino','readonly',true);
		*/
	}


	

function btnExibir_click()
{
    global $MIOLO;
	
	//
	$OrcamentoTermo = $MIOLO->GetBusiness('adm','orcamentotermo');
	$Inst = $MIOLO->GetBusiness('common','instituicao');
	
	$Campus 	= 	$this->GetFieldValue('campus');
	$Ano = $this->GetFieldValue('ano');
	
	
	if($this->GetFormValue('campus') == null)
	{
		$this->addError("Selecione um Campus.");
	}
	elseif($this->GetFormValue('ano') == null)
	{
		$this->addError("Forneça um Ano.");
	}
	else
	{
		//$Campus = $Inst->GetInstByUG($UG);
		//var_dump($Campus);
		if ($Ano != null)
		{
			$Licita = $OrcamentoTermo->listLicitacaoByCampusAndAno(trim($Campus),trim($Ano));
		}else
		{
			$Licita = $OrcamentoTermo->listLicitacaoByCampus(trim($Campus));
		}
	//	$UoDestino 	= 	$this->GetFieldValue('uodestino');
	/*	$RubricaOrigem 	=	trim($this->GetFieldValue('lkpRubricaOrigem'));
		$RubricaDestino =	trim($this->GetFieldValue('lkpRubricaDestino'));
	*/

		//var_dump($Licita);
	/*	$this->exibirSaldo($UoOrigem,'UO de Origem');
		new MSeparator('-');	
		$this->exibirSaldo($UoDestino,'UO de Destino');
	*/	$OrcamentoInterno = $MIOLO->GetBusiness('adm','orcamentointerno');
		//var_dump('UO',$UoOrigem,'ANO',$AnoOrigem,'RUB',$RubricaOrigem);
	//	$saldo = $OrcamentoInterno->getSaldo();
	
		//var_dump($Licita->result[0]);
	
		//$this->SetFieldAttr('saldoorigem','label',);
		//$OrcamentoInterno->getSaldoRubrica(
		if ($Licita->result != null)
		{
			$this->SetFieldAttr('licitacao','options',$Licita->result);
			$this->SetButtonAttr('btnExibirItem','visible',true);
			$this->SetButtonAttr('btnExibir','visible',false);
			$this->SetFieldAttr('ano','visible',false);
		}
		//$this->SetFieldAttr('lkpRubricaOrigem','readonly',true);
		//$this->SetFieldAttr('uodestino','readonly',true);
		//$this->SetFieldAttr('lkpRubricaDestino','readonly',true);
	
	//	$this->SetFieldAttr('valor','visible',true);
	 
	 
	//var_dump($this->GetFieldValue('lkpRubricaOrigem'));
	}
 }

 
	function btnExibirItem_click()
 
	{
		global $MIOLO;
		
		$OrcamentoTermo = $MIOLO->GetBusiness('adm','orcamentotermo');
		$tabelageral = $MIOLO->GetBusiness('common','tabelageral');
		$Licitacao = $MIOLO->GetBusiness('adm','licitacao');
		
		
		$IdLicitacao = $this->GetFieldValue('licitacao');
		$this->SetFieldValue('idlicitacao',$IdLicitacao);
		
		$NumLicita = $Licitacao->getById($IdLicitacao);
		//var_dump($NumLicita->numero);
		//$num = $this->licitacao;
		//var_dump($num);
		$IdInstituicao = $this->GetFieldValue('campus');
		
		$query = $OrcamentoTermo->listItensByLibLicitacao($IdLicitacao,$IdInstituicao);
		
		if (is_array($query->result))
        {
            foreach ($query->result as $key => $rs)
            {
			$desc = $tabelageral->GetDescricao('AD_STATUSORCTERM',$query->result[$key][3]);
			 $query->result[$key][3] = $desc->result[0][0];
			
//            	$query->result[$key][6] = $cf->formatWithSymbol($query->result[$key][6]);
  //              $query->result[$key][7] = $cf->formatWithSymbol($rs[5]*$cf->toDecimal($rs[6]));
            }
        }

		
		
         $columns = array(
		    new ObjectGridColumn('','Item','left', false,'5%',true),
			new ObjectGridColumn('','Usuário','left', false,'25%',true),
		    new ObjectGridColumn('','Data-Limite','left', false,'15%',true),
		    new ObjectGridColumn('','Status','left', false,'15%',true),
			new ObjectGridColumn('','Descrição','left', false,'35%',true),
         );
		
		
		$myGrid = new MGrid($query->result,$columns,'',0);
		$myGrid->AddActionSelect();
		$myGrid->SetTitle("Licitação $NumLicita->numero");
		
		$this->addField($myGrid);
	//	$this->addField();
		$FieldsLiberar = array
		(
		new MSpacer(3),
		new CalendarField('datalimite','','Data-Limite','10','Informe a data-limite para Digitação dos termos '),
		new MLookupTextField('lkpLogin','','Login',20),
	//	new MLookupFieldValue('lkpNome','','Nome',40),
		);
		
		$this->addFields($FieldsLiberar);
		
		  $this->SetFieldAttr('lkpLogin','module','common');
	   $this->SetFieldAttr('lkpLogin','item','usuario');
	   $this->SetFieldAttr('lkpLogin','event', 'filler');
	   $this->SetFieldAttr('lkpLogin','related', 'idusuario,lkpLogin');
/*	   $this->SetFieldAttr('lkpNome','module','common');
	   $this->SetFieldAttr('lkpNome','item','pessoa');
	   $this->SetFieldAttr('lkpNome','event', 'filler');
	   $this->SetFieldAttr('lkpNome','related', 'hidIdPessoa,lkpNome');
	*/	$this->SetFieldAttr('ano','visible',false);
		$this->SetFieldAttr('licitacao','visible',false);
		$this->SetFieldAttr('campus','visible',false);
		$this->SetButtonAttr('btnExibir','visible',false);
		$this->SetButtonAttr('btnAlterar','visible',true);
	}
 
 
  function btnAlterar_click() 
  {
	  global $MIOLO, $module, $item, $action, $theme;
	  $datasOk = true;
	  
	  $OrcamentoTermo = $MIOLO->GetBusiness('adm','orcamentotermo');
	  $tabelageral = $MIOLO->GetBusiness('common','tabelageral');
	  
	  $selected = $this->GetFormValue('select');
	  $IdLicitacao = $this->idlicitacao->value;
	  
	  $DataLimite = $this->GetFormValue('datalimite');
	  $IdUsuario = $this->GetFormValue('idusuario');  
	  $login = $this->GetFormValue('lkpLogin');
	  
	  $ano = substr($DataLimite, 6, 4);
	  $mes = substr($DataLimite, 3, 2);
	  $dia = substr($DataLimite, 0, 2);

	  $DataLimite = $ano.$mes.$dia;
	  
	  
	  if ($IdUsuario == null || $DataLimite == null || $login == null)
	  {
			// Somente volta na tela anterior caso os campos estejam vazios.
	  }
	  else
	  {
		foreach ($selected as $item) // Para cada item selecionado
		{
			$busca = $OrcamentoTermo->findByDataLimite($IdLicitacao,$item);
			$busca = str_replace("-", "", $busca);

			if( $DataLimite < $busca )
			{
			  	$this->addError("O campo Data-Limite deve ser maior ou igual a Data-Limite do item ".$item);
			  	$datasOk = false;
			}
		}
		
	 	// Se há itens selecionados e se todas as datas estão acima do limite.
		if ($selected != null && $datasOk)
		{
			$contItens = 0;
			foreach ($selected as $key => $rs)
			{
				$contItens += 1;
				$OrcamentoTermo->LiberarOrcTerm($IdLicitacao,$selected[$key],$DataLimite,$IdUsuario);
			}
			$query = $OrcamentoTermo->listItensByLibLicitacao($IdLicitacao,$IdInstituicao);
			$dadosItens = "<table border='1'><tr><td>Item</td><td>Descrição</td><td>Status</td></tr>";
			foreach ($query->result as $item)
			{
				foreach ($selected as $key)
				{
					if($item[0] == $key)
					{
						$dadosStatus = $tabelageral->GetDescricao('AD_STATUSORCTERM',$item[3]);
						$status = $dadosStatus->result[0][0];
						$dadosItens .= "<tr><td>$item[0]</td><td>$item[4]</td><td>$status</td></tr>";
					}
				}
			}
			$dadosItens .= "</table>";
			//Envio de e-mail avisando ao usuário responsável
			$dataMail = date("d/m/y");
			$horaMail = date("H:i");
			$user = $this->manager->getBusiness('common','usuario');				
			$user->getById($IdUsuario);					
			$setor = $this->manager->getBusiness('common','setor');
			$setor->getById($user->idSetor);
			$instituicao = $this->manager->getBusiness('common','instituicao');
			$instituicao->getById($setor->idinstituicao);
			$objLicitacao = $MIOLO->GetBusiness('adm','licitacao');
		  	$licitacao = $objLicitacao->getById($IdLicitacao);
			$email = $user->email;
			$nome = $user->nome;
			$mail = new PHPMailer();
			$mail->IsSMTP(); // send via SMTP
			$mail->Host = $MIOLO->getConf('mail.host');
			$mail->SMTPAuth = $MIOLO->getConf('mail.auth');
			$mail->Username = $MIOLO->getConf('mail.user');
			$mail->Password = $MIOLO->getConf('mail.pass');
			$mail->From = $MIOLO->getConf('mail.from');
			$mail->FromName = "SIGA - Sistema Integrado de Gestão Acadêmica";
			$mail->AddAddress($email);
			$mail->Port = $MIOLO->getConf('mail.port');
			$mail->WordWrap = 50;
			$mail->IsHTML(true);
			$mail->Subject = "SIGA-ADM(6) - LIBERAÇÃO DE ORÇAMENTO TERMO";
			$mail->ssl = $MIOLO->getConf('mail.ssl');

			$mail->Body = "
					<center><h1>LIBERAÇÃO DE ORÇAMENTO TERMO</h1></center>
					<br /><br />Prezado(a) Sr(a) {$nome},
					<br /><br />Existem {$contItens} itens da Licitação {$licitacao->numero} aguardando a liberação de orçamento até a data {$DataLimite}, os quais são apresentados na tabela a seguir:
					<br /><br />$dadosItens
					<br /><br /><b>Data: </b>{$dataMail}										
					<br /><b>Hora: </b>{$horaMail}						
					<br /><br /><b>Para maiores informações acesse: </b>{$MIOLO->getConf('home.url')}
					<br /><br />Atenciosamente,
					<br /><br />{$instituicao->nome} - {$instituicao->instituicao}						
					<br /><br /><b><font color=\"RED\"> Observação: Este email foi enviado automaticamente, não é necessário responder. </font></b>
			";								
			$mail->Send();	

			$MIOLO->Information("Itens Alterados com Sucesso");	
		} // If de inserção	
	} // else
 } // Função alterar.
 
 function btnSalvar_click()
{ 
	global $MIOLO;
	
	$UoOrigem 	= 	$this->GetFieldValue('uoorigem');
	$UoDestino 	= 	$this->GetFieldValue('uodestino');
	$RubricaOrigem 	=	trim($this->GetFieldValue('lkpRubricaOrigem'));
	$RubricaDestino =	trim($this->GetFieldValue('lkpRubricaDestino'));
	$AnoOrigem = $this->GetFieldValue('anoorigem');
	$AnoDestino = $this->GetFieldValue('anodestino');
	
	$Uo = $MIOLO->GetBusiness('adm','uo');
//	var_dump($UoOrigem,$RubricaOrigem,$AnoOrigem);
	$UoOrigem = 	$Uo->GetById($UoOrigem);
	$UoDestino = $Uo->GetById($UoDestino);
	
		            try 
            {
                
				$credito = $this->GetFieldValue('valor');
			//	var_dump($credito);
				$UoOrigem->removeCredito($RubricaOrigem,$credito,$AnoOrigem);
				$UoOrigem->save();
				$UoDestino->addCredito($RubricaDestino,$credito,$AnoDestino);
				$UoDestino->save();
				$this->manager->Information("Orçamento interno transferido com sucesso.",$action);
            
            
      
            }
            catch(Exception $e)
            {
                $this->manager->Error("Informe o seguinte erro à equipe do CGCO: ",$e->getMessage());
            }

}
 
 /*
 function exibirSaldo($idUo,$titulo)
	{
	
		//$this->setTitle('Recursos da UO');
		$uos = $this->manager->GetBusiness('adm','uo');
		$saldouo = $uos->GetById($idUo);
		$saldouo->getOrcamentos();
		if ( !$saldouo->orcamento )
		{
				$this->manager->Error("Informe o seguinte erro à equipe do CGCO: Unidade Orçamentária sem recursos",$this->manager->GetActionURL('adm','main:recursos'));
		}
        $columns = array(
            new ObjectGridColumn('rubrica->descricao','Rubrica','left', false,'55%',true),
			new ObjectGridColumn('ano','Ano','left', false,'10%',true),
            new ObjectGridColumn('credito','Credito','left', false,'10%',true),
            new ObjectGridColumn('debito','Debito','left', false,'10%',true),
            new ObjectGridColumn('previsaoDebito','Prev Debito','left', false,'15%',true),
            new ObjectGridColumn('saldo','Saldo','left', false,'10%',true),
        );
		$grid = new ObjectGrid($saldouo->orcamento,$columns,'',0);
		$this->setButtonAttr('btnPost','visible',FALSE);
		$this->addField(new MSeparator($titulo));
		$this->addField(new TextField('nome','','Nome','60'));
		//$this->addField(new TextField('gestor','','Gestor'));
		//new MSeparator('-');
		$this->addField($grid);
		$this->addField(new CurrencyField('saldao',$saldouo->getSaldoTotal(),'Saldo Total Disponível'));
		//	$this->setFieldValue('idUo',$saldouo->idUo);
		$this->setFieldValue('nome',$saldouo->nome);
		//$this->setFieldValue('gestor',$saldouo->gestor->pessoa->nome);
		$this->setFieldAttr('idUo','readonly',TRUE);
		//$this->setFieldAttr('gestor','readonly',TRUE);
		$this->setFieldAttr('nome','readonly',TRUE);
		$this->setFieldAttr('saldao','readonly',TRUE);
		
	}
	*/
 function btnVoltar_click()
    {
		$data = $this->getData();
        $this->setData($data);
    }
}

?>
