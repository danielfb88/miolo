
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?
class frmLicitacaoProposta extends Form
{
	protected $objLicitacao;
	protected $idFornecedor;
	protected $idLicitacao;
	protected $ItemsCounter;
	 
	function __construct($arr)
	{
		global $MIOLO;

		$this->idFornecedor = $arr[0];
		$this->objLicitacao = $arr[1];

		//$this->objLicitacao = $objLicitacao;
		
		
		
		$this->idLicitacao = $this->objLicitacao->idLicitacao;

		$this->Form('');
		$this->EventHandler();
	}

	function CreateFields()
	{

		global $MIOLO,$module,$item, $ItemsCounter;

		$ItemsCounter = 0; //contador de itens

		$idFornecedor = $this->idFornecedor;

		$this->AddField(new hiddenField('validar'));

		if ($this->objLicitacao->idTipoLicitacao == '1' OR $this->objLicitacao->idTipoLicitacao == '4')
		{
			$objItem = $MIOLO->GetBusiness('adm','itemreq');
			$qryItem = $objItem->ListItensSemDescricaoByLicitacao($this->objLicitacao->idLicitacao,$idFornecedor);
			// Desmontando e remontando o array do grid para formatar os campos
			if (is_array($qryItem->result))
			{
				foreach ($qryItem->result as $rs)
				{
					// Q quantidade mostrada é a inicial ou a do mapa caso uma já tenha sido informada.
					if ($rs[1] != 0)
					$quantidade = $rs[1];
					else
					$quantidade = $rs[7];

					$list[] = array($rs[3],$rs[0],$rs[6],$rs[1],number_format(str_replace(',','.',$rs[4]),2,',',''),$rs[5],$quantidade);
					$ItemsCounter++;
				}
			}

			$textFieldQuantidade = new TextField('quantidade','%6%','Qtde.',3);
			$textFieldPreco = new TextField('preco','%4%','Preco',7);
			$textFieldUnidade = new TextField('unidade','%5%','Marca',20);
			$excecoes = array("1"=>"EM LICITAÇÃO","4"=>"ANULADO","3"=>"CANCELADO","B"=>"INABILITADO","2"=>"NÃO COTADO");
			$selStatus = new Selection('status','%2%','Participante',$excecoes);

			$columns = array(
				new GridColumn('Ítem','center',true,'5%'),
				new GridColumn('Material','left',false,'75%'),
				new GridControl($selStatus,'Status','center',true,'5%'),            
				new GridControl($textFieldQuantidade,'Qtde.','center',true,'6%'),
				new GridControl($textFieldPreco,'Valor Unt.','center',true,'7%',true,'',false,true),
				new GridControl($textFieldUnidade,'Marca','center',true,'7%',true,'',false,true),
			);
		}
		elseif ($this->objLicitacao->idTipoLicitacao == '2')
		{
			$objItem = $MIOLO->GetBusiness('adm','itemservext');
			$qryItem = $objItem->ListByLicitacao($this->objLicitacao->idLicitacao,$idFornecedor);

			if (is_array($qryItem->result))
			{
				// Desmontando e remontando o array do grid para formatar os campos
				foreach ($qryItem->result as $rs)
				{
					// Q quantidade mostrada é a inicial ou a do mapa caso uma já tenha sido informada.
					if ($rs[1] != 0)
					$quantidade = $rs[1];
					else
					$quantidade = $rs[7];

					$list[] = array($rs[3],$rs[0],$rs[6],$rs[1],number_format(str_replace(',','.',$rs[4]),2,',',''),$rs[5],$quantidade);
					$ItemsCounter++;
				}
			}

			$textFieldQuantidade = new TextField('quantidade','%6%','Qtde.',3);
			$textFieldPreco = new TextField('preco','%4%','Preco',7);
			$excecoes = array("1"=>"EM LICITAÇÃO","4"=>"ANULADO","3"=>"CANCELADO","B"=>"INABILITADO","2"=>"NÃO COTOU");
			$selStatus = new Selection('status','%2%','Participante',$excecoes);

			$columns = array(
				new GridColumn('Ítem','center',true,'5%'),
				new GridColumn('Serviço','left',false,'80%'),
				new GridControl($selStatus,'Status','center',true,'5%'),            
				new GridControl($textFieldQuantidade,'Qtde.','center',true,'6%'),
				new GridControl($textFieldPreco,'Valor Unt.','center',true,'9%',true,'',false,true),
			);
		}
		else
		{
			$objItem = $MIOLO->GetBusiness('adm','itemreqbib');
			$qryItem = $objItem->ListItensByLicitacaoFornecedor($this->objLicitacao->idLicitacao,$idFornecedor);

			if (is_array($qryItem->result))
			{
				// Desmontando e remontando o array do grid para formatar os campos
				foreach ($qryItem->result as $rs)
				{
					// Q quantidade mostrada é a inicial ou a do mapa caso uma já tenha sido informada.
					if ($rs[1] != 0)
						$quantidade = $rs[1];
					else
						$quantidade = $rs[7];

					$list[] = array($rs[3],$rs[0],$rs[6],$rs[1],number_format(str_replace(',','.',$rs[4]),2,',',''),$rs[5],$quantidade);
					$ItemsCounter++;
				}
			}

			$textFieldQuantidade = new TextField('quantidade','%6%','Qtde.',3);
			$textFieldPreco = new TextField('preco','%4%','Preco',7);
			$textFieldUnidade = new TextField('unidade','%5%','Marca',20);
			$excecoes = array("1"=>"EM LICITAÇÃO","4"=>"ANULADO","3"=>"CANCELADO","B"=>"INABILITADO","2"=>"NÃO COTADO");
			$selStatus = new Selection('status','%2%','Participante',$excecoes);

			$columns = array(
				new GridColumn('Ítem','center',true,'5%'),
				new GridColumn('Material','left',false,'75%'),
				new GridControl($selStatus,'Status','center',true,'5%'),            
				new GridControl($textFieldQuantidade,'Qtde.','center',true,'6%'),
				new GridControl($textFieldPreco,'Valor Unt.','center',true,'7%',true,'',false,true),
				new GridControl($textFieldUnidade,'Marca','center',true,'7%',true,'',false,true),
			);
		}

		//Instacia um novo objeto de Licitacao para pegar os dados os participante
		$objLicitacao2 = $MIOLO->GetBusiness('adm','licitacao');
		$objLicitacao2->GetInstituicaoByIdParticipante($idFornecedor);
		$this->setTitle('Participante: '.$objLicitacao2->nome);

		// instancia o grid
		$href_grid = $MIOLO->GetActionURL($module,$self);
		
		
		$marca =  Form::GetFormValue('unidade');
		$preco = Form::GetFormValue('preco');
		$quantidade = Form::GetFormValue('quantidade');
		$status = Form::GetFormValue('status');
		
			$validar = true;
			$k=0;
		//para cada item efetuar as verificacoes informando anormalidades
		while($k < $ItemsCounter)
		{
			//Verifica a opção selecionada foi em licitação
			if($status[$k] == 1)
			{
				//verificacoes
				if( ($preco[$k]<= 0) && ($quantidade[$k] <=0) )
				{
					$validar=false;
					
				}
				if($quantidade[$k] <= 0)
				{
					$validar=false;
					
				}
				if($preco[$k] <= 0)
				{
					$validar=false;
					
				}
				if( strlen(trim($marca[$k])) <2 )
				{
					$validar=false;
					
				}
			}
			$k++;
		};
		
		
		if (!$validar)
		{
		
		$i = 0;
		foreach ($qryItem->result as $rs)
				{
		//$list[] = array($rs[3],$rs[0],$rs[6],$rs[1],number_format(str_replace(',','.',$rs[4]),2,',',''),$rs[5],$quantidade);
		
		//MARCA
		$list[$i][5] = $marca[$i];
		
		//VALOR UNIT
		$list[$i][4] = $preco[$i];
		
		//STATUS
		$list[$i][2] = $status[$i];
		
		$i++;
				}
		}		
				
				
		$grid = new Grid($list, $columns, $href_grid,0);
		$fields = Array(
			$grid,
			new hiddenField('idf',$idFornecedor),
			
		);    

		$this->SetFields($fields);

		$this->SetButtonAttr('btnListaFornecedores','visible',false);

		$buttons = Array(
			new FormButton('btnGravaProposta','Gravar Proposta'),
		);

		$this->SetButtons($buttons);
	}

	function btnGravaProposta_click()
	{

		global $MIOLO,$module,$item, $ItemsCounter;
		$ok = true;

		$marca =  Form::GetFormValue('unidade');
		$preco = Form::GetFormValue('preco');
		$quantidade = Form::GetFormValue('quantidade');
		$status = Form::GetFormValue('status');

		$k=0;
		//para cada item efetuar as verificacoes informando anormalidades
		while($k < $ItemsCounter)
		{
			if (substr_count($preco[$k], ",") != 0) {
	 			 $preco[$k] = str_replace(".","",$preco[$k]);
			         $preco[$k] = str_replace(",",".",$preco[$k]);
	 		}
			//Verifica a opção selecionada foi em licitação
			if($status[$k] == 1)
			{
				//verificacoes
				if( ($preco[$k]<= 0) && ($quantidade[$k] <=0) )
				{
					$ok=false;
					$this->AddError("Insira uma quantidade válida para o item ".($k+1) .".");
				}
				if($quantidade[$k] <= 0)
				{
					$ok=false;
					$this->AddError("Insira uma quantidade válida para o item ".($k+1) .".");
				}
				if(((double)$preco[$k]) <= 0)
				{
					$ok=false;
					$this->AddError("Insira um preço válido para o item ".($k+1) .".");
				}
				if( strlen(trim($marca[$k])) <2 )
				{
					$ok=false;
					$this->AddError("Insira a marca do item ".($k+1) .".");
				}
			}
			$k++;
		};

		if($ok)
		{
			$cf = new MCurrencyFormatter();

			$preco = $this->GetFormValue('preco');
			$unidade = $this->GetFormValue('unidade');
			$quantidade = $this->GetFormValue('quantidade');
			$status = $this->GetFormValue('status');

			$idLicitacao = $this->idLicitacao;    
			$idFornecedor = $this->idFornecedor;

			$this->SetButtonAttr('btnListaFornecedores','visible',false);

			// Diferente para licitação de serviço ou de material
			if ($this->objLicitacao->idTipoLicitacao == '1' OR $this->objLicitacao->idTipoLicitacao == '4')
			{
				$objItem = $MIOLO->GetBusiness('adm','itemreq');
				$qryItem = $objItem->ListItensSemDescricaoByLicitacao($this->objLicitacao->idLicitacao,$idFornecedor);
			}
			elseif ($this->objLicitacao->idTipoLicitacao == '2')
			{
				$objItem = $MIOLO->GetBusiness('adm','itemservext');
				$qryItem = $objItem->ListByLicitacao($this->objLicitacao->idLicitacao,$idFornecedor);
			}
			else
			{
				$objItem = $MIOLO->GetBusiness('adm','itemreqbib');
				$qryItem = $objItem->ListItensByLicitacaoFornecedor($this->objLicitacao->idLicitacao,$idFornecedor);
			}

			$i = 0;
			$ok = true;

			$mensagem = "Proposta cadastrada com sucesso. ";
			foreach ($qryItem->result as $rs)
			{
				if (substr_count($preco[$i], ",") != 0) {
					  $preco[$i] = str_replace(".","",$preco[$i]);
				          $preco[$i] = str_replace(",",".",$preco[$i]);
			        }
				$item = $rs[3];

				// Se a quantidade for maior que zero então verifica se ela é a menor do mapa
				// Se a quantidade for a menor do mapa então todas as quantidades do item devem ser esta
				if ($quantidade[$i] > 0)
				{
					$qtdMenor = $this->objLicitacao->getMenorQuantidadeDoMapa($item);

					if ($quantidade[$i] < $qtdMenor)
					{
						$this->objLicitacao->setQuantidadeNoMapa($item,$quantidade[$i]);
						$mensagem .= "A quantidade do item ".$item." foi alterada para ".$quantidade[$i].".";
					}
				}

				// Se o preço da proposta for zero e o status for 1 então fornecedor não cotou aquele item.

				if (!is_float($preco[$i]))
					$preco[$i] = $cf->toDecimal($preco[$i]);

				if ($preco[$i] == 0 && $status[$i] == 1)
					$status[$i] = 2;

				if (!$this->objLicitacao->UpdateMapaLicitacao($item,$idFornecedor,$preco[$i],$unidade[$i],$quantidade[$i],$status[$i]))
				{
					$ok = false;
				}

				$i++;
			}

			if ($ok)
			{    
			    $action = $this->manager->GetActionURL('adm','main:licitacoes',$this->objLicitacao->idLicitacao,array('form'=>'propostas'));
			    $this->manager->information($mensagem,$action);
			}
		}

	}
 }
?>
