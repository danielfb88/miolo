
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<? 
class frmRequisicaoPassagem extends Form
{
	protected $objRequisicao;
	
    function __construct($objRequisicao)
    {
		$this->objRequisicao = $objRequisicao;
        $this->Form('Requisição de passagem');
        $this->EventHandler();
   }

    function CreateFields()
    {
			$opcoes = array(
                    "S"=>"SIM",
                    "N"=>"NÃO",
            );

            $horas = array(
                "12:00"=>"12:00",
                "13:00"=>"13:00",
                "14:00"=>"14:00",
                "15:00"=>"15:00",
                "16:00"=>"16:00",
                "17:00"=>"17:00",
                "18:00"=>"18:00",
                "19:00"=>"19:00",
                "10:00"=>"10:00",
                "20:00"=>"20:00",
                "21:00"=>"21:00",
                "22:00"=>"22:00",
                "23:00"=>"23:00",
            );


		$fields = array(
			new MTextField('cpf','','CPF',20,'999.999.999-99'),
			new MHiddenField('idPessoa'),
			new MTextField('nome','','Nome',50),
			new MTextField('numrg','','Identidade',20),
			new MTextField('telefone','','Telefone de Contato',20),
			new MTextField('endereco','','Endereço',52),
		    new MTextField('bairro','','Bairro',50),
		    new MTextField('cep','','CEP',12),
            new MHiddenField('idmunicipio',''),
            new MLookupTextField('lkpMunicipio','','Municipio',50),
            new MTextField('edtEstado','','Estado',2),
            new MTextField('email','','E-mail',50),
        	new MMultiLineField('motivo','','Motivo','',3,50),
        	new MSelection('tipoTransporte','','Transporte'),
            //new Selection('valorEstimado','','Valor Estimado'),
			new MCurrencyField('valorEstimado','','Valor Estimado'),
			new MHiddenField('idMunicipioDestino',''),
			new MHiddenField('idMunicipioOrigem',''),
			new MLookupTextField('lkpMunicipioOrigem','','Municipio Origem',50,'Não use acentos ou cedilha'),
            new MTextField('estadoOrigem','','Estado Origem','2'),
			new MLookuptextField('lkpMunicipioDestino','','Municipio Destino',50,'Não use acentos ou cedilha'),
            new MTextField('estadoDestino','','Estado Destino','2'),
            new MCalendarField('dataPassagem','','Data Passagem'),
            new MTextField('horaPassagem','','Hora Passagem','10','Ex.: 12:30'),
            new MSelection('classe','','Classe'),
            new MSelection('idEmpresaPassagem','','Empresa'),
            new MTextField('bilhete','','N&ordm; Vôo','10'),
			new MHiddenField('idMunicipioDestinoAux',''),
			new MHiddenField('idMunicipioOrigemAux',''),
			new MTextLabel('bilhete2','','N&ordm; Bilhete',10),
			new MTextField('codLocalizador','','Cod. Localizador','10'),
			new MTextField('emailRequisitante','','E-mail Contato','30')
        );
		
       $this->SetFields($fields);
       $this->SetClose(NULL);
       $this->SetFieldAttr('bilhete2','visible',FALSE);

	   $this->SetFieldAttr('lkpMunicipio','module','common');
       $this->SetFieldAttr('lkpMunicipio','item','municipio');
       $this->SetFieldAttr('lkpMunicipio','event','filler');
       $this->SetFieldAttr('lkpMunicipio','related','idmunicipio,lkpMunicipio,edtEstado');
		
	   $this->SetFieldAttr('lkpMunicipioOrigem','module','common');
	   $this->SetFieldAttr('lkpMunicipioOrigem','item','municipio');
	   $this->SetFieldAttr('lkpMunicipioOrigem','event','filler');
	   $this->SetFieldAttr('lkpMunicipioOrigem','related','idMunicipioOrigem, lkpMunicipioOrigem, estadoOrigem');

	   $this->SetFieldAttr('lkpMunicipioDestino','module','common');
	   $this->SetFieldAttr('lkpMunicipioDestino','item','municipio');
	   $this->SetFieldAttr('lkpMunicipioDestino','event','filler');
	   $this->SetFieldAttr('lkpMunicipioDestino','related','idMunicipioDestino, lkpMunicipioDestino, estadoDestino');       

	   $tabelaGeral = $this->manager->getBusiness('common','tabelageral');
       
	   $query = $tabelaGeral->listByTabela('AD_TIPOTRANSPORTE');
	   $this->SetFieldAttr('tipoTransporte','options',$query->result);
       
		//$query2 = $tabelaGeral->listByTabela('AD_VALORESTRANSPORTE');
	   //$this->SetFieldAttr('valorEstimado','options',$query2->result);

	   $query3 = $tabelaGeral->listByTabela('AD_CLASSE');
	   $this->SetFieldAttr('classe','options',$query3->result);

 	   $empresaPassagem = $this->manager->getBusiness('adm','empresapassagem');       
	   $query4 = $empresaPassagem->listAll('AD_TIPOTRANSPORTE');
	   $this->SetFieldAttr('idEmpresaPassagem','options',$query4->result);


		$buttons = array(
        	new FormButton('btnSolicitar', 'Enviar'),
        	new FormButton('btnSalvar', 'Confirmar'),
            new FormButton('btnAtender','Enviar'),
            new FormButton('btnConfirmarAtendimento','Confirmar'),
            new FormButton('btnExecutar','Enviar'),
            new FormButton('btnConfirmarExecucao', 'Confirmar'),
            new FormButton('btnAnular','Anular Requisição'),
            new FormButton('btnLiberar','Enviar'),
            new FormButton('btnRecusar','Enviar'),
            new FormButton('btnConfirmarRecusa','Confirmar'),
			new FormButton('btnAvaliar','Enviar'),
            new FormButton('btnConfirmarAvaliacao','Confirmar'),
            new FormButton('btnRetornaExecucao','Enviar novamente'),
            new FormButton('btnConfirmarRetorno','Confirmar Atualização'),
            new FormButton('btnEstornar','Estornar'),
        	new FormButton('btnCancelar', 'Cancelar'),
			new FormButton('btnCPF', 'Procurar')
            );

		$this->SetButtons($buttons);
		
		$this->setButtonAttr('btnSalvar','visible',FALSE);
		$this->setButtonAttr('btnSalvareSolicitar','visible',FALSE);
		$this->setButtonAttr('btnCancelar','visible',FALSE);
		$this->setButtonAttr('btnAtender','visible',FALSE);
        $this->setButtonAttr('btnConfirmarAtendimento','visible',FALSE);
		$this->setButtonAttr('btnCPF','visible',FALSE);
		$this->setButtonAttr('btnSolicitar','visible',FALSE);
		$this->setButtonAttr('btnExecutar','visible',FALSE);
        $this->setButtonAttr('btnConfirmarExecucao','visible',FALSE);
 		$this->setButtonAttr('btnLiberar','visible',FALSE);       
 		$this->setButtonAttr('btnRecusar','visible',FALSE);       
 		$this->setButtonAttr('btnConfirmarRecusa','visible',FALSE);    
 		$this->setButtonAttr('btnAvaliar','visible',FALSE);       
 		$this->setButtonAttr('btnConfirmarAvaliacao','visible',FALSE);
  		$this->setButtonAttr('btnRetornaExecucao','visible',FALSE);
  		$this->setButtonAttr('btnConfirmarRetorno','visible',FALSE);
  		$this->setButtonAttr('btnAnular','visible',FALSE);
 		$this->setButtonAttr('btnEstornar','visible',FALSE);     
        
        // Se está fazendo a requisicao municipio de origem é setado com Juiz de Fora
        if ( $this->objRequisicao->status == '1' )
		{
            $this->SetFieldValue('lkpMunicipioOrigem','JUIZ DE FORA');
            $this->SetFieldValue('estadoOrigem','MG');
		}
        else
		{
			$this->setButtonAttr('btnSolicitar','visible',FALSE);
			$this->setObjectData();
		}

       $idUsuario = $this->manager->GetLogin()->idkey;
       switch ( $this->objRequisicao->status )
	   {
			case 1:
                // validators só quando o usuário está fazendo a requisição
                $validators = array(
                                    new MCPFValidator('cpf','','required'),
                                    new MRequiredValidator('nome'),
                                    new MRequiredValidator('numrg'),
                                    new MRequiredValidator('endereco'),
                                    new MRequiredValidator('bairro'),
                                    new MRequiredValidator ('motivo','','required'),
                                    new MRequiredValidator('lkpMunicipioOrigem'),
                                    new MRequiredValidator('lkpMunicipioDestino'),
                                    new MRequiredValidator('dataPassagem'),
                                    new MRequiredValidator('horaPassagem'),
									new MEmailValidator('emailRequisitante')
                                   );

                $this->setValidators($validators);
                $this->visible(false);
				$this->setButtonAttr('btnCPF','visible',TRUE);                
            break;
			
			case 2: // Solicitada, a ser autorizada pelo gestor da UO requisitante
				$this->objRequisicao->getUoRequisitante();
				if ( $this->objRequisicao->uoRequisitante->isGestorOf($idUsuario) )
				{
            		$itemRequisicao = $this->objRequisicao->getItem();
                    $this->AddField(new MSeparator('<b>AÇÕES DO GESTOR DA UO REQUISITANTE</b>'));
                    $this->AddField(new MSelection('acaoGestorUoReq','','Ação'));
                    $this->AddField(new MMultiLineField('motivoRejeicao','','Motivo','',3,50));

                    $tipoAcao = array("4"=>"AUTORIZAR","5"=>"DEVOLVER","6"=>"RECUSAR");
                    $this->SetFieldAttr('acaoGestorUoReq','options',$tipoAcao);
                    $this->setButtonAttr('btnAtender','visible',TRUE);
				}
			break;
            
            case 4: // Autorizada, a ser liberada para execução
 				$this->objRequisicao->getUoExecutante();
				if ( $this->objRequisicao->uoExecutante->isExecutorOf($idUsuario) )
				{           
                	$tipoAcao = array("1"=>"LIBERAR","2"=>"RECUSAR");
                    $this->AddField(new MSelection('acaoGestorUoExec','','Ação',$tipoAcao));
                    $this->AddField(new MMultiLineField('motivoRejeicao','','Motivo','',3,50));
                    $this->setButtonAttr('btnLiberar','visible',TRUE);
                }
            break;
            
            case 5: // Devolvida para acertos
         		$this->setReadOnly(FALSE,TRUE);
                $this->setButtonAttr('btnSolicitar','visible',TRUE);
                $this->AddField(new MMultiLineField('motivoRejeicao',$this->objRequisicao->motivoRejeicao,'Motivo da Devolução','',3,50));
                $this->setFieldAttr('motivoRejeicao','readonly',TRUE);
            break;
          
			case 7: // Liberada pela UO Exec, a ser executada pelo gestor da UO executante 
				$this->objRequisicao->getUoExecutante();
				if ( $this->objRequisicao->uoExecutante->isExecutorOf($idUsuario) )
				{
                    $this->AddField(new MSeparator('<b>EXECUÇÃO DA REQUISIÇÃO</b>'));
                    $this->AddField(new MTextField('bilhete2','','Num. Bilhete',10));
                    $this->AddField(new MCurrencyField('valorReal','','Valor Real',10,''));
                    $this->AddField(new MLookupFieldValue('lkpEmpenho','','Empenho',30));
                    $this->AddField(new MTextField('notaFiscal','','Nota Fiscal',10));
                    $this->AddField(new MCalendarField('dataNotaFiscal','','Data N. Fiscal'));
                    $this->AddField(new MMultiLineField('ocorrencias','','Ocorrências','',3,50));
                    $this->AddField(new MHiddenField('idEmpenho',''));
                   
                    //$this->setButtonAttr('btnConfirmarExecucao','visible',TRUE);
                    $this->setButtonAttr('btnExecutar','visible',TRUE);
                    $this->setButtonAttr('btnAnular','visible',TRUE);
					$this->SetFieldAttr('lkpEmpenho','module','adm');
			        $this->SetFieldAttr('lkpEmpenho','item','numeroEmpenho');
			        $this->SetFieldAttr('lkpEmpenho','event','filler');
			        $this->SetFieldAttr('lkpEmpenho','related','idEmpenho,lkpEmpenho');
				}
			break;

            case 9: // Executada, a ser avaliada pelo usuário requisitante
            
        		$this->objRequisicao->getUoRequisitante();
                $itemRequisicao = $this->objRequisicao->getItem();

                // Se é o gestor da Uo Executante, habilita opção de retorno de requisição
				$this->objRequisicao->getUoExecutante();

				if ( $this->objRequisicao->uoExecutante->isExecutorOf($idUsuario) )
                {
                    $this->AddField(new Separator('<b>ESTORNO DE EXECUÇÃO</b>'));
                    $this->AddField(new TextField('bilhete2',$itemRequisicao->bilhete,'N&ordm; Bilhete',10));
                    $this->AddField(new CurrencyField('novoValorReal',$itemRequisicao->valorReal,'Novo Valor Real',10,''));
                    $this->AddField(new MLookupFieldValue('lkpEmpenho',$itemRequisicao->empenho->numero,'Empenho',30));
                    $this->AddField(new TextField('notaFiscal',$itemRequisicao->notaFiscal,'NotaFiscal',10));                  
                    $this->AddField(new CalendarField('dataNotaFiscal',$itemRequisicao->dataNotaFiscal,'Data N. Fiscal'));
                    $this->AddField(new MultiLineField('ocorrencias',$itemRequisicao->ocorrencias,'Ocorrências','',3,50));
                    $this->AddField(new HiddenField('idEmpenho',''));
                   
                    $this->setButtonAttr('btnRetornaExecucao','visible',TRUE);
					$this->SetFieldAttr('lkpEmpenho','module','adm');
			        $this->SetFieldAttr('lkpEmpenho','item','numeroEmpenho');
			        $this->SetFieldAttr('lkpEmpenho','event','filler');
			        $this->SetFieldAttr('lkpEmpenho','related','idEmpenho,lkpEmpenho');
			        $this->setFieldAttr('valorReal','readonly',TRUE);
                }
                else
                {
                    $this->AddField(new MCurrencyField('valorReal',$itemRequisicao->valorReal,'Valor Real',10,''));
                    if ($itemRequisicao->tipoTransporte != 2)
                    {
                        $this->AddField(new MTextLabel('bilhete2',$itemRequisicao->bilhete,'N&ordm; Bilhete',10));
                    }
                    $this->AddField(new MTextLabel('lkpEmpenho',$itemRequisicao->empenho->numero,'Empenho',30));
                    $this->AddField(new MTextLabel('notaFiscal',$itemRequisicao->notaFiscal,'NotaFiscal',10));
                    $this->AddField(new MTextLabel('dataNotaFiscal',$itemRequisicao->dataNotaFiscal,'Data N. Fiscal'));
                    $this->AddField(new MTextLabel('ocorrencias',$itemRequisicao->ocorrencias,'Ocorrências','',3,50));
           		    $this->setFieldAttr('valorReal','readonly',TRUE);
     		    }

                // Se é o usuário requisitante ou o gestor da UO de onde ele requisitou
                /*if (($this->objRequisicao->getIdUsuarioRequisitante() == $idUsuario) || ($this->objRequisicao->uoRequisitante->isGestorOf($idUsuario))) 
                {
                    $opcoes = array(
                        "1"=>"SIM",
                        "2"=>"NÃO",
                        );
                        
                    $opcoes2 = array(
                        "1"=>"SATISFATÓRIO",
                        "2"=>"INSATISFATÓRIO",
                        );
                        
                    $this->AddField(new MSeparator('<b>AVALIAÇÃO DO SERVIÇO</b>'));
                    //$this->AddField(new Selection('autorizarPagamento','','Autorizar Pagamento',$opcoes));
                    $this->AddField(new MSelection('conceito','','Conceito',$opcoes2));
                    $this->AddField(new MMultiLineField('obs','','Observações','',3,50));
             		$this->setButtonAttr('btnAvaliar','visible',TRUE);       
                }*/                   
            break;

            case A: // Recusada a ser acompanhada pela pessoa que requisitou
                    $this->AddField(new MMultiLineField('motivoRejeicao',$this->objRequisicao->motivoRejeicao,'Motivo da Recusa','',3,50));
                    $this->setFieldAttr('motivoRejeicao','readonly',TRUE);
            break;

            case D: // Pagamento não autorizado pelo pelo requisitante
                // Se é o gestor da Uo Executante, habilita opção de estorno de requisição
				$this->objRequisicao->getUoExecutante();
				if ( $this->objRequisicao->uoExecutante->isExecutorOf($idUsuario) )
                {
            		$itemRequisicao = $this->objRequisicao->getItem();                
                    $this->AddField(new MSeparator('<b>RETORNO DE EXECUÇÃO</b>'));
                    $this->AddField(new MTextField('bilhete2',$itemRequisicao->bilhete,'N&ordm; Bilhete',10));
                    $this->AddField(new MCurrencyField('valorReal',$itemRequisicao->valorReal,'Valor Real',10,''));
                    $this->AddField(new MLookupFieldValue('lkpEmpenho',$itemRequisicao->empenho->numero,'Empenho',30));
                    $this->AddField(new MTextField('notaFiscal',$itemRequisicao->notaFiscal,'NotaFiscal',10));
                    $this->AddField(new MCalendarField('dataNotaFiscal',$itemRequisicao->dataNotaFiscal,'Data N. Fiscal'));
                    $this->AddField(new MMultiLineField('ocorrencias',$itemRequisicao->ocorrencias,'Ocorrências','',3,50));
                    $this->AddField(new MHiddenField('idEmpenho',''));
               		$this->setButtonAttr('btnRetornaExecucao','visible',TRUE);    

					$this->SetFieldAttr('lkpEmpenho','module','adm');
			        $this->SetFieldAttr('lkpEmpenho','item','numeroEmpenho');
			        $this->SetFieldAttr('lkpEmpenho','event','filler');
			        $this->SetFieldAttr('lkpEmpenho','related','NULL,idEmpenho,lkpEmpenho');                    
                }
            break;

            case E: // Pagamento autorizado pelo pelo requisitante
                $itemRequisicao = $this->objRequisicao->getItem();
                $this->AddField(new MCurrencyField('valorReal',$itemRequisicao->valorReal,'Valor Real',10,''));
           		$this->setFieldAttr('valorReal','readonly',TRUE);
           		$this->setButtonAttr('btnEstornar','visible',TRUE);
            break;

            case G: // Requisicao Finalizada
                $itemRequisicao = $this->objRequisicao->getItem();

                $this->AddField(new MCurrencyField('valorReal',$itemRequisicao->valorReal,'Valor Real',10,''));
                $this->AddField(new MTextField('notaFiscal',$itemRequisicao->notaFiscal,'Nota Fiscal',10,''));
                $this->AddField(new MTextField('dataNotaFiscal',$itemRequisicao->dataNotaFiscal,'Data da Nota Fiscal',10,''));
                if ($itemRequisicao->tipoTransporte != 2)  //se nao for de aviao, mostra nº bilhete
                {
                   $this->AddField(new MTextField('bilhete2',$itemRequisicao->bilhete,'Nº Bilhete',10,''));
                   $this->setFieldAttr('bilhete','visible',FALSE); //Nº do vôo nao visivel
                }
                $this->AddField(new MMultiLineField('ocorrencias',$itemRequisicao->ocorrencias,'Ocorrências','',3,50));

                //Se não for nem 1 nem 2 então não mostra conceito.
                if ($itemRequisicao->conceito == '1')
                {
                   $this->AddField(new MTextField('conceito','SATISFATÓRIO','Conceito',15,''));
                }
                elseif ($itemRequisicao->conceito == '2')
                {
                   $this->AddField(new MTextField('conceito','INSATISFATÓRIO','Conceito',15,''));
                }
                $this->AddField(new MMultiLineField('obs',$itemRequisicao->obs,'Observações','',3,50));
                $this->setFieldAttr('valorReal','readonly',TRUE);
                $this->setFieldAttr('notaFiscal','readonly',TRUE);
                $this->setFieldAttr('dataNotaFiscal','readonly',TRUE);
                $this->setFieldAttr('obs','readonly',TRUE);
                $this->setFieldAttr('ocorrencias','readonly',TRUE);
                $this->setFieldAttr('conceito','readonly',TRUE);
                $this->setFieldAttr('bilhete2','readonly',TRUE);
            break;

	   }
    }

	function setDataDadosPassageiro($a)
	{
		$passageiro = $this->manager->getBusiness('common','pessoa');
		//$passageiro->idpessoa = $this->getFormValue('idPessoaCount');
        $passageiro->idpessoa = $a;
		$passageiro->retrieve();

		$this->SetFieldValue('nome',$passageiro->nome);
		$this->SetFieldValue('numrg',$passageiro->numrg);
		$this->SetFieldValue('cpf',$passageiro->cpf);
		$this->SetFieldValue('telefone',$passageiro->telefone);
		$this->SetFieldValue('endereco',$passageiro->endereco);
		$this->SetFieldValue('bairro',$passageiro->bairro);
		$this->SetFieldValue('cep',$passageiro->cep);
    	$this->SetFieldValue('email',$passageiro->email);
		$this->SetFieldValue('lkpMunicipio',$passageiro->idmunicipio);
	}
	
	function setDataMotivoViagem()
	{
		$this->SetFieldValue('motivo',$this->GetFormValue('motivo'));
	}

	function setObjectData()	
	{	
		$itemRequisicao = $this->objRequisicao->getItem();
		$itemRequisicao->retrieveAssociation('pessoa');
		$itemRequisicao->retrieveAssociation('municipioOrigem');
		$itemRequisicao->retrieveAssociation('municipioDestino');
		$itemRequisicao->pessoa->retrieveAssociation('municipio');
		$this->SetFieldValue('nome',$itemRequisicao->pessoa->nome);
		$this->SetFieldValue('numrg',$itemRequisicao->pessoa->numrg);
		$this->SetFieldValue('cpf',$itemRequisicao->pessoa->cpf);
		$this->SetFieldValue('telefone',$itemRequisicao->pessoa->telefone);
		$this->SetFieldValue('endereco',$itemRequisicao->pessoa->endereco);
		$this->SetFieldValue('bairro',$itemRequisicao->pessoa->bairro);
		$this->SetFieldValue('cep',$itemRequisicao->pessoa->cep);
		$this->SetFieldValue('lkpMunicipio',$itemRequisicao->pessoa->municipio->municipio);
 		$this->SetFieldValue('edtEstado',trim($itemRequisicao->pessoa->municipio->idUF));
 		$this->SetFieldValue('email',$itemRequisicao->pessoa->email);
		$this->SetFieldValue('motivo',$itemRequisicao->motivo);
		$this->SetFieldValue('tipoTransporte',$itemRequisicao->tipoTransporte);
		$this->SetFieldValue('valorEstimado',$itemRequisicao->valorEstimado);		
        $this->SetFieldValue('lkpMunicipioOrigem',$itemRequisicao->municipioOrigem->municipio);
        $this->SetFieldValue('estadoOrigem',trim($itemRequisicao->municipioOrigem->idUF));
        $this->SetFieldValue('lkpMunicipioDestino',$itemRequisicao->municipioDestino->municipio);
        $this->SetFieldValue('estadoDestino',trim($itemRequisicao->municipioDestino->idUF));
    	$this->SetFieldValue('dataPassagem',substr($itemRequisicao->dataHoraPassagem,0,10));
     	$this->SetFieldValue('horaPassagem',substr($itemRequisicao->dataHoraPassagem,11,5));   
       	$this->SetFieldValue('idEmpresaPassagem',$itemRequisicao->idEmpresaPassagem);
       	$this->SetFieldValue('classe',$itemRequisicao->classe);
       	$this->SetFieldValue('codLocalizador',$itemRequisicao->codLocalizador);
       	$this->SetFieldValue('emailRequisitante',$itemRequisicao->emailRequisitante);

        if ($data->tipoTransporte != 2)  //se nao for de aviao, mostra nº bilhete
        {
        	$this->SetFieldValue('bilhete',$data->bilhete2);
        }
		$this->SetFieldValue('bilhete',$data->bilhete);
        $this->SetFieldValue('bilhete',$itemRequisicao->bilhete);

		$this->setReadOnly();
   	}

	function setReadOnly($all=true,$pessoa=true)
	{
		$this->setFieldAttr('nome','readonly',$pessoa);
		$this->setFieldAttr('numrg','readonly',$pessoa);
		$this->setFieldAttr('cpf','readonly',$pessoa);
		$this->setFieldAttr('telefone','readonly',$pessoa);
		$this->setFieldAttr('endereco','readonly',$pessoa);
		$this->setFieldAttr('bairro','readonly',$pessoa);
		$this->setFieldAttr('cep','readonly',$pessoa);
		$this->setFieldAttr('lkpMunicipio','readonly',$pessoa);
		$this->setFieldAttr('edtEstado','readonly',$pessoa);
		$this->setFieldAttr('email','readonly',$pessoa);
		$this->setFieldAttr('motivo','readonly',$all);
		$this->setFieldAttr('tipoTransporte','readonly',$all);
		$this->setFieldAttr('lkpMunicipioOrigem','readonly',$all);
		$this->setFieldAttr('lkpMunicipioDestino','readonly',$all);
		$this->setFieldAttr('municipioOrigem','readonly',$all);
		$this->setFieldAttr('estadoOrigem','readonly',$all);
		$this->setFieldAttr('municipioDestino','readonly',$all);
		$this->setFieldAttr('estadoDestino','readonly',$all);
		$this->setFieldAttr('valorEstimado','readonly',$all);
		$this->setFieldAttr('dataPassagem','readonly',$all);
		$this->setFieldAttr('horaPassagem','readonly',$all);
		$this->setFieldAttr('idEmpresaPassagem','readonly',$all);
		$this->setFieldAttr('classe','readonly',$all);
   		$this->setFieldAttr('bilhete','readonly',$all);
   		$this->setFieldAttr('bilhete2','readonly',$all);
   		$this->setFieldAttr('codLocalizador','readonly',$all);
   		$this->setFieldAttr('emailRequisitante','readonly',$all);
	}

	function setReadOnlyDadosPassageiro()
	{
		$this->setFieldAttr('nome','readonly',TRUE);
		$this->setFieldAttr('numrg','readonly',TRUE);
		$this->setFieldAttr('cpf','readonly',TRUE);
		$this->setFieldAttr('telefone','readonly',TRUE);
		$this->setFieldAttr('endereco','readonly',TRUE);
		$this->setFieldAttr('bairro','readonly',TRUE);
		$this->setFieldAttr('cep','readonly',TRUE);
		$this->setFieldAttr('lkpMunicipio','readonly',TRUE);
		$this->setFieldAttr('edtEstado','readonly',TRUE);
		$this->setFieldAttr('motivo','readonly',TRUE);
	}
	
	function setReadOnlyMotivoViagem()
	{
		$this->setFieldAttr('motivo','readonly',TRUE);
	}

	function setReadOnlyDadosTransporte()
	{
		$this->setFieldAttr('tipoTransporte','readonly',TRUE);
		$this->setFieldAttr('valorEstimado','readonly',TRUE);
	}
	
	function setReadOnlyTipoViagem()
	{
		$itemRequisicao = $this->objRequisicao->getItem();

		$this->setFieldAttr('lkpMunicipioOrigem','readonly',TRUE);
		$this->setFieldAttr('estadoOrigem','readonly',TRUE);
		$this->setFieldAttr('estadoDestino','readonly',TRUE);
		$this->setFieldAttr('lkpMunicipioDestino','readonly',TRUE);
	}
	
	function btnSolicitar_click()
	{
    	$data = $this->GetData();

        // Se o usuario digitou um nome de municipio sem usar a lupa
 		$municipioDeOrigem = $this->manager->getBusiness('common','municipio');
 		$municipioDeDestino = $this->manager->getBusiness('common','municipio');
        $municipioPessoa = $this->manager->getBusiness('common','municipio');
			
		$valorEst = str_replace(".","",$data->valorEstimado);
		$valorEst2 = str_replace(",",".",$valorEst);
		$valorEst3 = str_replace("R$","",$valorEst2);

        if (!$data->idmunicipio)
        {
            $municipioPessoa->getIdByNomeEstado($data->lkpMunicipio,$data->edtEstado);
            $data->idmunicipio = $municipioPessoa->idMunicipio;
    		$this->SetFieldValue('idmunicipio',$data->idmunicipio);
        }
   
        if (!$data->idMunicipioOrigem)
        {
            $municipioDeOrigem->getIdByNomeEstado($data->lkpMunicipioOrigem,$data->estadoOrigem);
            $data->idMunicipioOrigem = $municipioDeOrigem->idMunicipio;
    		$this->SetFieldValue('idMunicipioOrigem',$municipioDeOrigem->idMunicipio);
    		$this->SetFieldValue('idMunicipioOrigemAux',$municipioDeOrigem->idMunicipio);
        }

		//bugfix sinistro para o internet explorer
		$data->idMunicipioDestino = ($data->idMunicipioDestino == "1   ") ? NULL : $data->idMunicipioDestino;
		
        if (!$data->idMunicipioDestino)
        {
            $municipioDeDestino->getIdByNomeEstado($data->lkpMunicipioDestino,$data->estadoDestino);

            if ( $municipioDeDestino->idMunicipio )
			{
	            $data->idMunicipioDestino = $municipioDeDestino->idMunicipio;  
    			$this->SetFieldValue('idMunicipioDestino',$municipioDeDestino->idMunicipio);
    			$this->SetFieldValue('idMunicipioDestinoAux',$municipioDeDestino->idMunicipio);
			}
        }
      
        if ((is_null($data->idmunicipio)) || (!$municipioPessoa))
		{
			$this->addError("Município do requisitante inválido! Use a lupa para localizar o município.");
			$this->btnCPF_Click();
		}
        /*elseif (is_null($data->nome))
 		{
			$this->addError("Nome do requisitante em branco. Este campo é de preenchimento obrigatório!");
			$this->btnCPF_Click();
		}
        elseif (is_null($data->numrg))
 		{
			$this->addError("Identidade do requisitante em branco. Este campo é de preenchimento obrigatório!");
			$this->btnCPF_Click();
		}
        */
        elseif ($valorEst3 == 0.00)//o valor estimado não pode ser igual a zero
 		{
			$this->addError("O valor estimado tem que ser um valor maior que zero");
			$this->btnCPF_Click();
		}
        elseif (($valorEst3 < 300)&&($data->tipoTransporte=='2'))//passagem área
 		{
			$this->addError("O valor estimado de uma passagem área não deve ser inferior à R$300,00");
			$this->btnCPF_Click();
		}
        /*
        elseif (is_null($data->endereco))
 		{
			$this->addError("Endereço do requisitante em branco. Este campo é de preenchimento obrigatório!");
			$this->btnCPF_Click();
		}
        elseif (is_null($data->bairro))
 		{
			$this->addError("Bairro do requisitante em branco. Este campo é de preenchimento obrigatório!");
			$this->btnCPF_Click();
		}
        /*
        elseif (is_null($data->cep))
 		{
			$this->addError("CEP do requisitante em branco. Este campo é de preenchimento obrigatório!");
			$this->btnCPF_Click();
		}
        elseif (($data->motivo==""))
 		{
			$this->addError("Motivo da viagem em branco. Este campo é de preenchimento obrigatório!");
			$this->btnCPF_Click();
		}
        elseif (is_null($data->dataPassagem))
 		{
			$this->addError("Data da Passagem em branco. Este campo é de preenchimento obrigatório!");
			$this->btnCPF_Click();
		}
        elseif (is_null($data->horaPassagem))
 		{
			$this->addError("Hora da Passagem em branco. Este campo é de preenchimento obrigatório!");
			$this->btnCPF_Click();
		}
        */
        elseif ((strlen($data->cep) != 8 ) || (!is_numeric($data->cep)))
 		{
			$this->addError("CEP do requisitante inválido! Este campo deve conter apenas 8 dígitos númericos!");
			$this->btnCPF_Click();
		}
        elseif (($data->idMunicipioDestino=="")||(is_null($data->idMunicipioDestino)))
 		{
			$this->addError("Município de destino inválido! Use a lupa para localizar o município!");
			$this->btnCPF_Click();
		}
        else
        {
            $this->visible(true);
            $this->setTitle("Confirmação de requisição de Passagem");
            $this->setData();
            $this->setReadOnly();
            $this->setButtonAttr('btnSalvar','visible',TRUE);
            $this->setButtonAttr('btnCancelar','visible',TRUE);
            $this->setButtonAttr('btnSolicitar','visible',FALSE);
            $this->setButtonAttr('btnCPF','visible',FALSE);
	    }
	}
	
	function btnCancelar_click()
	{
		$this->setData();
	}

	function setData()
	{
		$data = $this->GetData();

		$this->SetFieldValue('idPessoa',$data->idPessoa);
		$this->SetFieldValue('nome',$data->nome);
    	$this->SetFieldValue('numrg',$data->numrg);
		$this->SetFieldValue('cpf',$data->cpf);
		$this->SetFieldValue('telefone',$data->telefone);
		$this->SetFieldValue('endereco',$data->endereco);
		$this->SetFieldValue('bairro',$data->bairro);
		$this->SetFieldValue('cep',$data->cep);
		$this->SetFieldValue('lkpMunicipio',$data->lkpMunicipio);
		$this->SetFieldValue('email',$data->email);
        $this->SetFieldValue('motivo',$data->motivo);
		$this->SetFieldValue('tipoTransporte',$data->tipoTransporte);
		$this->SetFieldValue('valorEstimado',$data->valorEstimado);
		$this->SetFieldValue('lkpMunicipioOrigem',$data->lkpMunicipioOrigem);
		$this->SetFieldValue('estadoOrigem',trim($data->estadoOrigem));
		$this->SetFieldValue('estadoDestino',trim($data->estadoDestino));
		$this->SetFieldValue('lkpMunicipioDestino',$data->lkpMunicipioDestino);
		$this->SetFieldValue('idMunicipioOrigem',$data->idMunicipioOrigem);
		$this->SetFieldValue('idMunicipioDestino',$data->idMunicipioDestino);
		$this->SetFieldValue('edtEstado',trim($data->edtEstado));
		$this->SetFieldValue('idEmpresaPassagem',$data->idEmpresaPassagem);
		$this->SetFieldValue('classe',$data->classe);
		$this->SetFieldValue('codLocalizador',$data->codLocalizador);
		$this->SetFieldValue('emailRequisitante',$data->emailRequisitante);
		if ($data->tipoTransporte != 2)  //se nao for de aviao, mostra nº bilhete
        {
        	$this->SetFieldValue('bilhete',$data->bilhete2);
        }
		$this->SetFieldValue('bilhete',$data->bilhete);
        //var_dump($data);
	}

	public function btnSalvar_click()
	{
		$itemRequisicao = $this->objRequisicao->getItem();
		$this->objRequisicao->getUoRequisitante();
        $idUsuario = $this->manager->GetLogin()->idkey;

		$data = $this->getData();
        $data->cpf = str_replace(".","",$data->cpf);
        $data->cpf = str_replace("-","",$data->cpf);

        if ($data->idMunicipioOrigemAux != "")
    		$data->idMunicipioOrigem = $data->idMunicipioOrigemAux;

        if ($data->idMunicipioDestinoAux != "")
    		$data->idMunicipioDestino = $data->idMunicipioDestinoAux;

	    $pessoa = $this->manager->getBusiness('common','pessoa');
	    $pessoa = $pessoa->GetByCpf($data->cpf);
	    if ($pessoa)
        { 
	       $id = $pessoa->idpessoa;
	       $pessoa = $pessoa->GetById($id);
           $pessoa->idpessoa = $id;
		   $data->idpessoa = $pessoa->idpessoa;
		}
		else
		{	  
			$pessoa = $this->manager->getBusiness('common','pessoa');
			$pessoa->nome = $data->nome;
   			$pessoa->numrg = $data->numrg;        
			$pessoa->cpf = $data->cpf;
			$pessoa->telefone = $data->telefone;
			$pessoa->endereco = $data->endereco;
			$pessoa->bairro = $data->bairro;
			$pessoa->cep = $data->cep;
			$pessoa->idmunicipio = $data->idmunicipio;
			$pessoa->email = $data->email;
			$pessoa->datanasc = "01/01/3000";
			$pessoa->idpais = "024";
			$pessoa->idpaisnascimento = "024";
			$pessoa->sexo = "I";
			$pessoa->save();
			$data->idpessoa = $pessoa->idpessoa;
			
			$pessoa->Log(OP_INS,"Nova Pessoa criada. idPessoa: ".$pessoa->idpessoa);
		}
        
        // Cria um objeto o atributo dataHoraPassagem 
        $data->dataHoraPassagem = $data->dataPassagem." ".$data->horaPassagem.":00";

		$itemRequisicao->setData($data);
		if($itemRequisicao->tipoTransporte != 2)
			$itemRequisicao->codLocalizador = null;
		$this->objRequisicao->addItem($itemRequisicao);		
        try
        {
            if ($this->objRequisicao->uoRequisitante->isGestorOf($idUsuario))
			{
		        $requisita = $this->manager->getBusiness('adm','requisita');
    		    $requisita->GetById($this->objRequisicao->idTipoReq,$this->objRequisicao->idUoRequisitante,$this->objRequisicao->getAno());
                
                if ($this->objRequisicao->uoRequisitante->temSaldoByRubrica($requisita->idRubrica,$itemRequisicao->valorEstimado))
                {                    
                    if ($itemRequisicao->tipoTransporte == '1')
                    {
                        $this->objRequisicao->beginTransaction();
                        $this->objRequisicao->setStatus('7');
                        $this->objRequisicao->save();
                        
                        $this->objRequisicao->getUoRequisitante();
                        $this->objRequisicao->uoRequisitante->setTransaction($this->objRequisicao->getTransaction());
                        $this->objRequisicao->uoRequisitante->addPrevisaoDebito($requisita->idRubrica,$data->valorEstimado,$this->objRequisicao->getAno());
                        $this->objRequisicao->Log(OP_UPD,"Requisicao ".$this->objRequisicao->idRequisicao.": adicao da previsao de ".$data->valorEstimado." na UO ".$this->objRequisicao->uoRequisitante->idUo);

                        $lancamentoInt = $this->manager->getBusiness('adm','lancamentoint');
                        $lancamentoInt->setTransaction($this->objRequisicao->getTransaction());
                        $lancamentoInt->tipoLancamento = '4';
						$lancamentoInt->obs = "Adicao de previsao devido a requisicao feita pelo proprio gestor";
                        $lancamentoInt->data = date("d/m/Y");                
                        $lancamentoInt->valor = $data->valorEstimado;
                        $lancamentoInt->ano = date("Y");
                        $lancamentoInt->idUoRequisitante = $this->objRequisicao->idUoRequisitante;       
                        $lancamentoInt->idUoExecutante = $this->objRequisicao->idUoExecutante;
                        $lancamentoInt->idRubrica = $requisita->idRubrica;           
                        $lancamentoInt->idRequisicao = $this->objRequisicao->idRequisicao;
                        $lancamentoInt->save();                        
                        $lancamentoInt->Log(OP_INS,"Lançamento Interno numero ".$lancamentoInt->idLancamentoInt." realizado para a Requisicao ".$this->objRequisicao->idRequisicao);
                        
                        $this->objRequisicao->endTransaction();
        
                        $this->objRequisicao->Log(OP_INS,"Requisicao ".$this->objRequisicao->idRequisicao." submetida a avaliação do gestor.");
                        $action_rep = $this->manager->getActionURL('adm','main:requisicoes:reprequisicaopassagem', '', array("req"=>"{$this->objRequisicao->idRequisicao}"));
                        $action_voltar = $this->manager->getActionURL('adm','main:requisicoes:find');
                        $this->manager->Question("Solicitação criada, autorizada e liberada com sucesso. O número da requisição é ".$this->objRequisicao->idRequisicao.". Deseja imprimir a requisição?",$action_rep, $action_voltar);
                    }
                    else
                    {
                        $this->objRequisicao->beginTransaction();
                        $this->objRequisicao->setStatus('4');
                        $this->objRequisicao->save();

                        $this->objRequisicao->getUoRequisitante();
                        $this->objRequisicao->uoRequisitante->setTransaction($this->objRequisicao->getTransaction());
                        $this->objRequisicao->uoRequisitante->addPrevisaoDebito($requisita->idRubrica,$data->valorEstimado,$this->objRequisicao->getAno());
                        $this->objRequisicao->Log(OP_UPD,"Requisicao ".$this->objRequisicao->idRequisicao.": adicao da previsao de ".$data->valorEstimado." na UO ".$this->objRequisicao->uoRequisitante->idUo);

                        $lancamentoInt = $this->manager->getBusiness('adm','lancamentoint');
                        $lancamentoInt->setTransaction($this->objRequisicao->getTransaction());
                        $lancamentoInt->tipoLancamento = '4';
						$lancamentoInt->obs = "Adicao de previsao devido a requisicao feita pelo proprio gestor";
                        $lancamentoInt->data = date("d/m/Y");                
                        $lancamentoInt->valor = $data->valorEstimado;
                        $lancamentoInt->ano = date("Y");
                        $lancamentoInt->idUoRequisitante = $this->objRequisicao->idUoRequisitante;       
                        $lancamentoInt->idUoExecutante = $this->objRequisicao->idUoExecutante;
                        $lancamentoInt->idRubrica = $requisita->idRubrica;           
                        $lancamentoInt->idRequisicao = $this->objRequisicao->idRequisicao;
                        $lancamentoInt->save();                        
                        $lancamentoInt->Log(OP_INS,"Lançamento Interno numero ".$lancamentoInt->idLancamentoInt." realizado para a Requisicao ".$this->objRequisicao->idRequisicao);
                        
                        $this->objRequisicao->endTransaction();

                        $this->objRequisicao->Log(OP_INS,"Requisicao ".$this->objRequisicao->idRequisicao." submetida a avaliação do gestor.");
                        $this->manager->information("Solicitação criada e autorizada com sucesso. O número da requisição é ".$this->objRequisicao->idRequisicao.".",$this->manager->getActionUrl('adm','main:requisicoes:find') );
                    }
                }
                else
                {
                    $this->manager->information("Saldo insuficiente para esta rubrica.",$this->manager->getActionUrl('adm','main:requisicoes:find') );
                }
            }
            else
            {
                $this->objRequisicao->setStatus('2');
              	$this->objRequisicao->save();
			    $this->objRequisicao->Log(OP_INS,"Requisicao ".$this->objRequisicao->idRequisicao." submetida a avaliação do gestor.");
    		    $this->manager->information("Solicitação submetida à avaliação do gestor. O número da requisição é ".$this->objRequisicao->idRequisicao.".",$this->manager->getActionUrl('adm','main:requisicoes:find') );               
            }
		}
		catch (Exception $e)
		{
			$this->addError($e->getMessage());
		}
	}
	
	public function btnSalvareSolicitar_click()
	{
		$itemRequisicao = $this->objRequisicao->getItem();
		$data = $this->getData();
		//var_dump($data);
	    $pessoa = $this->manager->getBusiness('common','pessoa');
	    $pessoa = $pessoa->GetByCpf($data->cpf);
	    if ($pessoa)
        { 
	       $id = $pessoa->idpessoa;
	       $pessoa = $pessoa->GetById($id);
           $pessoa->idpessoa = $id;
		   $data->idpessoa = $pessoa->idpessoa;
		}
		else
		{	  
			$pessoa = $this->manager->getBusiness('common','pessoa');
			$pessoa->nome = $data->nome;
    		$pessoa->numrg = $data->numrg;
			$pessoa->cpf = $data->cpf;
			$pessoa->telefone = $data->telefone;
			$pessoa->endereco = $data->endereco;
			$pessoa->bairro = $data->bairro;
			$pessoa->cep = $data->cep;
			$pessoa->idmunicipio = $data->idmunicipio;
			$pessoa->datanasc = "01/01/3000";
			$pessoa->idpais = "024";
			$pessoa->idpaisnascimento = "024";
			$pessoa->sexo = "I";
			$pessoa->save();
			$data->idpessoa = $pessoa->idpessoa;
			
			$pessoa->Log(OP_INS,"Nova Pessoa criada. idPessoa: ".$pessoa->idpessoa);
		}

		$itemRequisicao->setData($data);
		//var_dump($itemRequisicao);
		$this->objRequisicao->addItem($itemRequisicao);
		
		$this->objRequisicao->setStatus('2');

		$this->objRequisicao->save();
		if ( $this->objRequisicao->CheckError() )
		{
			foreach( $this->objRequisicao->GetErrors() as $e )
			{
				$this->AddError("Informe o seguinte erro a equipe do CGCO: ".$e);
			}
		}
		else
		{
        	$requisicao = $this->manager->GetBusiness('adm','requisicao');
        	$login = $this->manager->GetLogin();
			$usuario = $this->manager->GetBusiness('common','usuario');
			$usuario->GetById($login->idkey);

			$requisicao->idTipoReq = $this->objRequisicao->idTipoReq;
			$requisicao->idUoRequisitante = $this->objRequisicao->idUoRequisitante;
			$requisicao->idUoExecutante = $this->objRequisicao->idUoExecutante;
			$requisicao->idSetorOrigem = $usuario->GetSetorProvimento();
			$requisicao->status = 1;
        	$requisicao->idUsuarioRequisitante = $login->idkey;
        	$requisicao->dataHora = date("d/m/Y H:i:s");
        	$requisicao->save();
        	$go = $this->manager->GetActionURL('adm','main:requisicoes',$requisicao->idRequisicao,array("form"=>"item","requisita"=>$requisicao->idTipoReq,"idPessoaCont"=>$data->idpessoa,"motivo"=>$itemRequisicao->motivo,"idRequisicao"=>$this->objRequisicao->idRequisicao));
        	$this->page->Redirect($go);
			//$this->getFormValue('idPessoa')
		}
		
	}

	function visible($bool)
    {
		$this->SetFieldAttr('nome','visible',$bool);
    	$this->SetFieldAttr('numrg','visible',$bool);
		$this->SetFieldAttr('telefone','visible',$bool);
		$this->SetFieldAttr('endereco','visible',$bool);
		$this->SetFieldAttr('bairro','visible',$bool);
		$this->SetFieldAttr('cep','visible',$bool);
		$this->SetFieldAttr('lkpMunicipio','visible',$bool);
		$this->SetFieldAttr('edtEstado','visible',$bool);
		$this->SetFieldAttr('email','visible',$bool);
		$this->SetFieldAttr('motivo','visible',$bool);
		$this->SetFieldAttr('dataRefeicao','visible',$bool);
		$this->SetFieldAttr('tipoRefeicao','visible',$bool);
		$this->SetFieldAttr('lkpAcompanhante','visible',$bool);
		$this->SetFieldAttr('valorEstimado','visible',$bool);
		$this->SetFieldAttr('tipoTransporte','visible',$bool);
		$this->SetFieldAttr('lkpMunicipioOrigem','visible',$bool);
		$this->SetFieldAttr('lkpMunicipioOrigem','visible',$bool);
		$this->SetFieldAttr('lkpMunicipioDestino','visible',$bool);
		$this->SetFieldAttr('lkpMunicipioDestino','visible',$bool);
		$this->SetFieldAttr('dataPassagem','visible',$bool);
		$this->SetFieldAttr('horaPassagem','visible',$bool);
		$this->SetFieldAttr('estadoOrigem','visible',$bool);
		$this->SetFieldAttr('estadoDestino','visible',$bool);
		$this->SetFieldAttr('idEmpresaPassagem','visible',$bool);
		$this->SetFieldAttr('classe','visible',$bool);
		$this->SetFieldAttr('bilhete','visible',$bool);
		$this->SetFieldAttr('codLocalizador','visible',$bool);
		$this->SetFieldAttr('emailRequisitante','visible',$bool);
	}
	
	function btnAtender_click()
	{
        $data = $this->getData();

        $this->objRequisicao->getUoRequisitante();
        $itemRequisicao = $this->objRequisicao->getItem();
        $requisita = $this->manager->getBusiness('adm','requisita');
        $requisita->GetById($this->objRequisicao->idTipoReq,$this->objRequisicao->idUoRequisitante,$this->objRequisicao->getAno());

        if ($data->acaoGestorUoReq == '')
        {
    		$this->manager->Error("Você precisa selecionar uma ação a fazer (autorizar, devolver ou recusar).",'');
        }

        if ($this->objRequisicao->uoRequisitante->temSaldoByRubrica($requisita->idRubrica,$itemRequisicao->valorEstimado) || ($data->acaoGestorUoReq == '5') || ($data->acaoGestorUoReq == '6'))
        {        
            // Se selecionou recusar ou devolver
            if (($data->acaoGestorUoReq == '5') || ($data->acaoGestorUoReq == '6'))
            {
                if ($data->motivoRejeicao == '')
                {
                    $this->manager->Error("Você precisa informar o motivo.",'');
                }
            }    
            
            $this->setFieldAttr('motivoRejeicao','readonly',TRUE);
            $this->setFieldAttr('acaoGestorUoReq','readonly',TRUE);

            $this->setButtonAttr('btnAtender','visible',FALSE);
            $this->setButtonAttr('btnConfirmarAtendimento','visible',TRUE);
            $this->setButtonAttr('btnCancelar','visible',TRUE);
 		}
        else
        {
            $this->manager->information("Saldo insuficiente para esta rubrica.",$this->manager->getActionUrl('adm','main:requisicoes:find') );
		}        
	}


    function btnCPF_click()
    {
	   $this->visible(true);
	   $pessoa = $this->manager->getBusiness('common','pessoa');

       // Deixa o campo CPF só com números
	   $cpf = $this->GetFieldValue('cpf');
       $cpf = str_replace(".","",$cpf);
       $cpf = str_replace("-","",$cpf);

	   $pessoa = $pessoa->GetByCpf($cpf);
	   if ($pessoa)
       { 
	      $id = $pessoa->idpessoa;
	      $pessoa = $pessoa->GetById($id);
		  //var_dump($pessoa->nome);
	      $this->setFieldPessoa($pessoa);
          $this->setReadOnly(false);  
	   } 
	   else
       {
         $this->setReadOnly(false,false);
		 if ( ($this->getFormValue('btnCPF')))
         { 
	        $this->AddInfo('CPF não cadastrado! Por favor, insira os dados desta pessoa!');	   
	     }   
	   }
	   $this->setButtonAttr('btnCPF','visible',FALSE);
	   $this->setButtonAttr('btnSolicitar','visible',true);
	} 
	
	function setFieldPessoa($pessoa)
	{
	   $pessoa->retrieveAssociation('municipio');
       $this->SetFieldValue('idPessoa',$pessoa->idpessoa); 
	   $this->SetFieldValue('nome',$pessoa->nome);
	   $this->SetFieldValue('numrg',$pessoa->numrg);
	   $this->SetFieldValue('telefone',$pessoa->telefone);
	   $this->SetFieldValue('endereco',$pessoa->endereco);
	   $this->SetFieldValue('bairro',$pessoa->bairro);
	   $this->SetFieldValue('cep',$pessoa->cep);
       $this->SetFieldValue('lkpMunicipio',$pessoa->municipio->municipio);
	   $this->SetFieldValue('idmunicipio',$pessoa->municipio->idmunicipio);
	   $this->SetFieldValue('edtEstado',trim($pessoa->municipio->idUF));
       $this->SetFieldValue('email',$pessoa->email);
	}
	
	public function btnConfirmarAtendimento_click()
	{
		$itemRequisicao = $this->objRequisicao->getItem();		
        $data = $this->getData();

        $proximaRequisicao = $this->manager->getBusiness('adm','requisicao',$this->objRequisicao->getProximaASerAtendida());

        $itemRequisicao->setData($data);
		$this->objRequisicao->addItem($itemRequisicao);

        //Em caso de requisição de ônibus, requisição é liberada para execução automaticamente
        if ($data->tipoTransporte == '1' && $data->acaoGestorUoReq == '4')
            $this->objRequisicao->setStatus('7');
        else
            $this->objRequisicao->setStatus($data->acaoGestorUoReq);

        $this->objRequisicao->setMotivoRejeicao($data->motivoRejeicao);
        $this->objRequisicao->setDataHoraAutorizacao();
        $this->objRequisicao->beginTransaction();
    
        try
        {        
            if ($data->acaoGestorUoReq == '4')
            {
                $requisita = $this->manager->getBusiness('adm','requisita');
                $requisita->GetById($this->objRequisicao->idTipoReq,$this->objRequisicao->idUoRequisitante,$this->objRequisicao->getAno());
                $this->objRequisicao->getUoRequisitante();
                $this->objRequisicao->uoRequisitante->setTransaction($this->objRequisicao->getTransaction());
                $this->objRequisicao->uoRequisitante->addPrevisaoDebito($requisita->idRubrica,$data->valorEstimado,$this->objRequisicao->getAno());
 	   			$this->objRequisicao->Log(OP_UPD,"Requisicao ".$this->objRequisicao->idRequisicao.": adicao da previsao de ".$data->valorEstimado." na UO ".$this->objRequisicao->uoRequisitante->idUo);
    
                $lancamentoInt = $this->manager->getBusiness('adm','lancamentoint');
                $lancamentoInt->setTransaction($this->objRequisicao->getTransaction());
                $lancamentoInt->tipoLancamento = '4';
				$lancamentoInt->obs = "Adicao de previsao devido a autorizacao da requisicao pelo gestor";
                $lancamentoInt->data = date("d/m/Y");                
                $lancamentoInt->valor = $data->valorEstimado;
                $lancamentoInt->ano = date("Y");
                $lancamentoInt->idUoRequisitante = $this->objRequisicao->idUoRequisitante;       
                $lancamentoInt->idUoExecutante = $this->objRequisicao->idUoExecutante;
                $lancamentoInt->idRubrica = $requisita->idRubrica;           
                $lancamentoInt->idRequisicao = $this->objRequisicao->idRequisicao;
                $lancamentoInt->save();                
                $lancamentoInt->Log(OP_INS,"Lançamento Interno numero ".$lancamentoInt->idLancamentoInt." realizado para a Requisicao ".$this->objRequisicao->idRequisicao);
            }
       	}
		catch (Exception $e)
		{
			$this->addError($e->getMessage());
		}
     
        if ($data->acaoGestorUoReq == '4')
            $acao = "autorizada";
        elseif ($data->acaoGestorUoReq == '5')
            $acao = "devolvida";
        elseif ($data->acaoGestorUoReq == '6')
            $acao = "recusada";
   
        $this->objRequisicao->save();
        $this->objRequisicao->endTransaction();
		$this->objRequisicao->Log(OP_UPD,"Requisicao ".$this->objRequisicao->idRequisicao." atendida com sucesso.");

        //Passa para a proxima requisicao a ser atendida
		if ($proximaRequisicao->idRequisicao)
		    {
               $action_voltar = $this->manager->getActionUrl('adm','main:requisicoes',$proximaRequisicao->idRequisicao,array("form"=>"item","tipoReq"=>$proximaRequisicao->idTipoReq));
            }
        else
            {
               $action_voltar = $this->manager->getActionUrl('adm','main:requisicoes:find','');
            }
            
		$tipoPassagem = $this->GetFormValue('tipoTransporte');
        
		if ($tipoPassagem == '1')
        { 
            //onibus
			$action_rep = $this->manager->getActionURL('adm','main:requisicoes:reprequisicaopassagem','',array("req"=>"{$this->objRequisicao->idRequisicao}"));
           	$this->manager->Question("Requisição ".$acao." com sucesso. Deseja imprimir a requisição?",$action_rep, $action_voltar);
		}
		else
        {
			$this->manager->information("Requisição ".$acao." com sucesso.",$action_voltar);
		}
	}

 	function btnExecutar_click()
	{
        $data = $this->getData();

        if ($itemRequisicao->tipoTransporte != 2)  //se nao for de aviao, recebe nº bilhete
        {
           $data->bilhete = $data->bilhete2;
        }
        //var_dump($data);
        $k = new MKrono();        

		if (abs($k->DaysDiff($data->dataPassagem,$data->dataNotaFiscal)) > 180)
		{
			$this->addError("Data da nota fiscal superior a 180 dias da data da passagem");
			$this->btnCancelar_Click();
		}
        else if ($data->valorReal <= 0)
    	{
			$this->adderror("Valor real precisa ser um número maior que zero!");
			$this->btnCancelar_Click();
		} 
        else
        {        
            $this->setTitle("Confirmação de execução do Gestor da UO Executante");
            $this->setData();

            $this->setReadOnly();
            
            $this->setFieldAttr('motivoRejeicao','readonly',TRUE);
            $this->setFieldAttr('acaoGestorUoReq','readonly',TRUE);
            
            $this->setFieldAttr('bilhete','readonly',TRUE);
            $this->setFieldAttr('valorReal','readonly',TRUE);
            $this->setFieldAttr('ocorrencias','readonly',TRUE);
            $this->setFieldAttr('notaFiscal','readonly',TRUE);
            $this->setFieldAttr('dataNotaFiscal','readonly',TRUE);
            $this->setFieldAttr('idEmpenho','readonly',TRUE);       
            $this->setFieldAttr('lkpEmpenho','readonly',TRUE);       
          
            $this->setButtonAttr('btnExecutar','visible',FALSE);
            $this->setButtonAttr('btnConfirmarExecucao','visible',TRUE);
            $this->setButtonAttr('btnCancelar','visible',TRUE);
		}
	}

    public function btnConfirmarExecucao_click()
	{
        $cf = new MCurrencyFormatter();
        
		$itemRequisicao = $this->objRequisicao->getItem();		
        $data = $this->getData();

        $valorReal = $cf->toDecimal($data->valorReal);
        $valorEstimado = $cf->toDecimal($data->valorEstimado);

        // Se ja os lançamentos já foram feitos então deve abortar a repetição da operação
        if ($this->objRequisicao->checkLancamento('5',$valorReal) && $this->objRequisicao->checkLancamento('7',$valorEstimado))
        {
            return true;
        }
       
        $proximaRequisicao = $this->manager->getBusiness('adm','requisicao',$this->objRequisicao->getProximaASerExecutada());
        
        if ($itemRequisicao->tipoTransporte != 2)  //se nao for de aviao, recebe nº bilhete
        {
           $data->bilhete = $data->bilhete2;
        }
        $itemRequisicao->setData($data);
        $this->objRequisicao->addItem($itemRequisicao);
        $this->objRequisicao->setStatus('9');

        $this->objRequisicao->save();


        try
        {
            $this->objRequisicao->beginTransaction();

            $requisita = $this->manager->getBusiness('adm','requisita');
            $requisita->GetById($this->objRequisicao->idTipoReq,$this->objRequisicao->idUoRequisitante,$this->objRequisicao->getAno());

            $executa = $this->manager->getBusiness('adm','executa');
            $executa->GetById($this->objRequisicao->idTipoReq,$this->objRequisicao->idUoExecutante,$this->objRequisicao->getAno());

            // Remove a previsão de débito e adiciona o debito no orçamento da Uo requisitante
            $this->objRequisicao->getUoRequisitante();
            $this->objRequisicao->uoRequisitante->setTransaction($this->objRequisicao->getTransaction());

            $this->objRequisicao->uoRequisitante->addDebitoRemovePrevisao($requisita->idRubrica,$valorReal,$valorEstimado,$this->objRequisicao->getAno());
            $this->objRequisicao->Log(OP_UPD,"Requisição ".$this->objRequisicao->idRequisicao.": debito de ".$valorReal." na UO ".$this->objRequisicao->uoRequisitante->idUo);
            $this->objRequisicao->Log(OP_UPD,"Requisicao ".$this->objRequisicao->idRequisicao.": adicao da previsao de ".$valorEstimado." na UO ".$this->objRequisicao->uoRequisitante->idUo);
          
            // Lançamento interno de retorno da previsão de débito
            $lancamentoInt = $this->manager->getBusiness('adm','lancamentoint');
            $lancamentoInt->setTransaction($this->objRequisicao->getTransaction());
            $lancamentoInt->tipoLancamento = '7';
			$lancamentoInt->obs = "Retorno de previsao feito na execucao";
            $lancamentoInt->data = date("d/m/Y");                
            $lancamentoInt->valor = $valorEstimado;
            $lancamentoInt->ano = $this->objRequisicao->getAno();
            $lancamentoInt->idUoRequisitante = $this->objRequisicao->idUoRequisitante;       
            $lancamentoInt->idUoExecutante = $this->objRequisicao->idUoExecutante;
            $lancamentoInt->idRubrica = $requisita->idRubrica;           
            $lancamentoInt->idRequisicao = $this->objRequisicao->idRequisicao;
            $lancamentoInt->save();
            $lancamentoInt->Log(OP_INS,"Lançamento Interno numero ".$lancamentoInt->idLancamentoInt." gerado com sucesso para a Requisicao ".$this->objRequisicao->idRequisicao.".");

            // Adiciona o credito na Uo Executante
            $this->objRequisicao->getUoExecutante();
            $this->objRequisicao->uoExecutante->setTransaction($this->objRequisicao->getTransaction());
            $this->objRequisicao->uoExecutante->addCreditoExecutante($executa->idRubrica,$valorReal,$this->objRequisicao->getAno());
            $this->objRequisicao->Log(OP_UPD,"Requisição ".$this->objRequisicao->idRequisicao.": credito de ".$valorReal." na UO ".$this->objRequisicao->uoExecutante->idUo);

            // Lançamento interno do crédito/débito
            $lancamentoInt2 = $this->manager->getBusiness('adm','lancamentoint');
            $lancamentoInt2->setTransaction($this->objRequisicao->getTransaction());
            $lancamentoInt2->tipoLancamento = '5';
			$lancamentoInt2->obs = "Credito/debito feito na execucao.";
            $lancamentoInt2->data = date("d/m/Y");                
            $lancamentoInt2->valor = $valorReal;
            $lancamentoInt2->ano = date("Y");
            $lancamentoInt2->idUoRequisitante = $this->objRequisicao->idUoRequisitante;       
            $lancamentoInt2->idUoExecutante = $this->objRequisicao->idUoExecutante;
            $lancamentoInt2->idRubrica = $requisita->idRubrica;           
            $lancamentoInt2->idRequisicao = $this->objRequisicao->idRequisicao;
            $lancamentoInt2->save();
            $lancamentoInt2->Log(OP_INS,"Lançamento Interno numero ".$lancamentoInt2->idLancamentoInt." realizado com sucesso para a Requisicao ".$this->objRequisicao->idRequisicao);

        	$this->objRequisicao->save();
            $this->objRequisicao->endTransaction();
			$this->objRequisicao->Log(OP_UPD,"Requisicao ".$this->objRequisicao->idRequisicao." executada com sucesso.");

            //Passa para a proxima requisicao a ser executada
            if ($proximaRequisicao->idRequisicao)
    			$action_voltar = $this->manager->getActionUrl('adm','main:requisicoes',$proximaRequisicao->idRequisicao,array("form"=>"item","tipoReq"=>$proximaRequisicao->idTipoReq));
            else
                $action_voltar = $this->manager->getActionUrl('adm','main:requisicoes:find','');

    		$this->manager->information("Requisicao executada com sucesso.",$action_voltar);
		}
		catch (Exception $e)
		{
			$this->addError($e->getMessage());
      	}
	}

    public function btnLiberar_click()
	{
        $data = $this->getData();
        
        $proximaRequisicao = $this->manager->getBusiness('adm','requisicao',$this->objRequisicao->getProximaASerExecutada());

        // Se não selecionou nada
        if ($data->acaoGestorUoExec == '')
        {
    		$this->manager->Error("Você precisa selecionar uma ação a fazer (liberar ou recusar).",'');
        }       
        
        // Se selecionou liberar
        if ($data->acaoGestorUoExec == '1')
        {
        	$this->objRequisicao->setStatus('7');
            $status = "liberada";
        }

        // Se selecionou recusar
        if ($data->acaoGestorUoExec == '2')
        {
            if ($data->motivoRejeicao == '')
            {
    	    	$this->manager->Error("Você precisa informar o motivo.",'');
            }
            else
            {
                $this->objRequisicao->beginTransaction();
                $requisita = $this->manager->getBusiness('adm','requisita');
                $requisita->GetById($this->objRequisicao->idTipoReq,$this->objRequisicao->idUoRequisitante,$this->objRequisicao->getAno());
                
                // Remove a previsão de débito e adiciona o debito no orçamento da Uo requisitante
                $this->objRequisicao->getUoRequisitante();
                $this->objRequisicao->uoRequisitante->setTransaction($this->objRequisicao->getTransaction());
                $this->objRequisicao->uoRequisitante->removePrevisaoDebito($requisita->idRubrica,str_replace(',','.',$data->valorEstimado),$this->objRequisicao->getAno());
	   			$this->objRequisicao->Log(OP_UPD,"Requisicao ".$this->objRequisicao->idRequisicao.": remocao da previsao de ".$data->valorEstimado." na UO ".$this->objRequisicao->uoRequisitante->idUo);

    	        $this->objRequisicao->setMotivoRejeicao($data->motivoRejeicao);
            	$this->objRequisicao->setStatus('A');
                $status = "recusada";

                // Lançamento interno de retorno da previsão de débito
                $lancamentoInt = $this->manager->getBusiness('adm','lancamentoint');
                $lancamentoInt->setTransaction($this->objRequisicao->getTransaction());
                $lancamentoInt->tipoLancamento = '7';
				$lancamentoInt->obs = "Retorno de previsao devido a recusa pelo executor.";
                $lancamentoInt->data = date("d/m/Y");                
                $lancamentoInt->valor = $data->valorEstimado;
                $lancamentoInt->ano = date("Y");
                $lancamentoInt->idUoRequisitante = $this->objRequisicao->idUoRequisitante;       
                $lancamentoInt->idUoExecutante = $this->objRequisicao->idUoExecutante;
                $lancamentoInt->idRubrica = $requisita->idRubrica;           
                $lancamentoInt->idRequisicao = $this->objRequisicao->idRequisicao;
                $lancamentoInt->save();                
                $lancamentoInt->Log(OP_INS,"Lançamento Interno numero ".$lancamentoInt->idLancamentoInt." realizado para a Requisicao ".$this->objRequisicao->idRequisicao);
            }
        }     

		try
		{
        	$this->objRequisicao->save();
            $this->objRequisicao->endTransaction();
			$this->objRequisicao->Log(OP_UPD,"Requisicao ".$this->objRequisicao->idRequisicao." ".$status." com sucesso.");

            //passa pra prox requisicao a ser liberada
            if ($proximaRequisicao->idRequisicao)
               {
                  $action_voltar = $this->manager->getActionUrl('adm','main:requisicoes',$proximaRequisicao->idRequisicao,array("form"=>"item","tipoReq"=>$proximaRequisicao->idTipoReq));
               }
            else
               {
                  $action_voltar = $this->manager->getActionUrl('adm','main:requisicoes:find','');
               }

        	if ($data->acaoGestorUoExec == '1')
        	{
				$tipoPassagem = $this->GetFormValue('tipoTransporte');
				if($tipoPassagem == '2') //aviao
                {
					$action_rep = $this->manager->getActionURL('adm','main:requisicoes:reprequisicaopassagem', '', array("req"=>"{$this->objRequisicao->idRequisicao}"));
                    $this->manager->Confirmation("Requisição ".$status." com sucesso. Clique OK para imprimir a requisicão e CANCELAR para voltar.",$action_rep, $action_voltar);
				}
				else
                {
					$this->manager->Information("Requisição ".$status." com sucesso.", $action_voltar);
				}
			}
			else
			{
				$this->manager->information("Requisição recusada.", $action_voltar);
			}
		}
		catch (Exception $e)
		{
			$this->addError($e->getMessage());
		}       
	}

    function btnRecusar_click()
	{
		$this->setTitle("Confirmação de recusa do Gestor da UO Executante");
		$this->setData();
		$this->setReadOnly();
		
        $this->setFieldAttr('motivoRejeicao','readonly',TRUE);
 
        $this->setButtonAttr('btnLiberar','visible',FALSE);       
        $this->setButtonAttr('btnRecusar','visible',FALSE);
        $this->setButtonAttr('btnConfirmarRecusa','visible',TRUE);
		$this->setButtonAttr('btnCancelar','visible',TRUE);
	}

    public function btnConfirmarRecusa_click()
	{
		$itemRequisicao = $this->objRequisicao->getItem();		
        $data = $this->getData();
 
        $itemRequisicao->setData($data);
		$this->objRequisicao->addItem($itemRequisicao);
		$this->objRequisicao->setStatus('A');
        $this->objRequisicao->setMotivoRejeicao($data->motivoRejeicao);
		$this->objRequisicao->save();
		if ( $this->objRequisicao->CheckError() )
		{
			foreach( $this->objRequisicao->GetErrors() as $e )
			{
				$this->AddError("Informe o seguinte erro a equipe do CGCO: ".$e);
			}
		}
		else
		{
    		$this->manager->information("Requisição recusada com sucesso.",$this->manager->getActionUrl('adm','main:requisicoes:find') );
		}
	}

 	function btnAvaliar_click()
	{
        $data = $this->getData();

        // Se não selecionou o conceito
        if ($data->conceito == '')
        {
    		$this->manager->Error("Você precisa conceituar o serviço.",'');
        }
        if (($data->conceito == 2)&&($data->obs == '')) //Se for insatisfatório então informar o motivo
        {
            $this->addError("Você precisar informar o motivo da sua avaliação.");
        }
        else
        {
		    $this->setTitle("Confirmação de avaliação da requisição");
		    $this->setData();
		    $this->setReadOnly();
	
            $this->setFieldAttr('conceito','readonly',TRUE);
            $this->setFieldAttr('obs','readonly',TRUE);
        
            $this->setButtonAttr('btnAvaliar','visible',FALSE);
            $this->setButtonAttr('btnConfirmarAvaliacao','visible',TRUE);
		    $this->setButtonAttr('btnCancelar','visible',TRUE);
		}
	}
    
    public function btnConfirmarAvaliacao_click()
	{
		$itemRequisicao = $this->objRequisicao->getItem();		
        $data = $this->getData();
        //var_dump($data);
        $itemRequisicao->setData($data);
		$this->objRequisicao->addItem($itemRequisicao);

		try
		{
            // Transferencias monetárias passaram as ser feitas na execução da requisicao
            // Danilo 09/01/2006
            /*
        	if ($data->autorizarPagamento == '1')
	        {
                $this->objRequisicao->beginTransaction();    			
        	    $requisita = $this->manager->getBusiness('adm','requisita');
				$requisita->GetById($this->objRequisicao->idTipoReq,$this->objRequisicao->idUoRequisitante,$this->objRequisicao->getAno());

            	$executa = $this->manager->getBusiness('adm','executa');
	            $executa->GetById($this->objRequisicao->idTipoReq,$this->objRequisicao->idUoExecutante,$this->objRequisicao->getAno());

            	// Remove a previsão de débito e adiciona o debito no orçamento da Uo requisitante
            	$this->objRequisicao->getUoRequisitante();                
                //if ($this->objRequisicao->uoRequisitante->temSaldoByRubrica($requisita->idRubrica,$itemRequisicao->valorReal,$itemRequisicao->valorEstimado))
				if (true)
                {
                    $this->objRequisicao->setStatus('E');
                    $this->objRequisicao->uoRequisitante->setTransaction($this->objRequisicao->getTransaction());
                    
                    $this->objRequisicao->uoRequisitante->addDebitoRemovePrevisao($requisita->idRubrica,$itemRequisicao->valorReal,$data->valorEstimado,$this->objRequisicao->getAno()); 
                    
                    $this->objRequisicao->Log(OP_UPD,"Requisicao ".$this->objRequisicao->idRequisicao.": debito de ".$itemRequisicao->valorReal." na UO ".$this->objRequisicao->uoRequisitante->idUo);
                    $this->objRequisicao->Log(OP_UPD,"Requisicao ".$this->objRequisicao->idRequisicao.": remocao da previsao de ".$data->valorEstimado." na UO ".$this->objRequisicao->uoRequisitante->idUo);

                    // Lançamento interno de retorno da previsão de débito
                    $lancamentoInt = $this->manager->getBusiness('adm','lancamentoint');
                    $lancamentoInt->setTransaction($this->objRequisicao->getTransaction());
                    $lancamentoInt->tipoLancamento = '7';
                    $lancamentoInt->data = date("d/m/Y");                
                    $lancamentoInt->valor = $data->valorEstimado;
                    $lancamentoInt->ano = date("Y");
                    $lancamentoInt->idUoRequisitante = $this->objRequisicao->idUoRequisitante;       
                    $lancamentoInt->idUoExecutante = $this->objRequisicao->idUoExecutante;
                    $lancamentoInt->idRubrica = $requisita->idRubrica;           
                    $lancamentoInt->idRequisicao = $this->objRequisicao->idRequisicao;
                    $lancamentoInt->save();
                    $lancamentoInt->Log(OP_INS,"Lançamento Interno numero ".$lancamentoInt->idLancamentoInt." realizado para a Requisicao ".$this->objRequisicao->idRequisicao);
                    
                    // Adiciona o credito na Uo Executante
                    $this->objRequisicao->getUoExecutante();
                    $this->objRequisicao->uoExecutante->setTransaction($this->objRequisicao->getTransaction());
                    $this->objRequisicao->uoExecutante->addCreditoExecutante(trim($executa->idRubrica),$itemRequisicao->valorReal,$this->objRequisicao->getAno());
                    $this->objRequisicao->Log(OP_UPD,"Requisicao ".$this->objRequisicao->idRequisicao.": credito de ".$itemRequisicao->valorReal." na UO ".$this->objRequisicao->uoExecutante->idUo);

                    // Lançamento interno do crédito/débito
                    $lancamentoInt2 = $this->manager->getBusiness('adm','lancamentoint');
                    $lancamentoInt2->setTransaction($this->objRequisicao->getTransaction());
                    $lancamentoInt2->tipoLancamento = '5';
                    $lancamentoInt2->data = date("d/m/Y");                
                    $lancamentoInt2->valor = str_replace('.',',',$itemRequisicao->valorReal);
                    $lancamentoInt2->ano = date("Y");
                    $lancamentoInt2->idUoRequisitante = $this->objRequisicao->idUoRequisitante;       
                    $lancamentoInt2->idUoExecutante = $this->objRequisicao->idUoExecutante;
                    $lancamentoInt2->idRubrica = trim($requisita->idRubrica);           
                    $lancamentoInt2->idRequisicao = $this->objRequisicao->idRequisicao;
                    $lancamentoInt2->save();
                    
                    $lancamentoInt2->Log(OP_INS,"Lançamento Interno numero ".$lancamentoInt2->idLancamentoInt." realizado para a Requisicao ".$this->objRequisicao->idRequisicao);
            	}
            	else                
                {
                    $this->manager->Error("Esta UO não possui orçamento definido para esta rubrica.");
                }
           	}
        	else
        	{
    			$this->objRequisicao->setStatus('D');
        	}
            */
            $this->objRequisicao->setStatus('G'); //Finalizada            
        	$this->objRequisicao->save();
	        $this->objRequisicao->endTransaction();
			$this->objRequisicao->Log(OP_UPD,"Requisicao ".$this->objRequisicao->idRequisicao." avaliada com sucesso.");
    		$this->manager->information("Requisição avaliada com sucesso.",$this->manager->getActionUrl('adm','main:requisicoes:find') );
		}
		catch (Exception $e)
		{
			$this->addError($e->getMessage());
		}

	}
    
 	function btnRetornaExecucao_click()
	{
		$this->setTitle("Confirmação de retorno de execução");
		$this->setData();
		$this->setReadOnly();
		
        $this->setFieldAttr('bilhete2','readonly',TRUE);
        $this->setFieldAttr('valorReal','readonly',TRUE);
        $this->setFieldAttr('ocorrencias','readonly',TRUE);
        $this->setFieldAttr('notaFiscal','readonly',TRUE);
        $this->setFieldAttr('dataNotaFiscal','readonly',TRUE);
        $this->setFieldAttr('idEmpenho','readonly',TRUE);       
        $this->setFieldAttr('lkpEmpenho','readonly',TRUE);
        $this->setFieldAttr('novoValorReal','readonly',TRUE);
       
        $this->setButtonAttr('btnRetornaExecucao','visible',FALSE);
        $this->setButtonAttr('btnConfirmarRetorno','visible',TRUE);
		$this->setButtonAttr('btnCancelar','visible',TRUE);
	}
    
	public function btnConfirmarRetorno_click()
	{
        $cf = new MCurrencyFormatter();

		$this->objRequisicao->retrieveAssociation('uoRequisitante');
		$this->objRequisicao->retrieveAssociation('uoExecutante');

        $this->objRequisicao->beginTransaction();

		$itemRequisicao = $this->objRequisicao->getItem();	        
        $data = $this->getData();

        $valorAntigo = $cf->toDecimal($itemRequisicao->valorReal); 
        $valorAtual = $cf->toDecimal($data->novoValorReal);
        $data->valorReal = $cf->toDecimal($data->novoValorReal); //atualiza valor real
        $valorOp = ($valorAtual - $valorAntigo);

        // Se ja os lançamentos já foram feitos então deve abortar a repetição da operação
        if ($this->objRequisicao->checkLancamento('6',$valorAtual))
        {
            return true;
        }

        if ($itemRequisicao->tipoTransporte != 2)  //se nao for de aviao, recebe nº bilhete
        {
           $data->bilhete = $data->bilhete2;
        }

        // Gerando os campos dataHora de entrada e saída
        $data->dataHoraEntrada = $data->dataEntrada." ".$data->horaEntrada.":00";
        $data->dataHoraSaida = $data->dataSaida." ".$data->horaSaida.":00"; 

        $itemRequisicao->setData($data);
		$this->objRequisicao->addItem($itemRequisicao);

		try
		{
	        // Se a requisição já foi confirmada, então é necessário também um estorno no orçamento interno
            $this->objRequisicao->uoRequisitante->setTransaction($this->objRequisicao->getTransaction());
            $this->objRequisicao->uoExecutante->setTransaction($this->objRequisicao->getTransaction());

            $requisita = $this->manager->getBusiness('adm','requisita');
            $requisita->GetById($this->objRequisicao->idTipoReq,$this->objRequisicao->idUoRequisitante,$this->objRequisicao->getAno());
            $idRubrica = trim($requisita->idRubrica);
            
            $executa = $this->manager->getBusiness('adm','executa');
            $executa->GetById($this->objRequisicao->idTipoReq,$this->objRequisicao->idUoExecutante,$this->objRequisicao->getAno());

            // Comentado temporariamente (mudancas no retorno)
            // Desfaz o lançamento financeiro da execução anterior
            // $this->objRequisicao->uoExecutante->removeCreditoExecutante($idRubrica,$valorAntigo,$this->objRequisicao->getAno());
            // $this->objRequisicao->uoRequisitante->removeDebito($idRubrica,$valorAntigo,$this->objRequisicao->getAno());
                         
            // Faz o lançamento financeiro com o novo valor
            $this->objRequisicao->uoRequisitante->addDebito($idRubrica,$valorOp,$this->objRequisicao->getAno());
            $this->objRequisicao->uoExecutante->addCreditoExecutante($executa->idRubrica,$valorOp,$this->objRequisicao->getAno());
  
            $lancamentoInt = $this->manager->getBusiness('adm','lancamentoint');
            $lancamentoInt->setTransaction($this->objRequisicao->getTransaction());
            $lancamentoInt->tipoLancamento = '6'; //Estorno de Débito/Crédito
			$lancamentoInt->obs = "Estorno de credito/debito feito pelo executante.";
            $lancamentoInt->data = date("d/m/Y");                
            $lancamentoInt->valor = $valorAtual;
            $lancamentoInt->ano = date("Y");
            $lancamentoInt->idUoRequisitante = $this->objRequisicao->idUoRequisitante;       
            $lancamentoInt->idUoExecutante = $this->objRequisicao->idUoExecutante;
            $lancamentoInt->idRubrica = $requisita->idRubrica;           
            $lancamentoInt->idRequisicao = $this->objRequisicao->idRequisicao;
            $lancamentoInt->save();           
            $lancamentoInt->Log(OP_INS,"Lançamento Interno numero ".$lancamentoInt->idLancamentoInt." realizado para a Requisicao ".$this->objRequisicao->idRequisicao);

            $this->objRequisicao->setStatus('9');

        	$this->objRequisicao->save();
            $this->objRequisicao->endTransaction();
			$this->objRequisicao->Log(OP_UPD,"Requisicao ".$this->objRequisicao->idRequisicao." retornada com sucesso");
    		$this->manager->information("Requisição retornada com sucesso.",$this->manager->getActionUrl('adm','main:requisicoes:find') );
		}
		catch (Exception $e)
		{
			$this->addError($e->getMessage());
		}
	}
    
    public function btnAnular_click()
	{
    	$proximaRequisicao = $this->manager->getBusiness('adm','requisicao',$this->objRequisicao->getProximaASerExecutada());
	
		$itemRequisicao = $this->objRequisicao->getItem();
		$this->objRequisicao->addItem($itemRequisicao);
		$this->objRequisicao->setStatus('A');
        $requisita = $this->manager->getBusiness('adm','requisita');
        $requisita->GetById($this->objRequisicao->idTipoReq,$this->objRequisicao->idUoRequisitante,$this->objRequisicao->getAno());
		try
		{
            $this->objRequisicao->beginTransaction();
			$this->objRequisicao->retrieveAssociation('uoRequisitante');
            $this->objRequisicao->uoRequisitante->setTransaction($this->objRequisicao->getTransaction());
            $this->objRequisicao->uoRequisitante->removePrevisaoDebito($requisita->idRubrica,$itemRequisicao->valorEstimado,$this->objRequisicao->getAno());
   			$this->objRequisicao->Log(OP_UPD,"Requisicao ".$this->objRequisicao->idRequisicao.": remocao da previsao de ".$data->valorEstimado." na UO ".$this->objRequisicao->uoRequisitante->idUo);
        	$this->objRequisicao->save();

            // Lançamento interno de retorno da previsão de débito
            $lancamentoInt = $this->manager->getBusiness('adm','lancamentoint');
            $lancamentoInt->setTransaction($this->objRequisicao->getTransaction());
            $lancamentoInt->tipoLancamento = '7';
			$lancamentoInt->obs = "Retorno de previsao devido a anulacao do executante.";
            $lancamentoInt->data = date("d/m/Y");                
            $lancamentoInt->valor = $itemRequisicao->valorEstimado;
            $lancamentoInt->ano = date("Y");
            $lancamentoInt->idUoRequisitante = $this->objRequisicao->idUoRequisitante;       
            $lancamentoInt->idUoExecutante = $this->objRequisicao->idUoExecutante;
            $lancamentoInt->idRubrica = $requisita->idRubrica;           
            $lancamentoInt->idRequisicao = $this->objRequisicao->idRequisicao;
            $lancamentoInt->save();            
            $lancamentoInt->Log(OP_INS,"Lançamento Interno numero ".$lancamentoInt->idLancamentoInt." realizado para a Requisicao ".$this->objRequisicao->idRequisicao);
            
            $this->objRequisicao->endTransaction();
            
			$this->objRequisicao->Log(OP_UPD,"Requisicao ".$this->objRequisicao->idRequisicao." anulada.");
            //Passa para a proxima requisicao a ser anulada
				if ($proximaRequisicao->idRequisicao)
    				$action_voltar = $this->manager->getActionUrl('adm','main:requisicoes',$proximaRequisicao->idRequisicao,array("form"=>"item","tipoReq"=>$proximaRequisicao->idTipoReq));
		        else
				    $action_voltar = $this->manager->getActionUrl('adm','main:requisicoes:find','');

			$this->manager->information("Requisição anulada com sucesso.",$action_voltar);
		}
		catch (Exception $e)
		{
			$this->addError($e->getMessage());
		}
	}
    
	public function btnEstornar_click()
	{
		$this->objRequisicao->retrieveAssociation('uoRequisitante');
		$this->objRequisicao->retrieveAssociation('uoExecutante');
        $this->objRequisicao->beginTransaction();

		$itemRequisicao = $this->objRequisicao->getItem();	        
        $data = $this->getData();
        $itemRequisicao->setData($data);
		$this->objRequisicao->addItem($itemRequisicao);

		try
		{
	        // Se a requisição já foi confirmada, então é necessário também um estorno no orçamento interno
    	    if ($this->objRequisicao->status == 'E')
        	{
                $this->objRequisicao->uoRequisitante->setTransaction($this->objRequisicao->getTransaction());                
                $this->objRequisicao->uoExecutante->setTransaction($this->objRequisicao->getTransaction());

            	$requisita = $this->manager->getBusiness('adm','requisita');
	            $requisita->GetById($this->objRequisicao->idTipoReq,$this->objRequisicao->idUoRequisitante,$this->objRequisicao->getAno());
                $idRubrica = trim($requisita->idRubrica);
                
            	$executa = $this->manager->getBusiness('adm','executa');
	            $executa->GetById($this->objRequisicao->idTipoReq,$this->objRequisicao->idUoExecutante,$this->objRequisicao->getAno());

                // Desfaz o lançamento financeiro da execução anterior
                $this->objRequisicao->uoExecutante->removeCreditoExecutante($idRubrica,$itemRequisicao->valorReal,$this->objRequisicao->getAno());
	            $this->objRequisicao->uoRequisitante->removeDebito($idRubrica,$itemRequisicao->valorReal,$this->objRequisicao->getAno());
                    	     
        	    // Faz o lançamento financeiro com o novo valor
	            // $this->objRequisicao->uoRequisitante->addDebito($idRubrica,$valorAtual,$this->objRequisicao->getAno());
	            // $this->objRequisicao->uoExecutante->addCreditoExecutante($executa->idRubrica,$valorAtual,$this->objRequisicao->getAno());
      
    	        $lancamentoInt = $this->manager->getBusiness('adm','lancamentoint');
                $lancamentoInt->setTransaction($this->objRequisicao->getTransaction());
        	    $lancamentoInt->tipoLancamento = '6'; //Estorno de Débito/Crédito
				$lancamentoInt->obs = "Estorno de credito/debito feito pelo executor.";
            	$lancamentoInt->data = date("d/m/Y");                
	            $lancamentoInt->valor = $itemRequisicao->valorReal;
    	        $lancamentoInt->ano = date("Y");
        	    $lancamentoInt->idUoRequisitante = $this->objRequisicao->idUoRequisitante;       
            	$lancamentoInt->idUoExecutante = $this->objRequisicao->idUoExecutante;
	            $lancamentoInt->idRubrica = $requisita->idRubrica;           
    	        $lancamentoInt->idRequisicao = $this->objRequisicao->idRequisicao;
        	    $lancamentoInt->save();           
				$lancamentoInt->Log(OP_INS,"Lançamento Interno numero ".$lancamentoInt->idLancamentoInt." realizado para a Requisicao ".$this->objRequisicao->idRequisicao);

                $this->objRequisicao->setStatus('H');
        	}

        	$this->objRequisicao->save();
            $this->objRequisicao->endTransaction();
			$this->objRequisicao->Log(OP_UPD,"Requisicao ".$this->objRequisicao->idRequisicao." estornada com sucesso");
    		$this->manager->information("Requisição estornada com sucesso.",$this->manager->getActionUrl('adm','main:requisicoes:find') );
		}
		catch (Exception $e)
		{
			$this->addError($e->getMessage());
		}
	}
}
?>
