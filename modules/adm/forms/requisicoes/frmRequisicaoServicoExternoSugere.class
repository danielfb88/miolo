
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?
class frmRequisicaoServicoExternoSugere extends MForm
{
	protected $objRequisicao;
    function __construct($objRequisicao)
    {
		$this->objRequisicao = $objRequisicao;
        parent::__construct('Solicitar Novo Serviço');
        $this->EventHandler();
    }
    function CreateFields()
    {
        $usuario = $this->manager->getBusiness('common','usuario');
        $usuario->getById($this->manager->GetLogin()->idkey);
        $fields = array(
            new MHiddenField('form','sugere'),
            new MMultiLineField('descricao','','Descricao',500,6,50,'Máximo 500'),
            new MSeparator('Dados para contato'),
            new MTextField('nome',$usuario->pessoa->nome,'Nome',52),
            new MTextField('telefone','','Telefone',12),
            new MTextField('email',$usuario->pessoa->email,'Email',52),
        );
        $this->SetFields($fields);
        $this->nome->setReadOnly(true);
        $validators = array(
			new MRequiredValidator('descricao'),
            new MPhoneValidator('telefone','','required'),
            new MEmailValidator('email','','required'),
		);
		$this->SetValidators($validators);
        $this->addButton(new MButton('btnSugere','Solicitar Servico'));
        $this->addButton(new MButton('btnVoltar','Voltar','return'));
    }
    function btnSugere_click()
    {
        $data = $this->GetData();
        $usuario = $this->manager->getBusiness('common','usuario');
        $usuario->getById($this->manager->GetLogin()->idkey);
        $servico = $this->manager->getBusiness('adm','novoservico');
        try
        {
            $servico->beginTransaction();
            $servico->setData($data);
            $servico->setStatus(1);
            $servico->dataPedido = date('d/m/Y');
            $servico->setUsuario($this->manager->getLogin()->idkey);
            $servico->save();
            if ($data->email != $usuario->pessoa->email)
            {
                $usuario->pessoa->setTransaction($servico->getTransaction());
                $usuario->pessoa->email = $data->email;
                $usuario->pessoa->save();
            }
            $servico->endTransaction();
            $servico->Log(OP_INS,'Servico incluído ['.$servico->idNovoServico.']');
   		    $this->manager->information("Solicitação de novo servico enviada com sucesso.",$this->manager->getActionUrl('adm','main:requisicoes',$this->objRequisicao->idRequisicao,array("form"=>"item","idTipoReq"=>$this->objRequisicao->idTipoReq)) );
        }
        catch (Exception $e)
        {
            $this->AddError($e->GetMessage());
        }
     }
}
?>
