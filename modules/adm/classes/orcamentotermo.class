
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

	<?php
	class BusinessAdmOrcamentotermo extends Business
	{
	
	var $idlicitacao;
	var $item;
	var $numpro;
	var $idmaterial;
	var $descricao;
	var $quantpedida;
	var $precoestimado;
	var $campus;
	var $idusuario;
	var $empresa1;
	var $orcamento1;
	var $orcamento2;
	var $empresa3;
	var $orcamento3;
	var $empresa2;
	var $valortotal;
	var $termoref;
	var $processo;
	//var $data;
		function __construct($data = null)
		{
			parent::__construct('sigaept', $data);
		}

		function getById($id)
		{
			$this->orcterm = $id;
			$this->retrieve();
			return $this;
		}



	// recebe um "transfer object" e preenche os atributos
	function setData($data)
		{

	$this->idlicitacao = $data->idlicitacao;
	$this->item = $data->item;
	$this->idinstituicao = $data->idinstituicao;
	$this->empresa1 = $data-> empresa1;
	$this->empresa2 = $data-> empresa2;
	$this->empresa3 = $data-> empresa3;
	$this->orcamento1 = $data-> orcamento1;
	$this->orcamento2 = $data-> orcamento2;
	$this->orcamento3 = $data-> orcamento3;
	$this->termoref = $data-> termoref;

	$this->datalimite = $data->datalimite;
	//taka
	$this->iduser = $data->iduser;
	//taka

		}

	function GetData()
		{
			$data = new FormData();
	/*		$data->idlicitacao       = $this->getFieldValue('idlicitacao');
			$data->item  = $this->getFieldValue('item');
			$data->numpro     = $this->getFieldValue('numpro');
			$data->idmaterial        = $this->getFieldValue('idmaterial');
	$data->descricao = $this->getFieldValue('descricao');
			$data->quantpedida        = $this->getFieldValue('quantpedida');
			$data->precoestimado        = $this->getFieldValue('precoestimado');
			$data->campus         = $this->getFieldValue('campus');
	*/
			$data->empresa1 = $this->getFieldValue('empresa1');
			$data->empresa2 = $this->getFieldValue('empresa2');       
			$data->empresa3 = $this->getFieldValue('empresa3');
			$data->orcamento1 = $this->getFieldValue('orcamento1');
			$data->orcamento2 = $this->getFieldValue('orcamento2');
			$data->orcamento3 = $this->getFieldValue('orcamento3');
			$data->termoref = $this->getFieldValue('termoref');
			return $data;
		}


		function listAll()
		{
			$criteria =  $this->getCriteria();
			return $criteria->retrieveAsQuery();
		}

	 function Update($IdLicitacao,$item,$stat=false)
		{
			$sql = new sql();
		if ($stat == true)
		{
			$sql->SetColumns('
				status
					');
		$sql->SetTables('
				ad_orcamentotermo
					');



			$sql->SetWhere("itemdef = '$item'");
			$sql->SetWhere("idlicitacao ='$IdLicitacao'" );


		$values = array(
		$this->status,
			);

		}
		else
		{	$sql->SetColumns('
				empresa1,
				empresa2,
				empresa3,
				orcamento1,
				orcamento2,
				orcamento3,
				termoref,
				status
			');
				
			$sql->SetTables('
				ad_orcamentotermo
					');



			$sql->SetWhere("itemdef = '$item'");
			$sql->SetWhere("idlicitacao ='$IdLicitacao'" );


		$values = array(
	$this->empresa1,
	$this->empresa2,
	$this->empresa3,
	$this->orcamento1,
	$this->orcamento2,
	$this->orcamento3,
	$this->termoref,
	$this->status,
			);
		}
			$ok = $this->Execute($sql->Update($values));
			return $ok;
		}
		
		function AlteraTermo($IdLicitacao,$item)
			{
			$sql = new sql();
				$sql->SetColumns('
				empresa1,
				empresa2,
				empresa3,
				orcamento1,
				orcamento2,
				orcamento3,
				termoref				
								');
				
			$sql->SetTables	('
				ad_orcamentotermo
							');



			$sql->SetWhere("itemdef = '$item'");
			$sql->SetWhere("idlicitacao ='$IdLicitacao'" );


		$values = array(
	$this->empresa1,
	$this->empresa2,
	$this->empresa3,
	$this->orcamento1,
	$this->orcamento2,
	$this->orcamento3,
	$this->termoref,
				);
				$ok = $this->Execute($sql->Update($values));
			return $ok;

			}
		
		function getOrcTerm($IdLicitacao,$item)
		{
			$criteria = $this->getCriteria();

		// Campos selecionados

		//   $criteria->addColumnAttribute('ad_orctermo.idmaterial');
		//        $criteria->addColumnAttribute('campus',$campus);
		//$criteria->addColumnAttribute('ad_orctermo.descricao');
		/*
		$criteria->addColumnAttribute('descricao');
		$criteria->addColumnAttribute('quantpedida');
		$criteria->addColumnAttribute('campus');
		*/
		//	$criteria->addColumnAttribute('campus');			
		// Condição  	
		$criteria->addCriteria('ad_orcamentotermo.idlicitacao','=',"$IdLicitacao");
		$criteria->addCriteria('ad_orcamentotermo.itemdef','=',"$item");
		$data = $criteria->retrieveAsQuery();
		return $data;
		//return $criteria->retrieveAsQuery() ;
		}


		function RemoveOrcTermo($IdLicitacao,$item)

		{
		$sql = new sql();
			$sql->SetColumns('
				itemdef
			');
			$sql->SetTables('
				ad_orcamentotermo
			');




			$sql->SetWhere("itemdef = '$item' and idlicitacao ='$IdLicitacao'" );

			
			$values = array('0',);
			$this->Execute($sql->Update($values));
	//var_dump($values);
			return $ok;

		}



	function RenumeraOrcTerm($licitacao,$item,$newitem)
	{
		$sql = new sql();
			$sql->SetColumns('
				itemdef
			');
			$sql->SetTables('
				ad_orcamentotermo
			');



			$sql->SetWhere("itemdef = '$item'");
			$sql->SetWhere("idlicitacao ='$licitacao'" );


		$values = array(
		$newitem,
			);

	$this->Execute($sql->Update($values));
	
			return $ok;

		}


	 function ContarTermoByLicitacao($licitacao)
		{
		
			 $criteria = $this->getCriteria();
		$criteria->addColumnAttribute('count(*)');
		$criteria->addCriteria('ad_orcamentotermo.idLicitacao','=',$licitacao);
		$criteria->addCriteria('ad_orcamentotermo.itemdef','is not','null');
		$criteria->addCriteria('ad_orcamentotermo.itemdef','!=','0');

	   $query = $criteria->retrieveAsQuery();
		
	return $query->result[0];
	}

	function GetItemDefByLicitacao($licitacao)
		{
		
			 $criteria = $this->getCriteria();
		$criteria->addColumnAttribute('itemdef');
		$criteria->addCriteria('idLicitacao','=',$licitacao);
		$criteria->addCriteria('itemdef','is not','null');
		$criteria->addCriteria('itemdef','!=','0');	
		$criteria->addOrderAttribute('item');
		$query = $criteria->retrieveAsQuery();
	  //  var_dump($criteria);
	return $query;
	}


	function ReordenaOrcTerm ($licitacao,$numitem)

		{
		global $MIOLO;

			//$OrcTermo = $MIOLO->getBusiness('adm', 'orcamentotermo');

			$NumTerm = $this->ContarTermoByLicitacao($licitacao);
			$Query = $this->GetItemDefByLicitacao($licitacao);

				foreach ( $Query->result as $o )
					{
						if (($o[0] < $NumTerm ) && ($o[0] != null) && ($o[0] != 0) && ($o[0] > $numitem))
						{
						//    var_dump('idlic',$idLicitacao,'item',$o->result);
					//	var_dump('valor',$o,'result',$o->result,'valor[]',$o[0]);
						
						$novovalor = $o[0]-1;
							$this->RenumeraOrcTerm($licitacao,$o[0],$novovalor);
							
						}
					}


		}
		
	function listLicitaByUsuario($IdUsuario,$orcadm=false)
			{

						$sql = new sql('DISTINCT o.idlicitacao, l.numero,l.numpro,p.titulo','ad_orcamentotermo o, ad_licitacao l,ad_processo p',"l.numpro = p.numpro and o.idlicitacao = l.idlicitacao and iduser = $IdUsuario and itemdef is not null");
			if ($orcadm == false)
				{
				$sql->SetWhere("o.status in('0','1','2')" );
				}
			//$this->Execute($sql->Select());
			/*
				$criteria =  $this->getCriteria();
		$criteria->addColumnAttribute('DISTINCT idlicitacao');
		$criteria->addColumnAttribute('idlicitacao');
		$criteria->addCriteria('iduser','=',"$IdUsuario");
		$criteria->addCriteria('itemdef','is not',"null");
		//$criteria->addOrderAttribute('idlicitacao');
		$query = $criteria->retrieveAsQuery();
		*/
		$query = $this->ObjQuery($sql->Select());
				return $query;
			}	

	function listItensByLicitacao($IdLicitacao,$IdUsuario,$orcadm=false)
			{
			$sql = new sql('t.itemdef,t.itemdef as item,CAST ( ((t.orcamento1 + t.orcamento2 + t.orcamento3)/3 * i.quantpedida)  as numeric(12,2)) as Valor, (i.precoestimado * i.quantpedida) as Estimado, t.status,i.idrequisicao'
			,'ad_orcamentotermo t, ad_itemreq i',
			"t.idlicitacao = i.idlicitacao and i.item = t.itemdef and iduser = $IdUsuario and itemdef is not null and t.idlicitacao = '$IdLicitacao' ",'t.itemdef');
			
				if ($orcadm == false)
				{
				$sql->SetWhere("t.status in('0','1','2')" );
				}			
			/*
				$criteria =  $this->getCriteria();
		$criteria->addColumnAttribute('itemdef');
		$criteria->addColumnAttribute('itemdef as ItemProc');
		$criteria->addCriteria('iduser','=',$IdUsuario);
		$criteria->addCriteria('idlicitacao','=',$IdLicitacao);	
		$criteria->addCriteria('itemdef','is not',"null");
		$criteria->addOrderAttribute('item');
		$query = $criteria->retrieveAsQuery();
				return $criteria->retrieveAsQuery();
			*/
			
			$query = $this->ObjQuery($sql->Select());
			
				return $query;
			}	
			
				function listItensBibByLicitacao($IdLicitacao,$IdUsuario,$orcadm=false)
			{
			$sql = new sql('t.itemdef,t.itemdef as item,CAST ( ((t.orcamento1 + t.orcamento2 + t.orcamento3)/3 * i.quantpedida)  as numeric(12,2)) as Valor, (i.precoestimado * i.quantpedida) as Estimado, t.status,i.idrequisicao'
			,'ad_orcamentotermo t, ad_itemreqbib i',
			"t.idlicitacao = i.idlicitacao and i.item = t.itemdef and iduser = $IdUsuario and itemdef is not null and t.idlicitacao = '$IdLicitacao'",'t.itemdef');
			
				if ($orcadm == false)
				{
				$sql->SetWhere("t.status in('0','1','2')" );
				}		
				
			$query = $this->ObjQuery($sql->Select());
				return $query;
			}	
			
	function getGetInfoOrcTerm($IdLicitacao,$item,$IdRequisicao)
			{
			$sql = new sql('m.idmaterial, m.descricao,i.quantpedida,i.precoestimado,l.numpro,CAST  ((i.quantpedida * i.precoestimado)  as numeric(12,2)) as valortotal,i.idrequisicao,o.status','ad_itemreq i, ad_material m ,ad_orcamentotermo o, ad_licitacao l',"o.idlicitacao = i.idlicitacao and o.itemdef = i.item and i.idmaterial = m.idmaterial and o.idlicitacao = l.idlicitacao 
			and i.idlicitacao = '$IdLicitacao' and i.item = '$item' and i.idrequisicao = '$IdRequisicao'");
			
			$query = $this->ObjQuery($sql->Select());
			return $query;
			}
			
			function getGetInfoBibOrcTerm($IdLicitacao,$item,$IdRequisicao)
			{
			$sql = new sql('m.idmaterial, m.descricao,i.quantpedida,i.precoestimado,l.numpro,CAST  ((i.quantpedida * i.precoestimado)  as numeric(12,2)) as valortotal,i.idrequisicao,o.status',
			'ad_itemreqbib i, ad_material m ,ad_orcamentotermo o, ad_licitacao l',
			"o.idlicitacao = i.idlicitacao and o.itemdef = i.item and i.idmaterial = m.idmaterial 
			and o.idlicitacao = l.idlicitacao and i.idlicitacao = '$IdLicitacao' and i.item = '$item' and i.idrequisicao = '$IdRequisicao'");
			
			$query = $this->ObjQuery($sql->Select());
			return $query;
			}
			
			
	function listLicitacaoByCampus($Campus)
			{
			$sql = new sql('DISTINCT o.idlicitacao,l.numero','ad_orcamentotermo o,ad_licitacao l',
			"o.idinstituicao = '$Campus' and o.idlicitacao = l.idlicitacao and o.status in (0,1,2)");
			
			$query = $this->ObjQuery($sql->Select());
			return $query;
			}	

function listLicitacaoByCampusAndAno($Campus,$Ano)
			{
			$sql = new sql('DISTINCT o.idlicitacao,l.numero','ad_orcamentotermo o,ad_licitacao l',
"o.idinstituicao = '$Campus' and o.idlicitacao = l.idlicitacao and (substr(l.numero,LENGTH(l.numero)-3,LENGTH(l.numero))) = '$Ano' ");
			
			$query = $this->ObjQuery($sql->Select());
			return $query;
			}					
	
	function listItensByLibLicitacao($IdLicitacao,$IdInstituicao = 0)
			{
			$sql = new sql('distinct o.itemdef,p.nome,o.datalimite,o.status, m.descricao',' ad_orcamentotermo o inner join ad_itemreq ir on o.idlicitacao=ir.idlicitacao inner join ad_material m on ir.idmaterial=m.idmaterial left join cm_usuario u on o.iduser = u.idusuario left join cm_pessoa p on p.idpessoa = u.idpessoa',
			"o.idlicitacao = '$IdLicitacao' and o.itemdef is not null and ir.item = o.item",'o.itemdef');
				if ($IdInstituicao != 0)
				{
				$sql->SetWhereAnd("o.idinstituicao = $IdInstituicao");
				}
				$query = $this->ObjQuery($sql->Select());
				return $query;
				}
	
	
	
	function LiberarOrcTerm($IdLicitacao,$item,$limite = 0,$iduser = 0)
		{
			$sql = new sql();
		
		$sql->SetTables('
				ad_orcamentotermo
					');



			$sql->SetWhere("itemdef = '$item'");
			$sql->SetWhere("idlicitacao ='$IdLicitacao'" );
		
		if ($limite != 0 and $iduser!= 0)
			{
			$sql->SetColumns('
				datalimite,
				iduser
					');
		

		$values = array($limite,$iduser
			);
		}else if ($limite != 0)
		{
			$sql->SetColumns('
				datalimite
									');
		

		$values = array($limite
			);
		
		}else if ($iduser!= 0)
			{
			
			$sql->SetColumns('
				iduser
									');
		

		$values = array($iduser
			);
			}
		
			
			$ok = $this->Execute($sql->Update($values));
			return $ok;
		}

	function GeraOrcTerm($IdLicitacao)

		{
		global $MIOLO, $module,$item, $page, $theme, $action;
		
//Campo Item
		$maxitem = $this->MaiorItem($IdLicitacao);
		$maxitem = $maxitem->result[0][0];

		if ($maxitem == null)
		{
		$maxitem = 0;
		}

//Campo ItemDef
		$maxitemdef = $this->MaiorItemDef($IdLicitacao);
		$maxitemdef = $maxitemdef->result[0][0];

		if ($maxitemdef == null)
		{
		$maxitemdef = 0;
		}



		//var_dump($maxitem);
		$sqlSel = new sql("l.idlicitacao, i.item+'$maxitem', s.idinstituicao, i.item, '0'",
		'ad_licitacao l, ad_itemlicitacao i, ad_itemreq t, ad_requisicao r, ad_uo u, cm_setor s',
		"l.idlicitacao = i.idlicitacao and 
		i.idlicitacao = t.idlicitacao and 
		i.item = t.item and 
		t.idrequisicao = r.idrequisicao and 
		r.iduoreq = u.iduo and
		u.idsetor = s.idsetor
		and i.item > '$maxitemdef'
		and l.idlicitacao  = '$IdLicitacao'
		and l.status = '1'");
			
			$query = $this->ObjQuery($sqlSel->Select());
	

		if ($query->result !== null)
		{

		 foreach ($query->result as $key => $rs)
            	{

		
		$sql = new sql();
		$sql->SetColumns('
			idlicitacao,
			item,
			idinstituicao,
			itemdef,
			status
		');
		$sql->SetTables('ad_orcamentotermo');

		$values= array(
		$query->result[$key][0], 		//IdLicitação
		$query->result[$key][1],		//Item
		$query->result[$key][2],		//IdInstituição
		$query->result[$key][3],		//ItemDef
		$query->result[$key][4],		//Status
		);

		$ok = @$this->Execute($sql->Insert($values));
		
		
		}
			$MIOLO->Information("A operação foi efetuada com sucesso.",$MIOLO->getActionUrl('adm','main:licitacoes',$IdLicitacao,array('form'=>'orctermo')));					
		}else
		{
			$MIOLO->Information("Não existem itens a serem gerados.",$MIOLO->getActionUrl('adm','main:licitacoes',$IdLicitacao,array('form'=>'orctermo')));			
		}
		
		
		}

	function GeraOrcTermLivro($IdLicitacao)

		{
		global $MIOLO, $module,$item, $page, $theme, $action;
		
//Campo Item
		$maxitem = $this->MaiorItem($IdLicitacao);
		$maxitem = $maxitem->result[0][0];

		if ($maxitem == null)
		{
		$maxitem = 0;
		}

//Campo ItemDef
		$maxitemdef = $this->MaiorItemDef($IdLicitacao);
		$maxitemdef = $maxitemdef->result[0][0];

		if ($maxitemdef == null)
		{
		$maxitemdef = 0;
		}



		//var_dump($maxitem);
		$sqlSel = new sql("l.idlicitacao, i.item+'$maxitem', s.idinstituicao, i.item, '0'",
		'ad_licitacao l, ad_itemlicitacao i, ad_itemreqbib t, ad_requisicao r, ad_uo u, cm_setor s',
		"l.idlicitacao = i.idlicitacao and 
		i.idlicitacao = t.idlicitacao and 
		i.item = t.item and 
		t.idrequisicao = r.idrequisicao and 
		r.iduoreq = u.iduo and
		u.idsetor = s.idsetor
		and i.item > '$maxitemdef'
		and l.idlicitacao  = '$IdLicitacao'
		and l.status = '1'");
			
			$query = $this->ObjQuery($sqlSel->Select());
	

		if ($query->result !== null)
		{

		 foreach ($query->result as $key => $rs)
            	{

		
		$sql = new sql();
		$sql->SetColumns('
			idlicitacao,
			item,
			idinstituicao,
			itemdef,
			status
		');
		$sql->SetTables('ad_orcamentotermo');

		$values= array(
		$query->result[$key][0], 		//IdLicitação
		$query->result[$key][1],		//Item
		$query->result[$key][2],		//IdInstituição
		$query->result[$key][3],		//ItemDef
		$query->result[$key][4],		//Status
		);

		$ok = @$this->Execute($sql->Insert($values));
		
		
		}
			$MIOLO->Information("A operação foi efetuada com sucesso.",$MIOLO->getActionUrl('adm','main:licitacoes',$IdLicitacao,array('form'=>'orctermo')));					
		}else
		{
			$MIOLO->Information("Não existem itens a serem gerados.",$MIOLO->getActionUrl('adm','main:licitacoes',$IdLicitacao,array('form'=>'orctermo')));			
		}
		
		
		}

	function MaiorItem($IdLicitacao)

		{
		$criteria = $this->getCriteria();
		$criteria->addColumnAttribute('max(item)');
		$criteria->addCriteria('idlicitacao','=',$IdLicitacao);	
		return $criteria->retrieveAsQuery();
		}

	function MaiorItemDef($IdLicitacao)

		{
		$criteria = $this->getCriteria();
		$criteria->addColumnAttribute('max(itemdef)');
		$criteria->addCriteria('idlicitacao','=',$IdLicitacao);	
		return $criteria->retrieveAsQuery();
		}		
		
	function findByDataLimite($idlicitacao,$item)
    {
		$busca = "select datalimite from ad_orcamentotermo where idlicitacao = '$idlicitacao' and item = '$item' order by datalimite desc limit 1";					
		return pg_fetch_result( pg_query($busca) ,0, 'datalimite' );
    }

}
?>
