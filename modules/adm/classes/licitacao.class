<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

/************************************************
* Class Licitacao
*
* Contém atributos e métodos das licitações 
* e seus itens
*
* Data: 18/10/2004
* Autor: Equipe de desenvolvimento do SIGA-UFJF
*
************************************************/

class BusinessAdmLicitacao extends Business
{
	public $idLicitacao;
	public $numero;
	public $dataAbertura;
	public $dataCriacao;
	public $status;
    public $idModalidadeLicitacao;
    public $pregao;
	public $fmtDateToStr; // formato das datas
	public $fmtStrToDate; // formato das datas
    public $numProcesso;
    public $imediata;
	public $idTipoLicitacao;
    public $obs;
	public $validade;
    public $tipoEntrega;

    public $tabelaGeral;
    public $participantes;
    public $itens; 
	public $itensDeServico;
    public $processo;
    public $modalidade;
    public $fornecedores;
    public $mapa;
    //IFSP
    public $iduser;
    public $uolicitacao;
	
/*    
	function BusinessAdmLicitacao($data = null)
	{
		$this->GetDatabase('sigaept');

		if ($data)
		{
			$this->SetData($data);
		}		
	}
  */  

	function __construct($data = null)
	{
		parent::__construct('sigaept', $data);
        $this->fmtStrToDate =  "TO_DATE(?,'DD/MM/YYYY')";
        $this->fmtStrToNumber =  "TO_NUMBER(?)";
	}

    function OnCreate($data)
    {
        if (empty($data))
        {
//            $this->initialize();
        }
        else
        {
            $this->GetById($data);
        }
    }

    function getItens()
    {
        $this->retrieveAssociation('itens');
        return $this->itens;
    }

    function getItensDeServico()
    {
        $this->retrieveAssociation('itensDeServico');
        return $this->itensDeServico;
    }

/*	
    function SetData($data)
	{
		$this->idLicitacao  = $data->idLicitacao;
		$this->numero 	    = $data->numero;
		$this->dataAbertura = $data->dataAbertura;
		$this->dataCriacao  = $data->dataCriacao;
		$this->status       = $data->status;	
	}
  */  

	/* ---------------------------------------

	Método GetById()

	----------------------------------------*/

    function getById($id)
	{
		$this->idLicitacao = $id;
		$this->retrieve();
		return $this;
	}

	function GetByNumero($numero)
	{
        $criteria =  $this->getCriteria();
        $criteria->AddColumnAttribute('idLicitacao');
        $criteria->addCriteria('numero','=',"'$numero'");
		$query = $criteria->retrieveAsQuery();
		return $query->result;
	}

	function setNumProcesso($numero)
	{
		$this->numProcesso = $numero;
	}

	function setImediata($id)
	{
		$this->imediata = $id;
	}
	
	function setObs($obs)
	{
		$this->obs = $obs;
	}

 	function listAll()
	{
        $criteria =  $this->getCriteria();
        $criteria->AddColumnAttribute('idLicitacao');
        $criteria->AddColumnAttribute('numero','numero');
        $criteria->AddColumnAttribute('dataCriacao','dataCriacao');
        $criteria->AddColumnAttribute('dataAbertura','dataAbertura');
        $criteria->AddColumnAttribute('tabelaGeral.item2','status');
        $criteria->AddColumnAttribute('idTipoLicitacao');
        $criteria->addCriteria('tabelaGeral.tabela','=',"'AD_ALMOXSTATUSLIC'");
        $criteria->addCriteria('numero','is not','null');
        $criteria->addOrderAttribute('dataCriacao',false);
        return $criteria->retrieveAsQuery();
	}

  	function listEmAndamento($local)
	{
        $criteria =  $this->getCriteria();
        $criteria->AddColumnAttribute('idLicitacao');
        $criteria->AddColumnAttribute('numero','numero');
        $criteria->AddColumnAttribute('dataCriacao','dataCriacao');
        $criteria->AddColumnAttribute('dataAbertura','dataAbertura');
        $criteria->AddColumnAttribute('tabelaGeral.item2','status');
        $criteria->AddColumnAttribute('idTipoLicitacao');
		$criteria->AddColumnAttribute('numProcesso','numpro');
        
        $criteria->addCriteria('tabelaGeral.tabela','=',"'AD_ALMOXSTATUSLIC'");
        $criteria->addCriteria('numero','is not','null');
        
        $criteria->addCriteria("status","<","'4'");
                 
        $criteria->addOrderAttribute('numero',true);
              
        /**
         * Determina o local da licitação
         */
		switch ($local)
		{
			case "HU":
				 $criteria->addCriteria("status","<>","'4'");
			break;
		}
       
        return $criteria->retrieveAsQuery();
	}

  	
// lista com o numero do processo//

	function ListEmAndamentoComNumProcesso()
	{
        $criteria =  $this->getCriteria();
        $criteria->AddColumnAttribute('idLicitacao');
        $criteria->AddColumnAttribute('numero','numero');
        $criteria->AddColumnAttribute('numProcesso','numProcesso');
        $criteria->AddColumnAttribute('dataCriacao','dataCriacao');
        $criteria->AddColumnAttribute('dataAbertura','dataAbertura');
        $criteria->AddColumnAttribute('tabelaGeral.item2','status');
        $criteria->AddColumnAttribute('idTipoLicitacao');
		$criteria->AddColumnAttribute('numProcesso','numpro');
        
        $criteria->addCriteria('tabelaGeral.tabela','=',"'AD_ALMOXSTATUSLIC'");
        $criteria->addCriteria('numero','is not','null');
        
        $criteria->addCriteria("status","<","'4'");
                 
        $criteria->addOrderAttribute('numero',true);
              
        /**
         * Determina o local da licitação
         */
		switch ($local)
		{
			case "HU":
				 $criteria->addCriteria("status","<>","'4'");
			break;
		}
       
        return $criteria->retrieveAsQuery();
	}

  	function listConcluidas()
	{
        $criteria =  $this->getCriteria();
        $criteria->AddColumnAttribute('idLicitacao');
        $criteria->AddColumnAttribute('numero','numero');
        $criteria->AddColumnAttribute('dataCriacao','dataCriacao');
        $criteria->AddColumnAttribute('dataAbertura','dataAbertura');
        $criteria->AddColumnAttribute('tabelaGeral.item2','status');
        $criteria->AddColumnAttribute('idTipoLicitacao');
        $criteria->addCriteria('tabelaGeral.tabela','=',"'AD_ALMOXSTATUSLIC'");
        $criteria->addCriteria('numero','is not','null');
               
        $criteria->addCriteria('status','>=', "'4'");   
        
        $criteria->addOrderAttribute('numero');
        
        return $criteria->retrieveAsQuery();
	}
	
  	function listConcluidasPorUo($uo, $inicio, $final)
	{
		$sql = new MSql('distinct(l.idlicitacao), l.numero, l.idtipolicitacao', 'ad_licitacao l, ad_itemreq i, ad_itemreqservext iserv, ad_itemreqbib ibib, ad_requisicao r, ad_requisicao rserv, ad_requisicao rbib', "l.status in ('4','5') and l.idlicitacao = i.idlicitacao(+) and i.idrequisicao = r.idrequisicao(+) and l.idlicitacao = iserv.idlicitacao(+) and iserv.idrequisicao = rserv.idrequisicao(+) and l.idlicitacao = ibib.idlicitacao(+) and ibib.idrequisicao = rbib.idrequisicao(+) and (r.iduoreq = ? or rserv.iduoreq = ? or rbib.iduoreq = ?) and (TO_CHAR(l.dataCriacao, 'YYYY/MM/DD') >= ?) and (TO_CHAR(l.dataCriacao, 'YYYY/MM/DD') <= ?)", 'l.numero');
		$values = array($uo,$uo,$uo,$inicio,$final);
		$query = $this->Query($sql,$values);
        return $query->result;
	}

	function listByUoPeriodo($uo, $inicio, $final, $status=null)
	{
		$whereUo = '';
		if($uo > 0)
		{
			$whereUo = " and (r.iduoreq = $uo or rserv.iduoreq = $uo or rbib.iduoreq = $uo)";
		}
		$whereStatus = '';
		if($status)
		{
			$whereStatus = " and l.status in ($status)";
		}
		$sql = new MSql('distinct l.idlicitacao, l.numero, l.idtipolicitacao, tg.item2, r.iduoreq, rserv.iduoreq, rbib.iduoreq, ur.sigla, userv.sigla, ubib.sigla', 'ad_licitacao l, ad_itemreq i, ad_itemreqservext iserv, ad_itemreqbib ibib, ad_requisicao r, ad_requisicao rserv, ad_requisicao rbib, cm_tabelageral tg, ad_uo ur, ad_uo userv, ad_uo ubib', "l.idlicitacao = i.idlicitacao(+) and i.idrequisicao = r.idrequisicao(+) and r.iduoreq = ur.iduo(+) and l.idlicitacao = iserv.idlicitacao(+) and iserv.idrequisicao = rserv.idrequisicao(+) and rserv.iduoreq = userv.iduo(+) and l.idlicitacao = ibib.idlicitacao(+) and ibib.idrequisicao = rbib.idrequisicao(+) and rbib.iduoreq = ubib.iduo(+) and l.status = tg.item1 and tg.tabela = 'AD_ALMOXSTATUSLIC' and (TO_CHAR(l.dataCriacao, 'YYYY/MM/DD') >= ?) and (TO_CHAR(l.dataCriacao, 'YYYY/MM/DD') <= ?) and ((i.item is not null) or (iserv.item is not null) or (ibib.item is not null))" . $whereStatus . $whereUo, 'l.numero');
		$values = array($inicio,$final);
		$query = $this->Query($sql,$values);
        return $query->result;
	}

	function GetValoresByIdLicitacao($idLicitacao)//retorna um array com os valores: ($valorLicitacao, $valorEmpenhado, $saldo)
	{
		global $MIOLO;

		$cf = new MCurrencyFormatter();
		$licitacao = $MIOLO->GetBusiness('adm','licitacao',$idLicitacao);

		if(($licitacao->idTipoLicitacao == '1') or ($licitacao->idTipoLicitacao == '4'))//COMPRA
		{
			$licitacao->getItens();
			$valorLicitacao = 0;
			$valorEmpenhado = 0;
			$saldo = 0;
			if($licitacao->itens)
			{
				foreach($licitacao->itens as $item)
				{
					$item->getItemReq();
					$objItemReq = $MIOLO->GetBusiness('adm','itemreq');

					//verifica se o item da licitação está apto a ser empenhado, através dos status de itemreq e requisição
					$itemOK = false;
					if($item->itemreq)
					{
						foreach($item->itemreq as $ir)
						{
							$objItemReq->GetById($ir->idRequisicao, $ir->idMaterial);
							$objItemReq->getRequisicao();
							//((itemreq = A-LICITAÇÃO PARCELADA ou 5-LICITADO ou 6-EMPENHADO ou 7-ENTREGUE ou 9-ENTREGA REDUZIDA) e (requisicao = 7-LIBERADA PARA EXECUCAO ou 8-EXECUTADA PARCIALMENTE ou 9-EXECUTADA TOTALMENTE))
							if((($ir->status == 'A') or ($ir->status == '5') or ($ir->status == '6') or ($ir->status == '7') or ($ir->status == '9')) and (($objItemReq->requisicao->status == '7') or ($objItemReq->requisicao->status == '8') or ($objItemReq->requisicao->status == '9')))
							{
								$itemOK = true;
							}
						}
					}

					if($itemOK)
					{
						$objMapa = $MIOLO->GetBusiness('adm','mapalicitacao');
						$objMapa->GetByIdLicitacaoItemVencedor($idLicitacao, $item->item);

						$objSuplementacao = $MIOLO->GetBusiness('adm','suplementacaoitem');
						$ultimaSuplementacaoItem = $objSuplementacao->GetUltimaSuplementacaoByIdLicitacaoItem($idLicitacao,$item->item);
						if($ultimaSuplementacaoItem->idSuplementacaoItem)
						{
							$item->valor = $ultimaSuplementacaoItem->valorUnitSuplementar;
						}
						else
						{
							$item->valor = $objMapa->getMapaValorVencedor($idLicitacao,$item->item);
						}
						$quantMapa = $objMapa->getMapaQuantidadeVencedor($idLicitacao,$item->item);
						$quantSuplemento = $objSuplementacao->GetQuantidadeByIdLicitacaoItem($idLicitacao,$item->item);
						$quantEmpenhada = $item->GetQuantidadeEmpenhada($idLicitacao, $item->item);
						$totalItem = ($cf->toDecimal($quantMapa) + $cf->toDecimal($quantSuplemento) - $cf->toDecimal($quantEmpenhada)) * $cf->toDecimal($item->valor);

						$valorLicitacao = $cf->toDecimal($valorLicitacao) + (($cf->toDecimal($quantMapa) + $cf->toDecimal($quantSuplemento)) * $cf->toDecimal($item->valor));
						$valorEmpenhado = $cf->toDecimal($valorEmpenhado) + ($cf->toDecimal($quantEmpenhada) * $cf->toDecimal($item->valor));
						$saldo = $cf->toDecimal($saldo) + $cf->toDecimal($totalItem);
					}
				}
			}
		}
		elseif($licitacao->idTipoLicitacao == '2')//SERVICO
		{
			$licitacao->getItens();
			$valorLicitacao = 0;
			$valorEmpenhado = 0;
			$saldo = 0;
			if($licitacao->itens)
			{
				foreach($licitacao->itens as $item)
				{
					$item->getItemServExt();
					$objItemServExt = $MIOLO->GetBusiness('adm','itemservext');

					//verifica se o item da licitação está apto a ser empenhado, através dos status de itemreqservext e requisição
					$itemOK = false;
					if($item->itemservext)
					{
						foreach($item->itemservext as $is)
						{
							$objItemServExt->GetById($is->idRequisicao);
							$objItemServExt->getRequisicao();
							//((itemreq = A-LICITAÇÃO PARCELADA ou 5-LICITADO ou 6-EMPENHADO ou 7-ENTREGUE ou 9-ENTREGA REDUZIDA) e (requisicao = 7-LIBERADA PARA EXECUCAO ou 8-EXECUTADA PARCIALMENTE ou 9-EXECUTADA TOTALMENTE))
							if((($is->status == 'A') or ($is->status == '5') or ($is->status == '6') or ($is->status == '7') or ($is->status == '9')) and (($objItemServExt->requisicao->status == '7') or ($objItemServExt->requisicao->status == '8') or ($objItemServExt->requisicao->status == '9')))
							{
								$itemOK = true;
							}
						}
					}

					if($itemOK)
					{
						$objMapa = $MIOLO->GetBusiness('adm','mapalicitacao');
						$objMapa->GetByIdLicitacaoItemVencedor($idLicitacao, $item->item);

						$objSuplementacao = $MIOLO->GetBusiness('adm','suplementacaoitem');
						$ultimaSuplementacaoItem = $objSuplementacao->GetUltimaSuplementacaoByIdLicitacaoItem($idLicitacao,$item->item);
						if($ultimaSuplementacaoItem->idSuplementacaoItem)
						{
							$item->valor = $ultimaSuplementacaoItem->valorUnitSuplementar;
						}
						else
						{
							$item->valor = $objMapa->getMapaValorVencedor($idLicitacao,$item->item);
						}
						$quantMapa = $objMapa->getMapaQuantidadeVencedor($idLicitacao,$item->item);
						$quantSuplemento = $objSuplementacao->GetQuantidadeByIdLicitacaoItem($idLicitacao,$item->item);
						$quantEmpenhada = $item->GetQuantidadeEmpenhada($idLicitacao, $item->item);
						$totalItem = ($cf->toDecimal($quantMapa) + $cf->toDecimal($quantSuplemento) - $cf->toDecimal($quantEmpenhada)) * $cf->toDecimal($item->valor);

						$valorLicitacao = $cf->toDecimal($valorLicitacao) + (($cf->toDecimal($quantMapa) + $cf->toDecimal($quantSuplemento)) * $cf->toDecimal($item->valor));
						$valorEmpenhado = $cf->toDecimal($valorEmpenhado) + ($cf->toDecimal($quantEmpenhada) * $cf->toDecimal($item->valor));
						$saldo = $cf->toDecimal($saldo) + $cf->toDecimal($totalItem);
					}
				}
			}
		}
		elseif($licitacao->idTipoLicitacao == '3')//LIVRO
		{
			$licitacao->getItens();
			$valorLicitacao = 0;
			$valorEmpenhado = 0;
			$saldo = 0;
			if($licitacao->itens)
			{
				foreach($licitacao->itens as $item)
				{
					$item->getItemReqBib();

					//verifica se o item da licitação está apto a ser empenhado, através dos status de itemreqbib e requisição
					$itemOK = false;
					if($item->itemreqbib)
					{
						foreach($item->itemreqbib as $ir)
						{
							$objItemReqBib = $ir;
							$objItemReqBib->getRequisicao();
							//((itemreqbib = A-LICITAÇÃO PARCELADA ou 5-LICITADO ou 6-EMPENHADO ou 7-ENTREGUE ou 9-ENTREGA REDUZIDA) e (requisicao = 7-LIBERADA PARA EXECUCAO ou 8-EXECUTADA PARCIALMENTE ou 9-EXECUTADA TOTALMENTE))
							if((($ir->status == 'A') or ($ir->status == '5') or ($ir->status == '6') or ($ir->status == '7') or ($ir->status == '9')) and (($objItemReqBib->requisicao->status == '7') or ($objItemReqBib->requisicao->status == '8') or ($objItemReqBib->requisicao->status == '9')))
							{
								$itemOK = true;
							}
						}
					}

					if($itemOK)
					{
						$objMapa = $MIOLO->GetBusiness('adm','mapalicitacao');
						$objMapa->GetByIdLicitacaoItemVencedor($idLicitacao, $item->item);

						$objSuplementacao = $MIOLO->GetBusiness('adm','suplementacaoitem');
						$ultimaSuplementacaoItem = $objSuplementacao->GetUltimaSuplementacaoByIdLicitacaoItem($idLicitacao,$item->item);
						if($ultimaSuplementacaoItem->idSuplementacaoItem)
						{
							$item->valor = $ultimaSuplementacaoItem->valorUnitSuplementar;
						}
						else
						{
							$item->valor = $objMapa->getMapaValorVencedor($idLicitacao,$item->item);
						}
						$quantMapa = $objMapa->getMapaQuantidadeVencedor($idLicitacao,$item->item);
						$quantSuplemento = $objSuplementacao->GetQuantidadeByIdLicitacaoItem($idLicitacao,$item->item);
						$quantEmpenhada = $item->GetQuantidadeEmpenhada($idLicitacao, $item->item);
						$totalItem = ($cf->toDecimal($quantMapa) + $cf->toDecimal($quantSuplemento) - $cf->toDecimal($quantEmpenhada)) * $cf->toDecimal($item->valor);

						$valorLicitacao = $cf->toDecimal($valorLicitacao) + (($cf->toDecimal($quantMapa) + $cf->toDecimal($quantSuplemento)) * $cf->toDecimal($item->valor));
						$valorEmpenhado = $cf->toDecimal($valorEmpenhado) + ($cf->toDecimal($quantEmpenhada) * $cf->toDecimal($item->valor));
						$saldo = $cf->toDecimal($saldo) + $cf->toDecimal($totalItem);
					}
				}
			}
		}

		return array($valorLicitacao, $valorEmpenhado, $saldo);
	}

	//Listar licitacoes com vencedores definidos (status 4)
	function listVencedoresDefinidos()
	{
        $criteria =  $this->getCriteria();
        $criteria->AddColumnAttribute('idLicitacao');
        $criteria->AddColumnAttribute('numero','numero');
        $criteria->AddColumnAttribute('dataCriacao','dataCriacao');
        $criteria->AddColumnAttribute('dataAbertura','dataAbertura');
        $criteria->AddColumnAttribute('tabelaGeral.item2','status');
        $criteria->AddColumnAttribute('idTipoLicitacao');
        $criteria->addCriteria('tabelaGeral.tabela','=',"'AD_ALMOXSTATUSLIC'");
        $criteria->addCriteria('numero','is not','null');
		$criteria->AddColumnAttribute('numProcesso','numpro');
		
        $criteria->addCriteria('status','=', "'4'");   
        
        $criteria->addOrderAttribute('numero');
        
        return $criteria->retrieveAsQuery();
	}
	
    // Listar Licitacoes com título do Processo (status4)

     function listVencedoresDefinidosComNumProcesso()
{
        $criteria =  $this->getCriteria();
        $criteria->AddColumnAttribute('idLicitacao');
        $criteria->AddColumnAttribute('numero','numero');
        $criteria->AddColumnAttribute('numProcesso','numProcesso');
        $criteria->AddColumnAttribute('dataAbertura','dataAbertura');
        $criteria->AddColumnAttribute('tabelaGeral.item2','status');
        $criteria->AddColumnAttribute('idTipoLicitacao');
        $criteria->addCriteria('tabelaGeral.tabela','=',"'AD_ALMOXSTATUSLIC'");
        $criteria->addCriteria('numero','is not','null');
        $criteria->AddColumnAttribute('numProcesso','numpro');
               
        $criteria->addCriteria('status','=', "'4'");   
        
        $criteria->addOrderAttribute('numero');
        
        return $criteria->retrieveAsQuery();
	}

		
	//Listar licitacoes empenhadas (status 5)
	function listEmpenhadas()
	{
        $criteria =  $this->getCriteria();
        $criteria->AddColumnAttribute('idLicitacao');
        $criteria->AddColumnAttribute('numero','numero');
        $criteria->AddColumnAttribute('dataCriacao','dataCriacao');
        $criteria->AddColumnAttribute('dataAbertura','dataAbertura');
        $criteria->AddColumnAttribute('tabelaGeral.item2','status');
        $criteria->AddColumnAttribute('idTipoLicitacao');
        $criteria->addCriteria('tabelaGeral.tabela','=',"'AD_ALMOXSTATUSLIC'");
        $criteria->addCriteria('numero','is not','null');
        $criteria->AddColumnAttribute('numProcesso','numpro');       
		
        $criteria->addCriteria('status','=', "'5'");   
        
        $criteria->addOrderAttribute('numero');
        
        return $criteria->retrieveAsQuery();
	}
	

	// Listar Licitacoes empenhadas com titulo do processo (status 5 )
	function ListEmpenhadasComNumProcesso()
	{
        $criteria =  $this->getCriteria();
        $criteria->AddColumnAttribute('idLicitacao');
        $criteria->AddColumnAttribute('numero','numero');
		$criteria->AddColumnAttribute('numProcesso','numProcesso');
        $criteria->AddColumnAttribute('dataCriacao','dataCriacao');
        $criteria->AddColumnAttribute('dataAbertura','dataAbertura');
        $criteria->AddColumnAttribute('tabelaGeral.item2','status');
        $criteria->AddColumnAttribute('idTipoLicitacao');
        $criteria->addCriteria('tabelaGeral.tabela','=',"'AD_ALMOXSTATUSLIC'");
        $criteria->addCriteria('numero','is not','null');
		$criteria->AddColumnAttribute('numProcesso','numpro');
               
        $criteria->addCriteria('status','=', "'5'");   
        
        $criteria->addOrderAttribute('numero');
        
        return $criteria->retrieveAsQuery();
	}

	//Listar licitacoes canceladas (status 6)
	function listCanceladas()
	{
        $criteria =  $this->getCriteria();
        $criteria->AddColumnAttribute('idLicitacao');
        $criteria->AddColumnAttribute('numero','numero');
        $criteria->AddColumnAttribute('dataCriacao','dataCriacao');
        $criteria->AddColumnAttribute('dataAbertura','dataAbertura');
        $criteria->AddColumnAttribute('tabelaGeral.item2','status');
        $criteria->AddColumnAttribute('idTipoLicitacao');
        $criteria->addCriteria('tabelaGeral.tabela','=',"'AD_ALMOXSTATUSLIC'");
        $criteria->addCriteria('numero','is not','null');
		$criteria->AddColumnAttribute('numProcesso','numpro');
		
        $criteria->addCriteria('status','=', "'6'");   
        
        $criteria->addOrderAttribute('numero');
        
        return $criteria->retrieveAsQuery();
	}

function ListCanceladasComNumProcesso()
	{
        $criteria =  $this->getCriteria();
        $criteria->AddColumnAttribute('idLicitacao');
        $criteria->AddColumnAttribute('numero','numero');
		$criteria->AddColumnAttribute('numProcesso','numProcesso');
        $criteria->AddColumnAttribute('dataCriacao','dataCriacao');
        $criteria->AddColumnAttribute('dataAbertura','dataAbertura');
        $criteria->AddColumnAttribute('tabelaGeral.item2','status');
        $criteria->AddColumnAttribute('idTipoLicitacao');
        $criteria->addCriteria('tabelaGeral.tabela','=',"'AD_ALMOXSTATUSLIC'");
        $criteria->addCriteria('numero','is not','null');
		$criteria->AddColumnAttribute('numProcesso','numpro');
               
        $criteria->addCriteria('status','=', "'6'");   
        
        $criteria->addOrderAttribute('numero');
        
        return $criteria->retrieveAsQuery();
	}


	function ListById($id)
	{
        $criteria =  $this->getCriteria();
        $criteria->AddColumnAttribute('idLicitacao');
        $criteria->AddColumnAttribute('dataCriacao','dataCriacao');
        $criteria->AddColumnAttribute('dataAbertura','dataAbertura');
        $criteria->AddColumnAttribute('tabelaGeral.item2','status');
        $criteria->AddColumnAttribute('numero');
        $criteria->addCriteria('idLicitacao','=', "$id");
        $criteria->addCriteria('tabelaGeral.tabela','=',"'AD_ALMOXSTATUSLIC'");
        $criteria->addOrderAttribute('dataCriacao',false);
        return $criteria->retrieveAsQuery();
	}

    function getParticipantes()
	{
		$this->retrieveAssociation('mapa');
        if ($this->mapa != NULL)
        {
            if (!is_array($this->mapa))
            {
                $this->mapa = array($this->mapa);  
            }
        }
	}

    function getFornecedores()
	{
		$this->retrieveAssociation('fornecedores');
        if ($this->fornecedores != NULL)
        {
            if (!is_array($this->fornecedores))
            {
                $this->fornecedores = array($this->fornecedores);  
            }
        }
	}
    
	function deleteFornecedor($id)
	{
 		global $MIOLO;               

        $obj = $MIOLO->GetBusiness('adm','participante');
        $criteria = $obj->getDeleteCriteria();
        $criteria->addCriteria('idLicitacao','=',$this->idLicitacao);
        $criteria->addCriteria('idFornecedor','=',$id);
        $criteria->delete();
	}

	function updatePrevisoesDeDebito()
	{
		$cf = new MCurrencyFormatter();
		global $MIOLO;


		// Licitação de Serviço
		if ($this->idTipoLicitacao == '2')
		{
			$this->retrieveAssociation('itensDeServico');
			if ($this->itensDeServico != NULL)
			{
				foreach ( $this->itensDeServico as $o2 )
				{
					if ($o2->status == 5) //licitado
					{
						$valorNoMapa = $cf->toDecimal($this->getValorNoMapa($o2->item));						
						$previsaoAntiga = $cf->toDecimal($o2->quantidade) * $cf->toDecimal($o2->valorEst);						
						$previsaoNova = $cf->toDecimal($o2->quantidade) * $valorNoMapa;

						$objRequisicao = $MIOLO->GetBusiness('adm','requisicao',$o2->idRequisicao);

						if ($valorNoMapa > 0)
						{
							$o2->setValorEstimado($valorNoMapa);
							$o2->save();

							$objRequisicao->removePrevisaoDebito($previsaoAntiga);
							$objRequisicao->addLancamentoInterno(7,$previsaoAntiga,"Retorno de Previsao feito na definicao de vencedores da licitacao.",$o2->idLicitacao,$o2->item);

							$objRequisicao->addPrevisaoDebito($previsaoNova);
							$objRequisicao->addLancamentoInterno(4,$previsaoNova,"Adicao da nova previsao baseada no valor do mapa feito na definicao de vencedores da licitacao.",$o2->idLicitacao,$o2->item);
						}
					}
				}
			}
		}
		else if ($this->idTipoLicitacao == '3')
		{
			$this->retrieveAssociation('itensDeLivro');
			if ($this->itensDeLivro != NULL)
			{
				foreach ( $this->itensDeLivro as $o2 )
				{
					if ($o2->status == 5) //licitado
					{
						$valorNoMapa = $cf->toDecimal($this->getValorNoMapa($o2->item));
						$previsaoAntiga = $cf->toDecimal($o2->quantPedida) * $cf->toDecimal($o2->precoEstimado);
						$previsaoNova = $cf->toDecimal($o2->quantPedida) * $valorNoMapa;

						if ($valorNoMapa > 0)
						{
							$o2->setPrecoEstimado($valorNoMapa);
							$o2->save();

							$objRequisicao = $MIOLO->GetBusiness('adm','requisicao',$o2->idRequisicao);

							$objRequisicao->removePrevisaoDebito($previsaoAntiga);
							$objRequisicao->addLancamentoInterno(7,$previsaoAntiga,"Retorno de Previsao feito na definicao de vencedores da licitacao.",$o2->idLicitacao,$o2->item);

							$objRequisicao->addPrevisaoDebito($previsaoNova);
							$objRequisicao->addLancamentoInterno(4,$previsaoNova,"Adicao da nova previsao baseada no valor do mapa feito na definicao de vencedores da licitacao.",$o2->idLicitacao,$o2->item);
						}
					}
				}
			}
		}
		else
		{
			// Licitação de Material
			$this->retrieveAssociation('itensDeMaterial');
			if ($this->itensDeMaterial != NULL)
			{
				foreach ( $this->itensDeMaterial as $o2 )
				{

					if ($o2->status == 5) //licitado
					{
						$valorNoMapa = $cf->toDecimal($this->getValorNoMapa($o2->item));
						$previsaoAntiga = $cf->toDecimal($o2->quantPedida) * $cf->toDecimal($o2->precoEstimado);
						$previsaoNova = $cf->toDecimal($o2->quantPedida) * $valorNoMapa;

						if ($valorNoMapa > 0)
						{
							$o2->setPrecoEstimado($valorNoMapa);
							$o2->save();

							$objRequisicao = $MIOLO->GetBusiness('adm','requisicao',$o2->idRequisicao);

							$objRequisicao->removePrevisaoDebito($previsaoAntiga);
							$objRequisicao->addLancamentoInterno(7,$previsaoAntiga,"Retorno de Previsao feito na definicao de vencedores da licitacao.",$o2->idLicitacao,$o2->item);

							$objRequisicao->addPrevisaoDebito($previsaoNova);
							$objRequisicao->addLancamentoInterno(4,$previsaoNova,"Adicao da nova previsao baseada no valor do mapa feito na definicao de vencedores da licitacao.",$o2->idLicitacao,$o2->item);
						}
					}
				}
			}
		}
	}

	/*-----------------------------------------------------------------------------*
	
	Método getValorNoMapa($item)

	Retorna o valor da proposta vencedora definido no mapa para o item informado
	
	*-----------------------------------------------------------------------------*/
	function getValorNoMapa($item)
	{
		$criteria = $this->getCriteria();
		$criteria->addColumnAttribute('mapa.preco','preco');
		$criteria->addCriteria('mapa.idLicitacao','=',$this->idLicitacao);
        $criteria->addCriteria('mapa.vencedor','=',"'1'");
        $criteria->addCriteria('mapa.item','=',$item);
		$query = $criteria->retrieveAsQuery();
		return $query->fields('preco');
	}

	function getQuantidadeValorNoMapa($item)
	{
		$criteria = $this->getCriteria();
		$criteria->addColumnAttribute('mapa.preco');
		$criteria->addColumnAttribute('mapa.quantidade');
		$criteria->addCriteria('mapa.idLicitacao','=',$this->idLicitacao);
        $criteria->addCriteria('mapa.vencedor','=',"'1'");
        $criteria->addCriteria('mapa.item','=',$item);
		$query = $criteria->retrieveAsQuery();
		return array($query->fields('quantidade'), $query->fields('preco'));
	}

	function getValorEstimado()
	{
        $cf = new MCurrencyFormatter();
        $k = new MKrono();

		// Licitação de Serviço
		if ($this->idTipoLicitacao == '2')
		{
			$this->retrieveAssociation('itensDeServico');
			if ($this->itensDeServico != NULL)
			{
				foreach ( $this->itensDeServico as $o2 )
				{                    
                    $o2->retrieveAssociation('requisicao');
                    if (($o2->status == 1 OR $o2->status == 5) && ($k->compareDate($o2->requisicao->dataHora,'>','31/12/2007'))) //Em licitacao ou licitado
    				    $valorEstimado += $cf->toDecimal($o2->quantidade) * $cf->toDecimal($o2->valorEst);
				}
				return $valorEstimado;
   			}
		}
		else if ($this->idTipoLicitacao == '3')
		{
			$this->retrieveAssociation('itensDeLivro');
			if ($this->itensDeLivro != NULL)
			{
				foreach ( $this->itensDeLivro as $o2 )
				{
                    $o2->retrieveAssociation('requisicao');
                    if (($o2->status == 1 OR $o2->status == 5) && ($k->compareDate($o2->requisicao->dataHora,'>','31/12/2007'))) //Em licitacao ou licitado
    				    $valorEstimado += $cf->toDecimal($o2->quantPedida) * $cf->toDecimal($o2->precoEstimado);
				}
				return $valorEstimado;
			}
		}
		else
		{
			// Licitação de Material
			$this->retrieveAssociation('itensDeMaterial');
			if ($this->itensDeMaterial != NULL)
			{
				foreach ( $this->itensDeMaterial as $o2 )
				{
                    $o2->retrieveAssociation('requisicao');
                    if (($o2->status == 1 OR $o2->status == 5) && ($k->compareDate($o2->requisicao->dataHora,'>','31/12/2007'))) //Em licitacao ou licitado
                    {
                       $valorEstimado += $cf->toDecimal($o2->quantPedida) * $cf->toDecimal($o2->precoEstimado);
                    }
				}
				return $valorEstimado;
			}
		}
	}

	function getValorEstimadoByUo($idUo)
	{
        $cf = new MCurrencyFormatter();

		// Licitação de Serviço
		if ($this->idTipoLicitacao == '2')
		{
			$this->retrieveAssociation('itensDeServico');
			if ($this->itensDeServico != NULL)
			{
				foreach ( $this->itensDeServico as $o2 )
				{
                    if ($o2->status == 1 OR $o2->status == 5) //Em licitacao ou licitado
					{
						$o2->getRequisicao();
						if($o2->requisicao->idUoRequisitante == $idUo)
						{
    						$valorEstimado += $cf->toDecimal($o2->quantidade) * $cf->toDecimal($o2->valorEst);
						}
					}
				}
				return $valorEstimado;
   			}
		}
		else if ($this->idTipoLicitacao == '3')
		{
			$this->retrieveAssociation('itensDeLivro');
			if ($this->itensDeLivro != NULL)
			{
				foreach ( $this->itensDeLivro as $o2 )
				{
                    if ($o2->status == 1 OR $o2->status == 5) //Em licitacao ou licitado
					{
						$o2->getRequisicao();
						if($o2->requisicao->idUoRequisitante == $idUo)
						{
	    				    $valorEstimado += $cf->toDecimal($o2->quantPedida) * $cf->toDecimal($o2->precoEstimado);
						}
					}
				}
				return $valorEstimado;
			}
		}
		else
		{
			// Licitação de Material
			$this->retrieveAssociation('itensDeMaterial');
			if ($this->itensDeMaterial != NULL)
			{
				foreach ( $this->itensDeMaterial as $o2 )
				{
                    if ($o2->status == 1 OR $o2->status == 5) //Em licitacao ou licitado
                    {
						$o2->getRequisicao();
						if($o2->requisicao->idUoRequisitante == $idUo)
						{
	                       $valorEstimado += $cf->toDecimal($o2->quantPedida) * $cf->toDecimal($o2->precoEstimado);
						}
                    }
				}
				return $valorEstimado;
			}
		}
	}

	function getValorLicitadoByUo($idUo)
	{
        $cf = new MCurrencyFormatter();
		
		/* Removida a referencia
		$sql = new MSql('anoref','ad_controle');
		$anoReferencia = $empenhado->Query($sql)->result[0][0];
		*/
		$anoReferencia = Date('Y');

		// Licitação de Serviço
		if ($this->idTipoLicitacao == '2')
		{
			$this->retrieveAssociation('itensDeServico');
			if ($this->itensDeServico != NULL)
			{
				foreach ( $this->itensDeServico as $o2 )
				{
                    if ($o2->status == 1 OR $o2->status == 5 OR $o2->status == 6 OR $o2->status == 7 OR $o2->status == 8 OR $o2->status == 9 OR $o2->status == 'A') //Em Licitacao, Licitado, Empenhado, Entregue, Empenho Parcelado, Entrega Reduzida ou Licitacao Parcelada
					{
						$valoresNoMapa = $this->getQuantidadeValorNoMapa($o2->item);
						$quantidadeNoMapa = $cf->toDecimal($valoresNoMapa[0]);
						$valorNoMapa = $cf->toDecimal($valoresNoMapa[1]);
						$o2->getRequisicao();
						if($o2->requisicao->idUoRequisitante == $idUo and substr($o2->requisicao->dataHora,6,4) == $anoReferencia)
						{
							$quantidade = min($o2->quantidade, $quantidadeNoMapa);
							$valorLicitado += $cf->toDecimal($quantidade) * $valorNoMapa;
						}
					}
				}
				return $valorLicitado;
   			}
		}
		else if ($this->idTipoLicitacao == '3')
		{
			$this->retrieveAssociation('itensDeLivro');
			if ($this->itensDeLivro != NULL)
			{
				foreach ( $this->itensDeLivro as $o2 )
				{
                    if ($o2->status == 1 OR $o2->status == 5 OR $o2->status == 6 OR $o2->status == 7 OR $o2->status == 8 OR $o2->status == 9 OR $o2->status == 'A') //Em Licitacao, Licitado, Empenhado, Entregue, Empenho Parcelado, Entrega Reduzida ou Licitacao Parcelada
					{
						$valoresNoMapa = $this->getQuantidadeValorNoMapa($o2->item);
						$quantidadeNoMapa = $cf->toDecimal($valoresNoMapa[0]);
						$valorNoMapa = $cf->toDecimal($valoresNoMapa[1]);
						$o2->getRequisicao();
						if($o2->requisicao->idUoRequisitante == $idUo and substr($o2->requisicao->dataHora,6,4) == $anoReferencia)
						{
							$quantidade = min($o2->quantPedida, $quantidadeNoMapa);
							$valorLicitado += $cf->toDecimal($quantidade) * $valorNoMapa;
						}
					}
				}
				return $valorLicitado;
			}
		}
		else
		{
			// Licitação de Material
			$this->retrieveAssociation('itensDeMaterial');
			if ($this->itensDeMaterial != NULL)
			{
				foreach ( $this->itensDeMaterial as $o2 )
				{
                    if ($o2->status == 1 OR $o2->status == 5 OR $o2->status == 6 OR $o2->status == 7 OR $o2->status == 8 OR $o2->status == 9 OR $o2->status == 'A') //Em Licitacao, Licitado, Empenhado, Entregue, Empenho Parcelado, Entrega Reduzida ou Licitacao Parcelada
					{
						$valoresNoMapa = $this->getQuantidadeValorNoMapa($o2->item);
						$quantidadeNoMapa = $cf->toDecimal($valoresNoMapa[0]);
						$valorNoMapa = $cf->toDecimal($valoresNoMapa[1]);
						$o2->getRequisicao();
						if($o2->requisicao->idUoRequisitante == $idUo and substr($o2->requisicao->dataHora,6,4) == $anoReferencia)
						{
							$quantidade = min($o2->quantPedida, $quantidadeNoMapa);
							$valorLicitado += $cf->toDecimal($quantidade) * $valorNoMapa;
						}
					}
				}
				return $valorLicitado;
			}
		}
	}

	function getValorRealByUo($idUo)
	{
        $cf = new MCurrencyFormatter();

		// Licitação de Serviço
		if ($this->idTipoLicitacao == '2')
		{
			$this->retrieveAssociation('itensDeServico');
			if ($this->itensDeServico != NULL)
			{
				foreach ( $this->itensDeServico as $o2 )
				{
                    if ($o2->status == 6 OR $o2->status == 7 OR $o2->status == 8 OR $o2->status == 9 OR $o2->status == 'A') //Empenhado, Entregue, Empenho Parcelado, Entrega Reduzida ou Licitacao Parcelada
					{
						$o2->getRequisicao();
						if($o2->requisicao->idUoRequisitante == $idUo)
						{
	    				    $valorReal += $cf->toDecimal($o2->quantEmpenhada) * $cf->toDecimal($o2->valorReal);
						}
					}
				}
				return $valorReal;
   			}
		}
		else if ($this->idTipoLicitacao == '3')
		{
			$this->retrieveAssociation('itensDeLivro');
			if ($this->itensDeLivro != NULL)
			{
				foreach ( $this->itensDeLivro as $o2 )
				{
                    if ($o2->status == 6 OR $o2->status == 7 OR $o2->status == 8 OR $o2->status == 9 OR $o2->status == 'A') //Empenhado, Entregue, Empenho Parcelado, Entrega Reduzida ou Licitacao Parcelada
					{
						$o2->getRequisicao();
						if($o2->requisicao->idUoRequisitante == $idUo)
						{
	    				    $valorReal += $cf->toDecimal($o2->quantEmpenhada) * $cf->toDecimal($o2->valorReal);
						}
					}
				}
				return $valorReal;
			}
		}
		else
		{
			// Licitação de Material
			$this->retrieveAssociation('itensDeMaterial');
			if ($this->itensDeMaterial != NULL)
			{
				foreach ( $this->itensDeMaterial as $o2 )
				{
                    if ($o2->status == 6 OR $o2->status == 7 OR $o2->status == 8 OR $o2->status == 9 OR $o2->status == 'A') //Empenhado, Entregue, Empenho Parcelado, Entrega Reduzida ou Licitacao Parcelada
                    {
						$o2->getRequisicao();
						if($o2->requisicao->idUoRequisitante == $idUo)
						{
	    				    $valorReal += $cf->toDecimal($o2->quantEmpenhada) * $cf->toDecimal($o2->valorReal);
						}
					}
				}
				return $valorReal;
			}
		}
	}

	function getSubElemento()
	{
		global $MIOLO;
		$this->retrieveAssociation('itens');
        if ($this->itens != NULL)
        {
			foreach ( $this->itens as $o )
			{                
				$objMaterial = $MIOLO->GetBusiness('adm','material');
				$objMaterial->getById($o->idMaterial);
				$objMaterial->retrieveAssociation('subelemento');
				return $objMaterial->subelemento->descricao;
			}
        }
	}   

	function getValorReal()
	{
        $cf = new MCurrencyFormatter();
        
        $this->retrieveAssociation('mapa');
        if ($this->mapa != NULL)
        {
			foreach ( $this->mapa as $o )
			{                
                if ($o->vencedor == '1')
                {
                    $valorReal += $cf->toDecimal($o->quantidade) * $cf->toDecimal($o->preco);
                }
			}
            return $valorReal;
        }
	}

	function temPropostaValida($item)
	{
        $cf = new MCurrencyFormatter();
        
        $this->retrieveAssociation('mapa');
        if ($this->mapa != NULL)
        {
			foreach ( $this->mapa as $o )
			{                
                if ($o->item == $item)
                {
                    if ($o->status == '1')
                        return true;
                }
			}
            return false;
        }
	}

	function addParticipante($participante)
	{
		$this->mapa[] = $participante;
	}
	
	function deleteParticipante($id)
	{
		if ( $this->mapa != NULL )
		{
			foreach ( $this->mapa as $o )
			{
				if ( $o->idFornecedor == $id )
                {
                    $o->delete();
                }
			}
		}
	}
    
    function getParticipante($id)
	{
		if ( $this->mapa != NULL )
		{
			foreach ( $this->mapa as $o )
			{
				if ( $o->idFornecedor == $id )
					return $o;
			}
		}
	}

 	function deleteItemDoMapa($id)
	{
        $this->retrieveAssociation("mapa");
		if ( $this->mapa != NULL )
		{
			foreach ( $this->mapa as $o )
			{
				if (($o->item == $id) or ($id == 'all'))
                {
                    $o->delete();
                }
			}
		}
	}

	function reordenaItens($id)
	{
		global $MIOLO;

		// Licitação de Serviço
		if ($this->idTipoLicitacao == '2')
		{
            $itemReq = $MIOLO->getBusiness('adm','itemservext');

			$this->retrieveAssociation('itensDeServico');
			if ($this->itensDeServico != NULL)
			{
				foreach ( $this->itensDeServico as $o )
				{
    				if (($o->item > $id) && ($o->status != '0'))
                    {
                        $itemReq->setItemByLicitacaoItem($this->idLicitacao,$o->item,$o->item-1);
                    }
				}
   			}
		}
		else if ($this->idTipoLicitacao == '3') //Livro
		{
            $itemReq = $MIOLO->getBusiness('adm','itemreqbib');

			$this->retrieveAssociation('itensDeLivro');

			if ($this->itensDeLivro != NULL)
			{
				foreach ( $this->itensDeLivro as $o )
				{
    				if (($o->item > $id) && ($o->status != '0'))
                    {
                        $itemReq->setItemByLicitacaoItem($this->idLicitacao,$o->item,$o->item-1);
                    }
				}
			}
		}
		else
		{
			// Licitação de Material
            $itemReq = $MIOLO->getBusiness('adm','itemreq');

			$this->retrieveAssociation('itensDeMaterial');
			if ($this->itensDeMaterial != NULL)
			{
				foreach ( $this->itensDeMaterial as $o )
				{
    				if (($o->item > $id) && ($o->status != '0'))
                    {
						$itemReq->setItemByLicitacaoItem($this->idLicitacao,$o->item,$o->item-1);
						
					
						
                    }
				}
			}
		}
   	}

	function listParticipantes($idLicitacao = 0)
	{
		$criteria = $this->getCriteria();
		$criteria->addColumnAttribute('fornecedores.fornecedor.idFornecedor','idFornecedor');
		$criteria->addColumnAttribute('fornecedores.fornecedor.instituicao.nome','nome');
		$criteria->addColumnAttribute('fornecedores.fornecedor.instituicao.cgc','cgc');
		$criteria->addColumnAttribute('fornecedores.fornecedor.instituicao.municipio.municipio','municipio');
        if ($idLicitacao)
            $criteria->addCriteria('idLicitacao','=', $idLicitacao);
        else
            $criteria->addCriteria('idLicitacao','=', $this->idLicitacao);
        $criteria->setDistinct('fornecedores.fornecedor.idFornecedor');

		return $criteria->retrieveAsQuery();
	}

	function listItensDeRequisicao()
	{
		if ($this->idTipoLicitacao == '1' OR $this->idTipoLicitacao == '4')
		{
            $criteria = $this->getCriteria();
            $criteria->addColumnAttribute('itensDeMaterial.idMaterial','item');
            $criteria->addColumnAttribute('itensDeMaterial.idRequisicao','idRequisicao');
            $criteria->addCriteria('idLicitacao','=', $this->idLicitacao);
            $criteria->addOrderAttribute('itensDeMaterial.idMaterial');
        }

		if ($this->idTipoLicitacao == '2')
		{
            $criteria = $this->getCriteria();
            $criteria->addColumnAttribute('itensDeServico.idServico','item');
            $criteria->addColumnAttribute('itensDeServico.idRequisicao','idRequisicao');
            $criteria->addCriteria('idLicitacao','=', $this->idLicitacao);
            $criteria->addOrderAttribute('itensDeServico.idServico');
        }

		if ($this->idTipoLicitacao == '3')
		{
            $criteria = $this->getCriteria();
            $criteria->addColumnAttribute('itensDeLivro.idMaterial','item');
            $criteria->addColumnAttribute('itensDeLivro.idRequisicao','idRequisicao');
            $criteria->addCriteria('idLicitacao','=', $this->idLicitacao);
            $criteria->addOrderAttribute('itensDeLivro.idMaterial');
        }

		return $criteria->retrieveAsQuery();
	}

	function listParticipantesSemMapa()
	{
		$criteria = $this->getCriteria();
		$criteria->addColumnAttribute('participantes.fornecedor.idFornecedor','idFornecedor');
		$criteria->addColumnAttribute('participantes.fornecedor.instituicao.nome','nome');
		$criteria->addColumnAttribute('participantes.fornecedor.instituicao.cgc','cgc');
		$criteria->addColumnAttribute('participantes.fornecedor.instituicao.municipio.municipio','municipio');

        if ($idLicitacao)
            $criteria->addCriteria('idLicitacao','=', $idLicitacao);
        else
            $criteria->addCriteria('idLicitacao','=', $this->idLicitacao);

        $criteria->setDistinct('mapa.fornecedor.idFornecedor');

		return $criteria->retrieveAsQuery();
	}

    function alteraStatus($status)
	{
		$this->status = $status;
	}

    /*
	function GetById($id)
	{
		$sql = new sql();
		$sql->SetColumns('
			idLicitacao,
			numero,
			dataabertura,
			datacriacao,
			status
		');
		$sql->SetTables('ad_licitacao');
		$sql->SetWhere('idLicitacao = ?');
		$query = $this->ObjQuery($sql->Select($id));
		if ($query)
		{
			$this->idLicitacao  = $query->fields('idLicitacao');
			$this->numero 	    = $query->fields('numero');
			$this->dataAbertura = $query->fields('dataabertura');
			$this->dataCriacao  = $query->fields('datacriacao');
			$this->status       = $query->fields('status');
		}
		return $this;
	}
    */

	/*---------------------------------------------------------
	
	Método GetIdBynumero($numero)

	Retorna o idLicitacao da licitação com o numero informado
	
	*---------------------------------------------------------*/
	
	function GetIdBynumero($numero)
	{
		$criteria = $this->getCriteria();
		$criteria->addColumnAttribute('idLicitacao');
		$criteria->addCriteria('numero','=',"'$numero'");
		$query = $criteria->retrieveAsQuery();
		return $query->fields('idLicitacao');
	}

	function Insert()
	{
		$sql = new sql();
		$sql->SetColumns('
			idLicitacao,
			numero,
			dataabertura,
			datacriacao,
			status
		');
		$sql->SetTables('ad_licitacao');
		$values= array(
			$this->idLicitacao, 
			$this->numero, 	   
			$this->dataAbertura,
			$this->dataCriacao,
			$this->status
		);
		$ok = @$this->Execute($sql->Insert($values));		
		return $ok;
	}

	/* ---------------------------------------

	Método GetNewId()

	----------------------------------------*/
	function GetNewId()
	{
		return $this->_db->GetNewId('seq_ad_licitacao');
	}

	function GetNewIdEmpenho()
	{
		return $this->_db->GetNewId('seq_ad_empenho');
	}

	function GetNewIdSuplementacaoItem()
	{
		return $this->_db->GetNewId('seq_ad_suplementacaoitem');
	}

	function GetNewIdEmpenhado()
	{
		return $this->_db->GetNewId('seq_ad_empenhado');
	}
	/* ---------------------------------------

	Método GetNewItemLicitacao($idLicitacao)
	
	Retorna o próximo numero do item da tabela
	itemlicitação

	----------------------------------------*/
	function GetNewItemLicitacao($idLicitacao)
	{
		$sql = new sql('max(item) as item','ad_itemlicitacao','idLicitacao = ?');		
		$args = array($idLicitacao);
		$query = $this->ObjQuery($sql->Select($args));
		$item = $query->fields('item')+1;				
		return $item;
	}

	function InsertItemLicitacao($idLicitacao,$item)
	{
		$sql = new sql();
		$sql->SetColumns('
			idLicitacao,
			item
		');
		$sql->SetTables('ad_itemlicitacao');
		$values = array(
			$idLicitacao, 
			$item 	   
		);
		$ok = @$this->Execute($sql->Insert($values));		
		return $ok;
	}
	function GetItensByLicitacaoParaInserirParticipante($idLicitacao)
	{
		$sql = new sql();
		$sql->SetColumns('
			idLicitacao,
			item
		');
		$sql->SetTables('ad_itemlicitacao');
		$sql->SetWhere('idLicitacao = ?');
		$nitens = $this->ObjQuery($sql->Select($idLicitacao));
		foreach ($nitens->result as $n)
		{
			$sql = new sql();
			$sql->SetColumns('
				idmaterial,
				quantentregue
			');
			$sql->SetTables('ad_itemreq');
			$sql->SetWhere('idLicitacao = ?');
			$sql->SetWhereAnd('item = ?');
			$qitem = $this->ObjQuery($sql->Select($n));
			foreach ($qitem->result as $q)
			{
				$idmaterial = $q[0];
				$quantidade += $q[1];
			}
			$sql = new sql();
			$sql->SetColumns('
				descricao
			');
			$sql->SetTables('ad_material');
			$sql->SetWhere('idmaterial = ?');
			$nome = $this->ObjQuery($sql->Select($idmaterial));
			$itens[] = array ($nome->result,$quantidade);
		}
		return $itens;
	}


	/*---------------------------------------------------------
	
	Método ListAbertas()

	Lista todas as licitações cuja data de abertura seja superior 
	à data atual
	
	*---------------------------------------------------------*/
	function ListAbertas()
	{
		$sql = new sql("l.numero,l.idLicitacao,l.datacriacao,l.dataabertura,l.status,tg.item2","ad_licitacao l, cm_tabelageral tg","tg.item1 = l.status and tabela = 'AD_ALMOXSTATUSLIC' and l.dataabertura >= ?","l.datacriacao");
		$dataAtual = date("d/m/Y");
		$dataAtual = ($dataAtual) ? ":".str_replace('?',"'$dataAtual'", $this->fmtStrToDate) : "";

		$query = $this->Query($sql,$dataAtual);		
		return $query->result;
	}

	/*---------------------------------------------------------
	
	Método ListFornecedoresByLicitacao($idLicitacao)

	Lista todos os fornecedores da Licitação informada
	
	*---------------------------------------------------------*/
	function ListFornecedoresByLicitacao($idLicitacao)
	{
		$sql = new sql("i.idinstituicao,i.nome,m.idLicitacao,f.idfornecedor,m.idLicitacao","cm_instituicao i, ad_fornecedor f, ad_mapalicitacao m","m.idfornecedor = f.idfornecedor AND f.idinstituicao = i.idinstituicao AND m.idLicitacao = ?");
        $sql->SetGroupBy("i.idinstituicao,i.nome,m.idLicitacao,f.idfornecedor,m.idLicitacao");
		$query = $this->Query($sql,$idLicitacao);		
		return $query->result;
	}

	/*------------------------------------------------
	Método ListMapa()
	Lista o mapa da licitacão
	*-----------------------------------------------*/
	function ListMapa()
	{
		if ($this->idTipoLicitacao == "1" OR $this->idTipoLicitacao == "4")        
		{
			$sql = new sql();
			$sql->SetColumns('ml.item,tg.item2,i.nome,ml.preco,ml.quantidade,tg.item1');
			$sql->SetTables('cm_instituicao i, ad_fornecedor f, ad_mapalicitacao ml, ad_itemlicitacao il, cm_tabelageral tg, ad_itemreq itemreq');
			$sql->SetWhere("itemreq.idlicitacao = ml.idlicitacao and itemreq.item = ml.item and ml.idlicitacao = il.idlicitacao AND ml.idfornecedor = f.idfornecedor AND f.idinstituicao = i.idinstituicao AND il.idlicitacao = ml.idlicitacao AND il.item = ml.item AND tg.item1 = ml.status AND tg.tabela = 'AD_STATUSITEMREQ' AND ml.idLicitacao = ? and ml.preco != 0");
			$sql->SetWhereAnd("itemreq.status != '0' and itemreq.status != 'C'"); //Itens não cancelados
            $sql->SetGroupBy('ml.item,tg.item2,i.nome,ml.preco,ml.quantidade,tg.item1');
			$sql->SetOrderBy('ml.item');
			$query = $this->ObjQuery($sql->Select($this->idLicitacao));
			return $query->result;
		}
		elseif ($this->idTipoLicitacao == "2")
		{
			$sql = new sql();
			$sql->SetColumns('ml.item,tg.item2,i.nome,ml.preco,ml.quantidade,tg.item1');
			$sql->SetTables('cm_instituicao i, ad_fornecedor f, ad_mapalicitacao ml, ad_itemlicitacao il, cm_tabelageral tg, ad_itemreqservext itemreq');
			$sql->SetWhere("itemreq.idlicitacao = ml.idlicitacao and itemreq.item = ml.item and ml.idlicitacao = il.idlicitacao AND ml.idfornecedor = f.idfornecedor AND f.idinstituicao = i.idinstituicao AND il.idlicitacao = ml.idlicitacao AND il.item = ml.item AND tg.item1 = ml.status AND tg.tabela = 'AD_STATUSITEMREQ' AND ml.idLicitacao = ?");
			$sql->SetWhereAnd("itemreq.status != '0' and itemreq.status != 'C'"); //Itens não cancelados
            $sql->SetGroupBy('ml.item,tg.item2,i.nome,ml.preco,ml.quantidade,tg.item1');
			$sql->SetOrderBy('ml.item');
			$query = $this->ObjQuery($sql->Select($this->idLicitacao));
			return $query->result;
		}
        else
		{
			$sql = new sql();
			$sql->SetColumns('ml.item,tg.item2,i.nome,ml.preco,ml.quantidade,tg.item1');
			$sql->SetTables('cm_instituicao i, ad_fornecedor f, ad_mapalicitacao ml, ad_itemlicitacao il, cm_tabelageral tg, ad_itemreqbib itemreq');
			$sql->SetWhere("itemreq.idlicitacao = ml.idlicitacao and itemreq.item = ml.item and ml.idlicitacao = il.idlicitacao AND ml.idfornecedor = f.idfornecedor AND f.idinstituicao = i.idinstituicao AND il.idlicitacao = ml.idlicitacao AND il.item = ml.item AND tg.item1 = ml.status AND tg.tabela = 'AD_STATUSITEMREQ' AND ml.idLicitacao = ?");
			$sql->SetWhereAnd("itemreq.status != '0' and itemreq.status != 'C'"); //Itens não cancelados
            $sql->SetGroupBy('ml.item,tg.item2,i.nome,ml.preco,ml.quantidade,tg.item1');
			$sql->SetOrderBy('ml.item');
			$query = $this->ObjQuery($sql->Select($this->idLicitacao));
			return $query->result;
		}
	}

	/*------------------------------------------------
	Método ListItens()
	Lista todos os itens da licitacão
	*-----------------------------------------------*/
	function ListItens()
	{
		$sql = new sql();
		$sql->SetColumns('i.item,m.codmaterial,m.idelemento,m.idsubelemento,m.descricao,i.idrequisicao,i.idmaterial');
		$sql->SetTables('ad_itemreq i, ad_material m');
		$sql->SetWhere("(i.status = '1' OR i.status > '4') and i.status <> 'C' and i.idmaterial = m.idmaterial and i.idlicitacao = ?");
        $sql->SetGroupBy('i.item,m.codmaterial,m.idelemento,m.idsubelemento,m.descricao,i.idrequisicao,i.idmaterial');
		$query = $this->ObjQuery($sql->Select($this->idLicitacao));
		return $query->result;
	}
	

	/*------------------------------------------------
	Método ListItensDeServico()
	Lista todos os itens da licitacão
	*-----------------------------------------------*/
	function ListItensDeServico()
	{
		$sql = new sql();
		$sql->SetColumns('i.item,s.codservico,s.idelemento,s.idsubelemento,i.complemento,i.idrequisicao,i.idservico');
		$sql->SetTables('ad_itemreqservext i, ad_servico s');
		$sql->SetWhere("(i.status = '1' OR i.status > '4') and i.status <> 'C' and i.idservico = s.idservico and i.idlicitacao = ?");
        $sql->SetGroupBy('i.item,i.idservico,i.complemento,s.idelemento,s.idsubelemento,s.codservico,i.idrequisicao,i.idservico');
		$query = $this->ObjQuery($sql->Select($this->idLicitacao));
		return $query->result;
	}

	/*------------------------------------------------
	Método ListItensDeLivro()
	Lista todos os itens da licitacão
	*-----------------------------------------------*/
	function ListItensDeLivro()
	{
		$sql = new sql();
		$sql->SetColumns('i.item,m.codmaterial,m.idelemento,m.idsubelemento,i.titulo,i.idrequisicao,i.idmaterial');
		$sql->SetTables('ad_itemreqbib i, ad_material m');
		$sql->SetWhere("(i.status = '1' OR i.status > '4') and i.status <> 'C' and i.idmaterial = m.idmaterial and i.idlicitacao = ?");
        $sql->SetGroupBy('i.item,i.idmaterial,i.titulo,m.idelemento,m.idsubelemento,m.codmaterial,i.idrequisicao,i.idmaterial');
		$query = $this->ObjQuery($sql->Select($this->idLicitacao));
		return $query->result;
	}

	/*------------------------------------------------
	Método ListIdMaterial()
	Lista todos os itens da licitacão
	*-----------------------------------------------*/
	function ListIdMaterial()
	{
		$sql = new sql();
		$sql->SetColumns('
			distinct(idmaterial)
		');
		$sql->SetTables('ad_itemreq');
		$sql->SetWhere('idLicitacao = ?');
		$query = $this->ObjQuery($sql->Select($this->idLicitacao));
		return $query->result;
	}

	/*---------------------------------------------------------
	
	Método InsertMapaLicitacao($idLicitacao,$item,$idParticipante,$preco)

	Insere um registro na tabela ad_mapalicitacao
	
	*---------------------------------------------------------*/
	function InsertMapaLicitacao($item,$idFornecedor,$preco)
	{
		$sql = new sql();
		$sql->SetColumns('
			idLicitacao,
			item,
			idfornecedor,
			preco,
            status
		');
		$sql->SetTables('ad_mapalicitacao');
		$values = array(
			$this->idLicitacao,
			$item,
			$idFornecedor,
			$preco,
            '1'
		);
		$ok = $this->Execute($sql->Insert($values));
		return $ok;
	}

	/*---------------------------------------------------------
	
	Método ListItensByIdLicitacao($idLicitacao)

	Lista todos os itens da Licitação informada
	
	*---------------------------------------------------------*/
	function ListItensByIdLicitacao()
	{
		if ($this->idTipoLicitacao == "1" OR $this->idTipoLicitacao == "4")
		{
			$sql = new sql("i.item, m.descricao, il.excecao","ad_itemreq i, ad_material m, ad_itemlicitacao il","m.idmaterial = i.idmaterial and il.idlicitacao = i.idlicitacao and il.item = i.item");
			$sql->SetWhereAnd("i.idLicitacao = ?");
			$sql->SetWhereAnd("i.status != '0' and i.status != 'C'"); //Itens não cancelados
			$sql->SetGroupBy("i.item, m.descricao,il.excecao");
		}
		else if ($this->idTipoLicitacao == "2")
		{
			$sql = new sql("i.item, s.descricao, il.excecao,i.complemento","ad_itemreqservext i, ad_servico s, ad_itemlicitacao il","s.idservico = i.idservico and il.idlicitacao = i.idlicitacao and il.item = i.item");
			$sql->SetWhereAnd("i.idLicitacao = ?");
			$sql->SetWhereAnd("i.status != '0' and i.status != 'C'"); //Itens não cancelados
			$sql->SetGroupBy("i.item, s.descricao,il.excecao,i.complemento");
		}
        else
		{
			$sql = new sql("i.item, i.titulo, il.excecao","ad_itemreqbib i, ad_material m, ad_itemlicitacao il","m.idmaterial = i.idmaterial and il.idlicitacao = i.idlicitacao and il.item = i.item");
			$sql->SetWhereAnd("i.idLicitacao = ?");
			$sql->SetWhereAnd("i.status != '0' and i.status != 'C'"); //Itens não cancelados
			$sql->SetGroupBy("i.item, i.titulo,il.excecao");
		}

		$query = $this->Query($sql,$this->idLicitacao);		
		return $query->result;
	}

	/*---------------------------------------------------------
	
	Método UpdateMapaLicitacao($idLicitacao,$item,$idParticipante,$preco)

	altera um registro na tabela ad_mapalicitacao
	
	*---------------------------------------------------------*/
	function UpdateMapaLicitacao($item,$idFornecedor,$preco,$unidade,$quantidade,$status)
	{
		//$preco = ($preco) ? ":".str_replace('?',"'$preco'", $this->fmtStrToNumber) : "";
		$sql = new sql('preco,marcamodelo,quantidade,status','ad_mapalicitacao','idLicitacao = ? and item = ? and idfornecedor = ?');
		$values = array(
			$preco,
            $unidade,
            $quantidade,
            $status,
			$this->idLicitacao,
			$item,
			$idFornecedor
		);		

		$ok = $this->Execute($sql->Update($values));
		//$ok = true;
		return $ok;
	}

	/*---------------------------------------------------------
	
	Método ExisteMapaLicitacao($item,$idFornecedor)

	Retorna true se o registro já existir na tabela ad_mapalicitacao
	
	*---------------------------------------------------------*/
	function ExisteMapaLicitacao($item = 0,$idFornecedor = 0)
	{
		$sql = new sql();
		$sql->SetColumns('
			idLicitacao,
			item,
			idfornecedor
		');
		$sql->SetTables('ad_mapalicitacao');

        if ($item == 0 && $fornecedor == 0)
        {
    		$sql->SetWhere('idLicitacao = ?');		
	    	$args = array($this->idLicitacao);
        }
        else
        {
    		$sql->SetWhere('idLicitacao = ? and item = ? and idfornecedor = ?');		
	    	$args = array($this->idLicitacao,$item,$idFornecedor);
        }

		$query = $this->Query($sql,$args);
		
		if (!$query->eof())
			return true;
		else 
			return false;
	}

	/*---------------------------------------------------------
	
	Método GetTotalDeItensByLicitacao($idLicitacao)

	Retorna o numero total de itens da Licitação informada
	
	*---------------------------------------------------------*/
	function GetTotalDeItensByLicitacao($idLicitacao)
	{
		$criteria = $this->getCriteria();
		$criteria->addColumnAttribute('count(itens.item)', 'total');
		$criteria->addCriteria('itens.idLicitacao','=',$idLicitacao);
		$query = $criteria->retrieveAsQuery();
		return $query->fields('total');
	}
	
	
	/*---------------------------------------------------------
	
	Método getMenorQuantidadeDoMapa($item)

	Retorna a quantidade do mapa o numero total de itens da Licitação informada
	
	*---------------------------------------------------------*/
	function getMenorQuantidadeDoMapa($item)
	{
		$criteria = $this->getCriteria();
		$criteria->addColumnAttribute('min(mapa.quantidade)', 'qtdmin');
		$criteria->addCriteria('mapa.idLicitacao','=',$this->idLicitacao);
        $criteria->addCriteria('mapa.item','=',$item);
		$query = $criteria->retrieveAsQuery();
		return $query->fields('qtdmin');
	}

	/*---------------------------------------------------------
	
	Método setQuantidadeNoMapa($item,$quantidade)

    Seta a quantidade no mapa de licitacao para o item informado

	*---------------------------------------------------------*/
	function setQuantidadeNoMapa($item,$quantidade)
	{
		$sql = new sql('quantidade','ad_mapalicitacao','idLicitacao = ? and item = ?');
		$values = array($quantidade,$this->idLicitacao,$item);
		$ok = $this->Execute($sql->Update($values));
	}

	function GetQuantidadeAEmpenhar($idLicitacao)
	{
		global $MIOLO, $module;

		$criteria = $this->getCriteria();
		$criteria->addColumnAttribute('mapa.item');
		$criteria->addColumnAttribute('sum(mapa.quantidade)');
		$criteria->addCriteria('mapa.idLicitacao','=',$idLicitacao);
		$criteria->addCriteria('mapa.vencedor','=',"'1'");
		$criteria->addGroupAttribute('mapa.item');
		$query = $criteria->retrieveAsQuery();

		$quantidade = 0;
		$empenhado = $MIOLO->GetBusiness('adm', 'empenhado');
		foreach($query->result as $r)
		{
			$criteria = $empenhado->getCriteria();
			$criteria->addColumnAttribute('sum(quantidadeEmp)');
			$criteria->addCriteria('idLicitacao','=',$idLicitacao);
			$criteria->addCriteria('item','=',$r[0]);
			$query2 = $criteria->retrieveAsQuery();

			if($query2->result[0][0] < $r[1])
			{
				$quantidade += $r[1] - $query2->result[0][0];
			}
		}
		return $quantidade;
	}

	/*---------------------------------------------------------
	
	Método ListParticipantesByLicitacao($idLicitacao)

	Lista todos os participantes da Licitação informada
	
	*---------------------------------------------------------*/
	function ListParticipantesByLicitacao($idLicitacao = null)
    {
		$sql = new sql("m.idfornecedor,i.nome,m.idLicitacao","cm_instituicao i, ad_fornecedor f, ad_mapalicitacao m","m.idfornecedor = f.idfornecedor AND f.idinstituicao = i.idinstituicao AND m.idLicitacao = ? and m.preco != 0");
		$sql->SetGroupBy("m.idfornecedor,i.nome,m.idLicitacao");
		$sql->SetOrderBy("i.nome");
		$query = $this->Query($sql,$this->idLicitacao);		
		return $query->result;
	}

	/*---------------------------------------------------------
	
	Método SetVencedor($idLicitacao,$item,$idParticipante)

	Atualiza a tabela ad_mapalicitacao setando "1" no campo
	vencedor no Participante informado e "0" nos demais 
	participantes		
	
	*---------------------------------------------------------*/
	function SetVencedor($item,$idFornecedor)
	{
		$sql = new sql('vencedor','ad_mapalicitacao','idLicitacao = ? and item = ? and idfornecedor != ?');
		$values = array("0",$this->idLicitacao,$item,$idFornecedor);
		$ok = $this->Execute($sql->Update($values));
		//var_dump($sql->Update($values));
		//$ok = true;

		$sql2 = new sql('vencedor','ad_mapalicitacao','idLicitacao = ? and item = ? and idfornecedor = ?');
		$values2 = array("1",$this->idLicitacao,$item,$idFornecedor);
		$ok2 = $this->Execute($sql2->Update($values2));
		//var_dump($sql2->Update($values2));
		$ok2 = true;

		if ($ok && $ok2)
			return true;
		else
			return false;
	}

	/* ---------------------------------------

	Método SetStatus()
	Muda o status das licitações

	----------------------------------------*/
	function SetStatus($status)
	{
		$sql = new sql();
		$sql->SetColumns('
			status
		');
		$sql->SetTables('
			ad_licitacao
		');
		$sql->SetWhere('idLicitacao = ?');
		$values = array(
			$status,
			$this->idLicitacao
		);
        //var_dump($sql->Update($values));
		$ok = $this->Execute($sql->Update($values));        
		if ($ok) {$this->Log(OP_UPD,"idLicitacao: $this->idLicitacao status:$status");}
		return $ok;
	}

	/*---------------------------------------------------------
	
	Método ListByStatus($status)

	Lista todas as licitações com o status informado
	
	*---------------------------------------------------------*/
	function ListByStatus($status)
	{
		$sql = new sql("idLicitacao,numero","ad_licitacao","status = ?");

		$query = $this->Query($sql,$status);
		//var_dump($sql->Select($dataAtual));
		return $query->result;
	}
	
	function ListModalidadeIdByStatus($status)
	{
		$sql = new sql("l.idLicitacao, m.descricao", "ad_licitacao l, ad_modalidadelicitacao m", "(l.status = ?) and (l.idmodalidadelicitacao = m.idmodalidadelicitacao)", "m.descricao, l.idlicitacao");

		$query = $this->Query($sql,$status);
		//var_dump($sql->Select($dataAtual));
		return $query->result;
	}

	/*---------------------------------------------------------
	
	Método GetParticipanteVencedor($idLicitacao,$item)

	Retorna os dados do participante vencedor do item/licitação
	informados
	
	*---------------------------------------------------------*/
	function GetParticipanteVencedor($idLicitacao,$item)
	{
		$sql = new sql("idfornecedor","ad_mapalicitacao","vencedor = '1' and idLicitacao = ? and item = ?");
		$values = array($this->idLicitacao,$item);
		$query = $this->Query($sql,$values);
		//var_dump($sql->Select($values));
		return $query->fields('idfornecedor');
	}

	

	/*---------------------------------------------------------
	
	Método GetParticipanteComMenorPreco($idLicitacao,$item)

	Retorna os dados do participante vencedor do item/licitação
	informados
	
	*---------------------------------------------------------*/
	function GetParticipanteComMenorPreco($idLicitacao,$item)
	{
		$sql = new sql("min(preco),idfornecedor","ad_mapalicitacao","status = '1' and idLicitacao = ? and item = ? and preco != 0");
		$sql->SetGroupBy('preco,idfornecedor');
		$sql->SetOrderBy('preco');
		$values = array($idLicitacao,$item);
		$query = $this->Query($sql,$values);
		//var_dump($sql->Select($values));
		return $query->result[0][1];
	}

	/*------------------------------------------------
	Método ListAllStatus()
	Lista todos os status da licitacão
	*-----------------------------------------------*/
	function ListAllStatus()
	{
		$sql = new sql();
		$sql->SetColumns('item1,item2');
		$sql->SetTables('cm_tabelageral');
		$sql->SetWhere("tabela = 'AD_ALMOXSTATUSLIC'");
		$query = $this->ObjQuery($sql->Select());
		return $query->result;
	}

	/* ---------------------------------------

	Method: GetInstituicaoByIdParticipante($idParticipante)
	Author: Danilo Fernandes
	Created: 18/11/2004
	Updated: 18/11/2004
	Used: frmProposta.class, e ?
	Description: Traz as informações da instituição relativa
		     ao participante informado

	----------------------------------------*/
	function GetInstituicaoByIdParticipante($idFornecedor)
	{
		$sql = new sql();
		$sql->SetColumns('i.nome,i.rua,i.numero,i.complemento,i.bairro,m.municipio,u.uf,i.cep,i.telefone,i.email');
		$sql->SetTables('cm_instituicao i, ad_fornecedor f, cm_municipio m, cm_uf u');
		$sql->SetWhere('i.idinstituicao = f.idinstituicao and i.idmunicipio = m.idmunicipio and u.iduf = m.iduf');
		$sql->SetWhereAnd('f.idfornecedor = ?');
		
		$query = $this->Query($sql,$idFornecedor);
		if ($query)
		{
			$this->nome  = $query->fields('nome');
			$this->rua  = $query->fields('rua');
			$this->numero  = $query->fields('numero');
			$this->complemento  = $query->fields('complemento');
			$this->bairro  = $query->fields('bairro');
			$this->municipio  = $query->fields('municipio');
			$this->uf  = $query->fields('uf');
			$this->cep  = $query->fields('cep');
			$this->telefone  = $query->fields('telefone');
			$this->email = $query->fields('email');
		}
		return $this;
	}

	/*---------------------------------------------------------
	
	Method ListVencedoresByLicitacao($idLicitacao)
	Author: Danilo Fernandes
	Created: 22/11/2004
	Updated: 22/11/2004
	Used: frmEmpenho.class
	Description: Lista todos os vencedores da Licitação informada
	
	*---------------------------------------------------------*/
	function ListVencedoresByLicitacao()
	{
		$sql = new sql("distinct(m.idfornecedor),i.nome,m.idLicitacao,i.cgc","cm_instituicao i, ad_fornecedor f, ad_mapalicitacao m","m.idfornecedor = f.idfornecedor AND f.idinstituicao = i.idinstituicao AND m.vencedor = '1' AND m.idLicitacao = ?");
		$query = $this->Query($sql,$this->idLicitacao);
		//var_dump($sql->Select($idLicitacao));
		return $query->result;
	}
	
	/*---------------------------------------------------------
	
	Method.....: CriaEmpenho($idEmpenho,$numero,$idFornecedor,$dataEmpenho,$tipoEmpenho,$tipoEntrega,$valorEmpenho)
	Author.....: Danilo Fernandes
	Created....: 22/11/2004
	Updated....: 25/11/2004
	Used.......: frmEmpenho.class
	Description: Insere um registro na tabela ad_empenho
	
	*---------------------------------------------------------*/
	function CriaEmpenho($idEmpenho,$numero,$idFornecedor,$dataEmpenho,$tipoEmpenho,$tipoEntrega,$valorEmpenho)
	{
		$dataEmpenho = ($dataEmpenho) ? ":".str_replace('?',"'$dataEmpenho'", $this->fmtStrToDate) : "";		

		$sql = new sql();
		$sql->SetColumns('idempenho,numero,idfornecedor,dataempenho,tipoempenho,tipoentrega,valorempenho');
		$sql->SetTables('ad_empenho');
		$values = array($idEmpenho,$numero,$idFornecedor,$dataEmpenho,$tipoEmpenho,$tipoEntrega,$valorEmpenho);
		
		$ok = $this->Execute($sql->Insert($values));
		//var_dump($sql->Insert($values));
		//$ok = true;
		return $ok;
	}

	/*------------------------------------------------------------------------------------------------
	
	Method.....: ListItemLicitacaoByVencedores($idLicitacao,$idFornecedor)
	Author.....: Danilo Fernandes
	Created....: 22/11/2004
	Updated....: 10/5/2006
	Used.......: frmEmpenho.class
	Description: Lista os itens da licitação informada que foram
		     vencidos pelo fornecedor informado
	
	*------------------------------------------------------------------------------------------------*/
	function ListItemLicitacaoByVencedores($idLicitacao,$idFornecedor)
	{
		$sql = new sql();
		$sql->SetColumns("m.item,mat.descricao,m.preco");
		$sql->SetTables("ad_mapalicitacao m,ad_licitacao l,ad_material mat,ad_itemreq i");
		$sql->SetWhereAnd("l.idlicitacao=?");
		$sql->SetWhere("m.idfornecedor = ?");
		$sql->SetWhereAnd("m.idlicitacao = l.idlicitacao");
		$sql->SetWhereAnd("m.idlicitacao = i.idlicitacao");
		$sql->SetWhereAnd("m.vencedor = 1");
		$sql->SetWhereAnd("m.item = i.item");
		$sql->SetWhereAnd("i.idmaterial = mat.idmaterial");
		$values = array($idLicitacao,$idFornecedor);		
		$query = $this->Query($sql,$values);
		//var_dump($sql->Select($values));
		return $query;
	}

	/*------------------------------------------------------------------------------------------------
	
	Method.....: SetIdEmpenhoAtItemLicitacao($idEmpenho,$idLicitacao,$item)
	Author.....: Danilo Fernandes
	Created....: 25/11/2004
	Updated....: 25/11/2004
	Used.......: frmEmpenho.class
	Description: Atualiza o idempenho na tabela de ad_itemlicitação
	
	*------------------------------------------------------------------------------------------------*/
	function SetIdEmpenhoAtItemLicitacao($idEmpenho,$idLicitacao,$item)
	{
		$sql = new sql('idempenho','ad_itemlicitacao','idLicitacao = ? and item = ?');
		$values = array($idEmpenho,$idLicitacao,$item);
		$ok = $this->Execute($sql->Update($values));
		//var_dump($sql->Update($values));
		//$ok = true;
		return $ok;
	}

	/*------------------------------------------------------------------------------------------------
	
	Method.....: EstaEmpenhado($idLicitacao,$idFornecedor)
	Author.....: Danilo Fernandes
	Created....: 22/11/2004
	Updated....: 25/11/2004
	Used.......: frmEmpenho.class
	Description: Retorna true se foi feito algum empenho com o fornecedor informado
		     para a licitação informada.
	
	*------------------------------------------------------------------------------------------------*/
	function EstaEmpenhado($idLicitacao,$idFornecedor)
	{
		$sql = new sql();
		$sql->SetColumns("i.idempenho");
		$sql->SetTables("
			ad_fornecedor f,
			ad_participante p,
			ad_mapalicitacao m,
			ad_itemlicitacao i
			");
		$sql->SetWhere("p.idLicitacao = i.idLicitacao");
		$sql->setwhereAnd("p.idLicitacao = m.idLicitacao");
		$sql->SetWhereAnd("i.idLicitacao = m.idLicitacao");
		$sql->SetWhereAnd("i.item = m.item");		
		$sql->SetWhereAnd("p.idparticipante = m.idparticipante");
		$sql->SetWhereAnd("p.idfornecedor = f.idfornecedor");
		$sql->SetWhereAnd("p.idLicitacao = ? and f.idfornecedor = ?");
		$sql->SetWhereAnd("m.vencedor = '1'");
		$sql->SetOrderBy("i.item");		
		$values = array($idLicitacao,$idFornecedor);		
		$query = $this->Query($sql,$values);
		return $query->fields('idempenho');
	}

	/*------------------------------------------------------------------------------------------------
	
	Method.....: GetValorEmpenhoByLicitacaoFornecedor($idLicitacao,$idFornecedor)
	Author.....: Danilo Fernandes
	Created....: 30/11/2004
	Updated....: 30/11/2004
	Used.......: frmEmpenho.class
	Description: Retorna o somatório dos valores dos itens vencidos pelo fornecedor 
		     informado na licitação informada.
	
	*------------------------------------------------------------------------------------------------*/
	function GetValorEmpenhoByLicitacaoFornecedor($idLicitacao,$idFornecedor)
	{
		$sql = new sql();
		$sql->SetColumns("sum(m.preco) as valorEmpenho");
		$sql->SetTables("ad_fornecedor f,ad_participante p,ad_mapalicitacao m, ad_itemlicitacao i");
		$sql->SetWhere("p.idLicitacao = i.idLicitacao and p.idparticipante = m.idparticipante and p.idfornecedor = f.idfornecedor and i.item = m.item and m.vencedor = '1'");
		$sql->SetWhereAnd("p.idLicitacao = ? and f.idfornecedor = ?");
		$values = array($idLicitacao,$idFornecedor);		
		$query = $this->Query($sql,$values);
		//var_dump($sql->Select($values));
		return $query->fields('valorEmpenho');
	}

	/*------------------------------------------------------------------------------------------------
	
	Method.....: ListLicitacaoByVencedorStatus($idFornecedor,$status)
	Author.....: Ricardo Silva Campos
	Created....: 4/5/2006
	Updated....: 10/5/2006
	Used.......: frmEmpenhoNew.class
	Description: Lista as licitações que foram
		     vencidos pelo fornecedor e status informado
	
	*------------------------------------------------------------------------------------------------*/
	function ListLicitacaoByVencedorStatus($idFornecedor,$status)

	{
		$sql = new sql();
		$sql->SetGroupBy("l.idlicitacao,m.idlicitacao");
		$sql->SetColumns("l.idlicitacao,m.idlicitacao");
		$sql->SetTables("ad_mapalicitacao m,ad_licitacao l,ad_material mat,ad_itemreq i");
		$sql->SetWhere("m.idfornecedor = ?");
		$sql->SetWhereAnd("l.status=?");
		$sql->SetWhereAnd("m.idlicitacao = l.idlicitacao");
		$sql->SetWhereAnd("m.idlicitacao = i.idlicitacao");
		$sql->SetWhereAnd("m.item = i.item");
		$sql->SetWhereAnd("i.idmaterial = mat.idmaterial");
		$values = array($idFornecedor,$status);		
		$query = $this->Query($sql,$values);
		return $query->result;
	}

	/*------------------------------------------------------------------------------------------------
	
	Method.....: GetValorEmpenhoByLicitacaoFornecedorItem($idFornecedor,$idLicitacao,$item)
	Author.....: Ricardo Silva Campos
	Created....: 16/5/2006
	Updated....: 16/5/2006
	Used.......: frmEmpenhoNew2.class
	Description: Retorna o somatório dos valores dos itens vencidos pelo fornecedor 
		     informado na licitação informada.
	
	*------------------------------------------------------------------------------------------------*/
	function GetValorEmpenhoByLicitacaoFornecedorItem($idFornecedor,$idLicitacao,$item)
	{
		$sql = new sql();
		$sql->SetColumns("m.preco");
		$sql->SetTables("ad_mapalicitacao m,ad_licitacao l,ad_material mat,ad_itemreq i");
		$sql->SetWhere("m.idfornecedor = ?");
		$sql->SetWhere("m.idlicitacao = ?");
		$sql->SetWhere("m.item = ?");
		$sql->SetWhereAnd("l.status=4");
		$sql->SetWhereAnd("m.idlicitacao = l.idlicitacao");
		$sql->SetWhereAnd("m.idlicitacao = i.idlicitacao");
		$sql->SetWhereAnd("m.item = i.item");
		$sql->SetWhereAnd("i.idmaterial = mat.idmaterial");
		$values = array($idFornecedor,$idLicitacao,$item);		
		$query = $this->Query($sql,$values);
		return $query->result;
	}
	function getItemIdMatQtdReq($idLicitacao)
	{
		global $MIOLO;
		$var = $MIOLO->getBusiness('adm','itemreq');
		$criteria = $var->getCriteria();	
		$criteria->AddColumnAttribute('item');
		$criteria->AddColumnAttribute('idmaterial');
		$criteria->AddColumnAttribute('quantpedida');
		$criteria->AddColumnAttribute('idrequisicao');
		$criteria->addCriteria('idlicitacao','=',$idLicitacao);		
		return $criteria->retrieveAsQuery();
	}
	
	
	
	
	
	function getUoRequisitante($idRequisicao)
	{
		global $MIOLO;
		$var = $MIOLO->getBusiness('adm','requisicao');
		$criteria = $var->getCriteria();	
		$criteria->AddColumnAttribute('iduoreq');		
		$criteria->addCriteria('idrequisicao','=',$idRequisicao);		
		return $criteria->retrieveAsQuery();
	}
	
	function getSiglaUoReq($idUoReq)
	{
		global $MIOLO;
		$var = $MIOLO->getBusiness('adm','uo');
		$criteria = $var->getCriteria();	
		$criteria->AddColumnAttribute('sigla');		
		$criteria->addCriteria('iduo','=',$idUoReq);		
		return $criteria->retrieveAsQuery();
	}
	
	function getIdRequisicaoByIdLicitacao($idLicitacao)
	{
		global $MIOLO;
		$var = $MIOLO->getBusiness('adm','requisicao');
		$criteria = $var->getCriteria();	
		$criteria->AddColumnAttribute('iduoreq');		
		$criteria->addCriteria('idrequisicao','=',$idRequisicao);		
		return $criteria->retrieveAsQuery();
	}
	
    function getIdUoReqByIdLicitacao()
	{
		global $MIOLO;

		$var = $MIOLO->getBusiness('adm','itemreq');
		$criteria = $var->getCriteria();	
		$criteria->AddColumnAttribute('idRequisicao');
        $criteria->AddColumnAttribute('item');
        $criteria->addCriteria('idLicitacao','=',$this->idLicitacao);
        //$criteria->addCriteria('item','>','0');
		$rs = $criteria->retrieveAsQuery();

		$req = $MIOLO->getBusiness('adm','requisicao',$rs->result[0][0]);
        return $req->idUoRequisitante;
	}

	function getItemIdReq($idLicitacao)
	{
		global $MIOLO;
		$var = $MIOLO->getBusiness('adm','itemreq');
		$criteria = $var->getCriteria();	
		$criteria->AddColumnAttribute('item');		
		$criteria->AddColumnAttribute('idrequisicao');		
		$criteria->addCriteria('idlicitacao','=',$idLicitacao);		
		return $criteria->retrieveAsQuery();	
	}
	
	function getMatQdtMat($idLicitacao,$idRequisicao,$item)
	{
		global $MIOLO;
		$var = $MIOLO->getBusiness('adm','itemreq');
		$criteria = $var->getCriteria();
		$criteria->AddColumnAttribute('idmaterial');		
		$criteria->AddColumnAttribute('quantpedida');		
		$criteria->addCriteria('idlicitacao','=',$idLicitacao);		
		$criteria->addCriteria('idrequisicao','=',$idRequisicao);		
		$criteria->addCriteria('item','=',$item);		
		return $criteria->retrieveAsQuery();	
	}

	function ListCgcParticipantesByLicitacao($idLicitacao = null)
    {
		$sql = new sql("distinct(i.cgc),i.nome,i.rua,i.numero,i.complemento,i.bairro,i.cep,i.telefone,i.email,i.fax,mun.municipio,mun.iduf","cm_instituicao i, ad_fornecedor f, ad_mapalicitacao m,cm_municipio mun","mun.idmunicipio = i.idmunicipio AND m.idfornecedor = f.idfornecedor AND f.idinstituicao = i.idinstituicao AND m.idLicitacao = ?");
		//$sql->SetGroupBy("m.idfornecedor,i.nome,m.idLicitacao");
		$query = $this->Query($sql,$this->idLicitacao);
		//$query = $this->Query($sql,$idLicitacao);
		//var_dump($sql->Select($idLicitacao));
		return $query->result;
	}

/*			Função Antiga	

	function GetItensRequisitados()
	{
        if ($this->idTipoLicitacao == '1' OR $this->idTipoLicitacao == '4') //COMPRA
        {
            $criteria = $this->getCriteria();
			//
			$criteria->addColumnAttribute("(itensDeMaterial.item||'E'||itensDeMaterial.idRequisicao) as chave");
			//
            $criteria->addColumnAttribute('itensDeMaterial.requisicao.uoRequisitante.sigla');
            $criteria->addColumnAttribute('itensDeMaterial.material.codmaterial');
            $criteria->addColumnAttribute('itensDeMaterial.material.descricao');
            $criteria->addColumnAttribute('itensDeMaterial.material.unidade');
            $criteria->addColumnAttribute('itensDeMaterial.quantPedida');
            $criteria->addColumnAttribute('itensDeMaterial.item');
            $criteria->addColumnAttribute('itensDeMaterial.idRequisicao');
            $criteria->addColumnAttribute('itensDeMaterial.precoEstimado');
            $criteria->addColumnAttribute('itensDeMaterial.material.idelemento');
            $criteria->addColumnAttribute('itensDeMaterial.material.idsubelemento');
            $criteria->addColumnAttribute('itensDeMaterial.idMaterial');

            
            
            $criteria->addCriteria('idLicitacao','=',$this->idLicitacao);
            $criteria->addCriteria("itensDeMaterial.requisicao.suplementar","<>","'S'");
            $criteria->addCriteria("itensDeMaterial.requisicao.dataHora",">","'31/12/2007'");

            $cc1 = new CriteriaCondition();
				$cc1->addCriteria($criteria->getCriteria("itensDeMaterial.status","=","'1'"));
                $cc1->addOrCriteria($criteria->getCriteria("itensDeMaterial.status","=","'6'"));
				$cc1->addOrCriteria($criteria->getCriteria("itensDeMaterial.status",">","'4'"));
			$criteria->addCriteria($cc1);
			$criteria->addCriteria($criteria->getCriteria("itensDeMaterial.status","<>","'C'"));

            $criteria->addOrderAttribute('itensDeMaterial.item');
            $criteria->addOrderAttribute('material.idelemento');
            $criteria->addOrderAttribute('material.idsubelemento');           
            $criteria->addOrderAttribute('material.idMaterial');
            // IFSP
            //$criteria->addOrderAttribute('')
            
            return $criteria->retrieveAsQuery();
        }
        
        if ($this->idTipoLicitacao == '2') //SERVICO
        {
            $criteria = $this->getCriteria();
            $criteria->addColumnAttribute('itensDeServico.requisicao.uoRequisitante.sigla');
            $criteria->addColumnAttribute('itensDeServico.servico.codServico','codMaterial');
            $criteria->addColumnAttribute('itensDeServico.complemento','descricao');
            $criteria->addColumnAttribute('itensDeServico.quantidade');
            $criteria->addColumnAttribute('itensDeServico.item');
            $criteria->addColumnAttribute('itensDeServico.valorEst');		
            $criteria->addColumnAttribute('itensDeServico.idRequisicao');
			$criteria->addColumnAttribute('itensDeServico.unidade');
			$criteria->addColumnAttribute('itensDeServico.servico.idelemento');
			$criteria->addColumnAttribute('itensDeServico.servico.idsubelemento');
			$criteria->addColumnAttribute('itensDeServico.idServico');
			$cc = new CriteriaCondition();
				$cc->addCriteria($criteria->getCriteria("itensDeServico.status","=","'1'"));
                $cc->addOrCriteria($criteria->getCriteria("itensDeServico.status","=","'6'"));
	        	$cc->addOrCriteria($criteria->getCriteria("itensDeServico.status",">","'4'"));
			$criteria->addCriteria($cc);
			$criteria->addCriteria($criteria->getCriteria("itensDeServico.status","<>","'C'"));
            $criteria->addCriteria('idLicitacao','=',$this->idLicitacao);
            $criteria->addCriteria("itensDeServico.requisicao.suplementar","<>","'S'");
            $criteria->addCriteria("itensDeServico.requisicao.dataHora",">","'31/12/2007'");

            $criteria->addOrderAttribute('itensDeServico.item');
            $criteria->addOrderAttribute('servico.idelemento');
            $criteria->addOrderAttribute('servico.idsubelemento');
            
                       
            $criteria->addOrderAttribute('servico.idServico');
            return $criteria->retrieveAsQuery();           
        }

        if ($this->idTipoLicitacao == '3') //LIVROS
        {
            $criteria = $this->getCriteria();
            $criteria->addColumnAttribute('itensDeLivro.requisicao.uoRequisitante.sigla');
            $criteria->addColumnAttribute('itensDeLivro.material.codmaterial');
            $criteria->addColumnAttribute('itensDeLivro.titulo');
            $criteria->addColumnAttribute('itensDeLivro.material.unidade');
            $criteria->addColumnAttribute('itensDeLivro.quantPedida');
            $criteria->addColumnAttribute('itensDeLivro.item');
            $criteria->addColumnAttribute('itensDeLivro.idRequisicao');
            $criteria->addColumnAttribute('itensDeLivro.precoEstimado');
            $criteria->addColumnAttribute('itensDeLivro.material.idelemento');
            $criteria->addColumnAttribute('itensDeLivro.material.idsubelemento');
            $criteria->addColumnAttribute('itensDeLivro.idMaterial');
            $criteria->addCriteria('idLicitacao','=',$this->idLicitacao);
            $criteria->addCriteria("itensDeLivro.requisicao.suplementar","<>","'S'");
            $criteria->addCriteria("itensDeLivro.requisicao.dataHora",">","'31/12/2007'");
            
            $cc1 = new CriteriaCondition();
				$cc1->addCriteria($criteria->getCriteria("itensDeLivro.status","=","'1'"));
                $cc1->addOrCriteria($criteria->getCriteria("itensDeLivro.status","=","'6'"));
				$cc1->addOrCriteria($criteria->getCriteria("itensDeLivro.status",">","'4'"));
			$criteria->addCriteria($cc1);
			$criteria->addCriteria($criteria->getCriteria("itensDeLivro.status","<>","'C'"));
            $criteria->addOrderAttribute('itensDeLivro.item');
            $criteria->addOrderAttribute('material.idelemento');
            $criteria->addOrderAttribute('material.idsubelemento');           
            $criteria->addOrderAttribute('material.idMaterial');
            return $criteria->retrieveAsQuery();
        }
	}	
*/

	function GetItensRequisitados()
	{
        if ($this->idTipoLicitacao == '1' OR $this->idTipoLicitacao == '4') //COMPRA
        {
            $criteria = $this->getCriteria();
//
			

			//$criteria->addColumnAttribute("(itensDeMaterial.item||'E'||itensDeMaterial.idRequisicao) as chave");			
            //
            $criteria->addColumnAttribute('itensDeMaterial.item');

            $criteria->addColumnAttribute('itensDeMaterial.material.codmaterial');
            $criteria->addColumnAttribute('itensDeMaterial.material.idelemento');			
            $criteria->addColumnAttribute('itensDeMaterial.material.idsubelemento');
			$criteria->addColumnAttribute('itensDeMaterial.requisicao.uoRequisitante.sigla');			
            $criteria->addColumnAttribute('itensDeMaterial.material.descricao');
            $criteria->addColumnAttribute('itensDeMaterial.material.unidade');
            $criteria->addColumnAttribute('itensDeMaterial.quantPedida');
            $criteria->addColumnAttribute('itensDeMaterial.idRequisicao');
            $criteria->addColumnAttribute('itensDeMaterial.precoEstimado');
            $criteria->addColumnAttribute('itensDeMaterial.idMaterial');

            
            
            $criteria->addCriteria('idLicitacao','=',$this->idLicitacao);
            $criteria->addCriteria("itensDeMaterial.requisicao.suplementar","<>","'S'");
//            $criteria->addCriteria("itensDeMaterial.requisicao.dataHora",">","'31/12/2007'");

            $cc1 = new CriteriaCondition();
				$cc1->addCriteria($criteria->getCriteria("itensDeMaterial.status","=","'1'"));
                $cc1->addOrCriteria($criteria->getCriteria("itensDeMaterial.status","=","'6'"));
				$cc1->addOrCriteria($criteria->getCriteria("itensDeMaterial.status",">","'4'"));
			$criteria->addCriteria($cc1);
			$criteria->addCriteria($criteria->getCriteria("itensDeMaterial.status","<>","'C'"));
 //
			//$criteria->SetDistinct('itensDeMaterial.item');
			//
			
            $criteria->addOrderAttribute('itensDeMaterial.item');
            $criteria->addOrderAttribute('material.idelemento');
            $criteria->addOrderAttribute('material.idsubelemento');           
            $criteria->addOrderAttribute('material.idMaterial');
            // IFSP
            //$criteria->addOrderAttribute('')
            
            return $criteria->retrieveAsQuery();
        }
        
        if ($this->idTipoLicitacao == '2') //SERVICO
        {
            $criteria = $this->getCriteria();
			//
						//$criteria->addColumnAttribute("(itensDeServico.item||'E'||itensDeServico.idRequisicao) as chave");
			//
				//
		//	$criteria->SetDistinct(true);
			//
            $criteria->addColumnAttribute('itensDeServico.requisicao.uoRequisitante.sigla');
            $criteria->addColumnAttribute('itensDeServico.servico.codServico','codMaterial');
            $criteria->addColumnAttribute('itensDeServico.complemento','descricao');
            $criteria->addColumnAttribute('itensDeServico.quantidade');
            $criteria->addColumnAttribute('itensDeServico.item');
            $criteria->addColumnAttribute('itensDeServico.valorEst');		
            $criteria->addColumnAttribute('itensDeServico.idRequisicao');
			$criteria->addColumnAttribute('itensDeServico.unidade');
			$criteria->addColumnAttribute('itensDeServico.servico.idelemento');
			$criteria->addColumnAttribute('itensDeServico.servico.idsubelemento');
			$criteria->addColumnAttribute('itensDeServico.idServico');
			$cc = new CriteriaCondition();
				$cc->addCriteria($criteria->getCriteria("itensDeServico.status","=","'1'"));
                $cc->addOrCriteria($criteria->getCriteria("itensDeServico.status","=","'6'"));
	        	$cc->addOrCriteria($criteria->getCriteria("itensDeServico.status",">","'4'"));
			$criteria->addCriteria($cc);
			$criteria->addCriteria($criteria->getCriteria("itensDeServico.status","<>","'C'"));
            $criteria->addCriteria('idLicitacao','=',$this->idLicitacao);
            $criteria->addCriteria("itensDeServico.requisicao.suplementar","<>","'S'");
            $criteria->addCriteria("itensDeServico.requisicao.dataHora",">","'31/12/2007'");

            $criteria->addOrderAttribute('itensDeServico.item');
            $criteria->addOrderAttribute('servico.idelemento');
            $criteria->addOrderAttribute('servico.idsubelemento');
            
                       
            $criteria->addOrderAttribute('servico.idServico');
           
		   return $criteria->retrieveAsQuery();           
        }

        if ($this->idTipoLicitacao == '3') //LIVROS
        {
            $criteria = $this->getCriteria();
			//
			//$criteria->addColumnAttribute("(itensDeLivro.item||'E'||itensDeLivro.idRequisicao) as chave");
			//
			//
		 //
		//	$criteria->SetDistinct('itensDeMaterial.item');
			//
			//
            $criteria->addColumnAttribute('itensDeLivro.item');			
            $criteria->addColumnAttribute('itensDeLivro.material.codmaterial');
            $criteria->addColumnAttribute('itensDeLivro.material.idelemento');
            $criteria->addColumnAttribute('itensDeLivro.material.idsubelemento');			
            $criteria->addColumnAttribute('itensDeLivro.requisicao.uoRequisitante.sigla');
            $criteria->addColumnAttribute('itensDeLivro.titulo');
            $criteria->addColumnAttribute('itensDeLivro.material.unidade');
            $criteria->addColumnAttribute('itensDeLivro.quantPedida');

			

            $criteria->addColumnAttribute('itensDeLivro.idRequisicao');

            $criteria->addColumnAttribute('itensDeLivro.precoEstimado');			
            $criteria->addColumnAttribute('itensDeLivro.idMaterial');
            $criteria->addCriteria('idLicitacao','=',$this->idLicitacao);
            $criteria->addCriteria("itensDeLivro.requisicao.suplementar","<>","'S'");
            $criteria->addCriteria("itensDeLivro.requisicao.dataHora",">","'31/12/2007'");
            
            $cc1 = new CriteriaCondition();
				$cc1->addCriteria($criteria->getCriteria("itensDeLivro.status","=","'1'"));
                $cc1->addOrCriteria($criteria->getCriteria("itensDeLivro.status","=","'6'"));
				$cc1->addOrCriteria($criteria->getCriteria("itensDeLivro.status",">","'4'"));
			$criteria->addCriteria($cc1);
			$criteria->addCriteria($criteria->getCriteria("itensDeLivro.status","<>","'C'"));
            $criteria->addOrderAttribute('itensDeLivro.item');
            $criteria->addOrderAttribute('material.idelemento');
            $criteria->addOrderAttribute('material.idsubelemento');           
            $criteria->addOrderAttribute('material.idMaterial');
          
		  return $criteria->retrieveAsQuery();
        }

		}	
	
	function ListVencedoresPrecoByLicitacao($idLicitacao)
	{
		$sql = new sql("m.item,i.nome,m.preco","cm_instituicao i, ad_fornecedor f, ad_mapalicitacao m","m.idfornecedor = f.idfornecedor AND f.idinstituicao = i.idinstituicao  AND m.vencedor = '1' AND m.idLicitacao = ?");
		$query = $this->Query($sql,$idLicitacao);
		return $query->result;
	}
	
	
	function getDescricaoItens()
	{
    	if ($this->idTipoLicitacao == '1' OR $this->idTipoLicitacao == '4') //COMPRA
        {       
            $sql = new sql("i.item, m.descricao, m.codmaterial","ad_itemreq i, ad_material m, ad_itemlicitacao il","m.idmaterial = i.idmaterial and il.idlicitacao = i.idlicitacao and il.item = i.item");
            $sql->SetWhereAnd("i.idLicitacao = $this->idLicitacao");
            $sql->SetGroupBy("i.item, m.descricao, m.codmaterial,il.excecao");
            $query = $this->Query($sql,$this->idLicitacao);
            
            return $query->result;
        }

    	if ($this->idTipoLicitacao == '2') //SERVICO
        {       
            $sql = new sql("i.item, i.complemento, s.codservico","ad_itemreqservext i, ad_servico s, ad_itemlicitacao il","s.idservico = i.idservico and il.idlicitacao = i.idlicitacao and il.item = i.item");
            $sql->SetWhereAnd("i.idLicitacao = $this->idLicitacao");
            $sql->SetGroupBy("i.item, i.complemento, s.codservico,il.excecao");
            $query = $this->Query($sql,$this->idLicitacao);
            
            return $query->result;
        }

    	if ($this->idTipoLicitacao == '3') //LIVRO
        {       
            $sql = new sql("i.item, i.titulo, m.codmaterial","ad_itemreqbib i, ad_material m, ad_itemlicitacao il","m.idmaterial = i.idmaterial and il.idlicitacao = i.idlicitacao and il.item = i.item");
            $sql->SetWhereAnd("i.idLicitacao = $this->idLicitacao");
            $sql->SetGroupBy("i.item, i.titulo, m.codmaterial,il.excecao");
            $query = $this->Query($sql,$this->idLicitacao);
            
            return $query->result;
        }
	}
	
	function ListItensByVencedores()
	{    
		$sql = new sql("m.idfornecedor,m.item,i.nome,m.preco,m.quantidade,m.marcamodelo","cm_instituicao i, ad_fornecedor f, ad_mapalicitacao m","m.idfornecedor = f.idfornecedor AND f.idinstituicao = i.idinstituicao  AND m.vencedor = '1' AND m.idLicitacao = ?");
		$query = $this->Query($sql,$this->idLicitacao);
		return $query->result;
	}
	
	function GetDadosItensParaEmpenho($idLicitacao, $itens, $anulacao=false, $consulta=false, $relatorio=false)
	{
		global $MIOLO;

		/* Removida a referencia
		$sql = new MSql('anoref','ad_controle');
		$anoReferencia = $empenhado->Query($sql)->result[0][0];
		*/
		$anoReferencia = Date('Y');

		$cf = new MCurrencyFormatter();
		$data = array(); //dados de todos os itens da licitacao
		if($itens)
		{
			array_multisort($itens,SORT_ASC);
			if($this->idTipoLicitacao == '1' OR $this->idTipoLicitacao == '4')//COMPRA
			{
				foreach($itens as $item)
				{
					$item->getItemReq();
					$objItemReq = $MIOLO->GetBusiness('adm','itemreq');

					//verifica se o item da licitação está apto a ser empenhado, através dos status de itemreq e requisição
					$itemOK = false;
					if($item->itemreq)
					{
						foreach($item->itemreq as $ir)
						{
							$objItemReq = $MIOLO->GetBusiness('adm','itemreq');
							$objItemReq->GetById($ir->idRequisicao, $ir->idMaterial);
							$objItemReq->getRequisicao();
							//((itemreq = A-LICITAÇÃO PARCELADA ou 5-LICITADO ou 6-EMPENHADO ou 7-ENTREGUE ou 8-EMPENHO PARCELADO ou 9-ENTREGA REDUZIDA) e (requisicao = 7-LIBERADA PARA EXECUCAO ou 8-EXECUTADA PARCIALMENTE ou 9-EXECUTADA TOTALMENTE ou F-LIQUIDADA ou G-FINALIZADA)) ou consulta
							if(((($ir->status == 'A') or ($ir->status == '5') or ($ir->status == '6') or ($ir->status == '7') or ($ir->status == '8') or ($ir->status == '9')) and (($objItemReq->requisicao->status == '7') or ($objItemReq->requisicao->status == '8') or ($objItemReq->requisicao->status == '9') or ($objItemReq->requisicao->status == 'F') or ($objItemReq->requisicao->status == 'G'))) or ($consulta))
							{
								if((substr($objItemReq->requisicao->dataHora,6,4) == $anoReferencia) or ($consulta))
							        {
									$itemOK = true;
								}
							}
						}
					}

					if($itemOK)
					{
						$objMapa = $MIOLO->GetBusiness('adm','mapalicitacao');
						$objMapa->GetByIdLicitacaoItemVencedor($idLicitacao, $item->item);
						$objMapa->getFornecedor();
						$objFornecedor = $MIOLO->GetBusiness('adm','fornecedor');
						$objFornecedor->GetById($objMapa->idFornecedor);
						$objFornecedor->getInstituicao();

						if($consulta)
						{
							$item->quantidadeLicitada = $objMapa->getMapaQuantidadeVencedor($idLicitacao,$item->item);
							$item->valor = $objMapa->getMapaValorVencedor($idLicitacao,$item->item);
						}
						else
						{
							$objSuplementacao = $MIOLO->GetBusiness('adm','suplementacaoitem');
							$ultimaSuplementacaoItem = $objSuplementacao->GetUltimaSuplementacaoByIdLicitacaoItem($idLicitacao,$item->item);
							if($ultimaSuplementacaoItem->idSuplementacaoItem)
							{
								$item->valor = $ultimaSuplementacaoItem->valorUnitSuplementar;
							}
							else
							{
								$item->valor = $objMapa->getMapaValorVencedor($idLicitacao,$item->item);
							}
							$quantMapa = $objMapa->getMapaQuantidadeVencedor($idLicitacao,$item->item);
							$quantSuplemento = $objSuplementacao->GetQuantidadeByIdLicitacaoItem($idLicitacao,$item->item);
							$item->quantidadeLicitada = $cf->toDecimal($quantMapa) + $cf->toDecimal($quantSuplemento);
						}

						$total = ($item->quantidadeLicitada) * $cf->toDecimal($item->valor);
						$item->valor = floatval(str_replace(',','.',$item->valor));

						if((!$anulacao) || ($quantSuplemento == 0))
						{
							$oh = ($objItemReq->material->idsubelemento < 10)? '0' : ''; //adicionar 0 em subelemento menor que 10

							$data[] = array(
								$item->item,								//0 item
								$item->itemreq[0]->material->descricao,					//1 descricao do item
								$item->quantidadeLicitada,						//2 quantidade
								$item->itemreq[0]->material->unidade,					//3 unidade
								number_format(str_replace(',','.',$item->valor),2,',','.'),		//4 valor unit
								$objFornecedor->instituicao->nome,					//5 empresa
								number_format(str_replace(',','.',$total),2,',','.'),			//6 valor total
								$objItemReq->material->idelemento.$oh.$objItemReq->material->idsubelemento, //7 rubrica(8)
								$objItemReq->material->idelemento,					//8 idelemento
								$objItemReq->material->idsubelemento,					//9 idsubelemento
								$objMapa->idFornecedor,							//10 idfornecedor
								'Código Material: '.$objItemReq->material->codmaterial,			//11 codmaterial
								$objItemReq->idRequisicao,                                      //12 idrequisicao
							);
						}
					}
				}
			}
			elseif($this->idTipoLicitacao == '2')//SERVIÇO
			{
				foreach($itens as $item)
				{

					$item->getItemServExt();
					$itemAnterior = 0;
					if($item->itemservext)
					{
						foreach($item->itemservext as $is)
						{
							$itemAtual = $is->item;

							$is->getRequisicao();
							if(((substr($is->requisicao->dataHora,6,4) == $anoReferencia) or ($consulta)) and ($itemAtual != $itemAnterior))
							{
								$item->getItemServExt();
								$objItemServExt = $MIOLO->GetBusiness('adm','itemservext');
								if($item->itemservext)
								{
									$objItemServExt->GetByIdRequisicaoServico($item->itemservext[0]->idRequisicao, $item->itemservext[0]->idServico);
									$objItemServExt->getServico();
									$objItemServExt->getRequisicao();
								}

								//((itemreq = A-LICITAÇÃO PARCELADA ou 5-LICITADO ou 6-EMPENHADO ou 7-ENTREGUE ou 9-ENTREGA REDUZIDA) e (requisicao = 7-LIBERADA PARA EXECUCAO ou 8-EXECUTADA PARCIALMENTE ou 9-EXECUTADA TOTALMENTE))
								if(((($objItemServExt->status == 'A') or ($objItemServExt->status == '5') or ($objItemServExt->status == '6') or ($objItemServExt->status == '7') or ($objItemServExt->status == '8') or ($objItemServExt->status == '9')) and (($objItemServExt->requisicao->status == '7') or ($objItemServExt->requisicao->status == '8') or ($objItemServExt->requisicao->status == '9'))) or ($consulta))
								{
									$objMapa = $MIOLO->GetBusiness('adm','mapalicitacao');
									$objMapa->GetByIdLicitacaoItemVencedor($idLicitacao, $item->item);
									$objMapa->getFornecedor();
									$objFornecedor = $MIOLO->GetBusiness('adm','fornecedor');
									$objFornecedor->GetById($objMapa->idFornecedor);
									$objFornecedor->getInstituicao();

									if($consulta)
									{
										$item->quantidadeLicitada = $objMapa->getMapaQuantidadeVencedor($idLicitacao,$item->item);
										$item->valor = $objMapa->getMapaValorVencedor($idLicitacao,$item->item);
									}
									else
									{
										$objSuplementacao = $MIOLO->GetBusiness('adm','suplementacaoitem');
										$ultimaSuplementacaoItem = $objSuplementacao->GetUltimaSuplementacaoByIdLicitacaoItem($idLicitacao,$item->item);
										if($ultimaSuplementacaoItem->idSuplementacaoItem)
										{
											$item->valor = $ultimaSuplementacaoItem->valorUnitSuplementar;
										}
										else
										{
											$item->valor = $objMapa->getMapaValorVencedor($idLicitacao,$item->item);
										}
										$quantMapa = $objMapa->getMapaQuantidadeVencedor($idLicitacao,$item->item);
										$quantSuplemento = $objSuplementacao->GetQuantidadeByIdLicitacaoItem($idLicitacao,$item->item);
										$item->quantidadeLicitada = $cf->toDecimal($quantMapa) + $cf->toDecimal($quantSuplemento);
									}

									$item->valor = floatval(str_replace(',','.',$item->valor));
									$total = ($item->quantidadeLicitada) * floatval($item->valor);
									$descricao = substr($objItemServExt->complemento, 0, 200);
									if(strlen($objItemServExt->complemento) > 200)
									{
										$descricao .= '...';
									}

									if((!$anulacao) || ($quantSuplemento == 0))
									{
										$data[] = array(
											$item->item,													//0 item
											$descricao,														//1 descricao do item
											$item->quantidadeLicitada,										//2 quantidade
											'UN',															//3 unidade
											number_format(str_replace(',','.',$item->valor),2,',','.'),		//4 valor unit
											$objFornecedor->instituicao->nome,								//5 empresa
											number_format(str_replace(',','.',$total),2,',','.'),			//6 valor total
											$objItemServExt->servico->idelemento.$objItemServExt->servico->idsubelemento,	//7 rubrica(8)
											$objItemServExt->servico->idelemento,							//8 idelemento
											$objItemServExt->servico->idsubelemento,						//9 idsubelemento
											$objMapa->idFornecedor,											//10 idfornecedor
											'Código Serviço: '.$objItemServExt->servico->codServico,		//11 codServiço
                                            $objItemServExt->idRequisicao,                                  //12 idrequisicao
										);
									}
									$itemAnterior = $itemAtual;
								}
							}
						}
					}
				}
			}
			elseif($this->idTipoLicitacao == '3')//LIVRO
			{
				foreach($itens as $item)
				{
					$item->getItemReqBib();

					//verifica se o item da licitação está apto a ser empenhado, através dos status de itemreqbib e requisição
					$itemOK = false;
					if($item->itemreqbib)
					{
						foreach($item->itemreqbib as $ir)
						{
							$objItemReqBib = $ir;
							$objItemReqBib->getRequisicao();
							//((itemreqbib = A-LICITAÇÃO PARCELADA ou 5-LICITADO ou 6-EMPENHADO ou 7-ENTREGUE ou 9-ENTREGA REDUZIDA) e (requisicao = 7-LIBERADA PARA EXECUCAO ou 8-EXECUTADA PARCIALMENTE ou 9-EXECUTADA TOTALMENTE)) ou consulta
							if(((($ir->status == 'A') or ($ir->status == '5') or ($ir->status == '6') or ($ir->status == '7') or ($ir->status == '9')) and (($objItemReqBib->requisicao->status == '7') or ($objItemReqBib->requisicao->status == '8') or ($objItemReqBib->requisicao->status == '9'))) or ($consulta))
							{
								if((substr($objItemReqBib->requisicao->dataHora,6,4) == $anoReferencia) or ($consulta))
								{
									$itemOK = true;
								}
							}
						}
					}

					if($itemOK)
					{
						$objMapa = $MIOLO->GetBusiness('adm','mapalicitacao');
						$objMapa->GetByIdLicitacaoItemVencedor($idLicitacao, $item->item);
						$objMapa->getFornecedor();
						$objFornecedor = $MIOLO->GetBusiness('adm','fornecedor');
						$objFornecedor->GetById($objMapa->idFornecedor);
						$objFornecedor->getInstituicao();

						if($consulta)
						{
							$item->quantidadeLicitada = $objMapa->getMapaQuantidadeVencedor($idLicitacao,$item->item);
							$item->valor = $objMapa->getMapaValorVencedor($idLicitacao,$item->item);
						}
						else
						{
							$objSuplementacao = $MIOLO->GetBusiness('adm','suplementacaoitem');
							$ultimaSuplementacaoItem = $objSuplementacao->GetUltimaSuplementacaoByIdLicitacaoItem($idLicitacao,$item->item);
							if($ultimaSuplementacaoItem->idSuplementacaoItem)
							{
								$item->valor = $ultimaSuplementacaoItem->valorUnitSuplementar;
							}
							else
							{
								$item->valor = $objMapa->getMapaValorVencedor($idLicitacao,$item->item);
							}
							$quantMapa = $objMapa->getMapaQuantidadeVencedor($idLicitacao,$item->item);
							$quantSuplemento = $objSuplementacao->GetQuantidadeByIdLicitacaoItem($idLicitacao,$item->item);
							$item->quantidadeLicitada = $cf->toDecimal($quantMapa) + $cf->toDecimal($quantSuplemento);
						}

						$total = ($item->quantidadeLicitada) * $cf->toDecimal($item->valor);
						$item->valor = floatval(str_replace(',','.',$item->valor));

						if((!$anulacao) || ($quantSuplemento == 0))
						{
							$data[] = array(
								$item->item,													//0 item
								$item->itemreqbib[0]->material->descricao,						//1 descricao do item
								$item->quantidadeLicitada,										//2 quantidade
								$item->itemreqbib[0]->material->unidade,						//3 unidade
								number_format(str_replace(',','.',$item->valor),2,',','.'),		//4 valor unit
								$objFornecedor->instituicao->nome,								//5 empresa
								number_format(str_replace(',','.',$total),2,',','.'),			//6 valor total
								$item->itemreqbib[0]->material->idelemento.$item->itemreqbib[0]->material->idsubelemento,//7 rubrica(8)
								$item->itemreqbib[0]->material->idelemento,						//8 idelemento
								$item->itemreqbib[0]->material->idsubelemento,					//9 idsubelemento
								$objMapa->idFornecedor,											//10 idfornecedor
								'Código Material: '.$item->itemreqbib[0]->material->codmaterial,//11 codmaterial
                                $item->itemreqbib[0]->idRequisicao,                             //12 idrequisicao
							);
						}
					}
				}
			}

			if($consulta)
			{
				$data2 = $data;
			}
			else
			{
				$data2 = array(); //elimina os itens cujos empenhos ja foram definidos
				$item = $MIOLO->GetBusiness('adm', 'itemlicitacao');
				for($i = 0; $i < count($data); $i++)
				{
					$quantEmpenhada = $item->GetQuantidadeEmpenhada($idLicitacao, $data[$i][0]);
					//apenas itens com saldo > 0
					if(($quantEmpenhada < $data[$i][2]) or ($quantEmpenhada==null) or ($relatorio)) //o item nao teve empenho definido ou teve parcialmente ou os dados são para o relatório de Saldo de Licitação
					{
						$data2[] = $data[$i];
						if($quantEmpenhada > 0) //atualiza o saldo (colunas quantidade e valor total)
						{
							$j = count($data2) - 1;
							$data2[$j][2] = $data2[$j][2] - $quantEmpenhada;
							$data2[$j][6] = ($data2[$j][2]) * $cf->toDecimal($data2[$j][4]);
							$data2[$j][6] = number_format(str_replace(',','.',$data2[$j][6]),2,',','.');
						}
					}
				}
			}
		}
		return $data2;
	}

	function GetDadosItensParaSuplementacao($idLicitacao, $itens, $idRequisicao=NULL)
	{
		global $MIOLO;

		$cf = new MCurrencyFormatter();
		$data = array(); //dados de todos os itens da licitacao
		if($itens)
		{
			array_multisort($itens,SORT_ASC);
			$reqSuplementar = $MIOLO->GetBusiness('adm','requisicao',$idRequisicao);
			$reqSuplementar->getItem();
			if(($this->idTipoLicitacao == '1') or ($this->idTipoLicitacao == '4'))//COMPRA
			{
				foreach($itens as $item)
				{
					$item->getItemReq();
					$objItemReq = $MIOLO->GetBusiness('adm','itemreq');

					//verifica se o item da licitação está apto a ser suplementado, através dos status de itemreq e requisição
					$itemOK = false;
					if($item->itemreq)
					{
						foreach($item->itemreq as $ir)
						{
							$objItemReq->GetById($ir->idRequisicao, $ir->idMaterial);
							$objItemReq->getRequisicao();
							if($reqSuplementar->materialCompra)
							{
								foreach($reqSuplementar->materialCompra as $i)
								{
									$i->retrieveAssociation('requisicao');
									//((itemreq = 0-PENDENTE) e (requisicao = 4-AUTORIZADA PELO GESTOR))
									if(($i->status == '0') and ($reqSuplementar->status == '4'))
									{
										$idReqLinha = $objItemReq->idRequisicao;
										$reqLinha = $MIOLO->GetBusiness('adm','requisicao',$idReqLinha);
										//testa se requisição da licitação a ser suplementada é original
										if($reqLinha->suplementar != 'S')
										{
											//testa se o item da requisição suplementar já está ligado a outra licitacao
											if(($i->idLicitacao == $idLicitacao) and ($i->item == $ir->item))
											{
												$itemOK = true;
												$quantidadeRequisicaoSuplementar = $i->quantPedida;
												$valorRequisicaoSuplementar = $i->precoEstimado;
											}
										}
									}
								}
							}
						}
					}

					if($itemOK)
					{
						$objMapa = $MIOLO->GetBusiness('adm','mapalicitacao');
						$objMapa->GetByIdLicitacaoItemVencedor($idLicitacao, $item->item);
						$objMapa->getFornecedor();
						$objFornecedor = $MIOLO->GetBusiness('adm','fornecedor');
						$objFornecedor->GetById($objMapa->idFornecedor);
						$objFornecedor->getInstituicao();

						$objSuplementacao = $MIOLO->GetBusiness('adm','suplementacaoitem');

						$quantMapa = $objMapa->getMapaQuantidadeVencedor($idLicitacao,$item->item);
						$quantSuplemento = $objSuplementacao->GetQuantidadeByIdLicitacaoItem($idLicitacao,$item->item);
						$quantEmpenhada = $item->GetQuantidadeEmpenhada($idLicitacao, $item->item);
						$saldo = $cf->toDecimal($quantMapa) + $cf->toDecimal($quantSuplemento) - $cf->toDecimal($quantEmpenhada);

						$item->quantidadeLicitada = $quantidadeRequisicaoSuplementar;
						$item->valor = $valorRequisicaoSuplementar;

						$total = ($item->quantidadeLicitada) * $cf->toDecimal($item->valor);
						$item->valor = floatval(str_replace(',','.',$item->valor));

						$data[] = array(
							$item->item,													//0 item
							$item->itemreq[0]->material->descricao,							//1 descricao do item
							$item->quantidadeLicitada,										//2 quantidade
							$item->itemreq[0]->material->unidade,							//3 unidade
							number_format(str_replace(',','.',$item->valor),2,',','.'),		//4 valor unit
							$objFornecedor->instituicao->nome,								//5 empresa
							number_format(str_replace(',','.',$total),2,',','.'),			//6 valor total
							$objItemReq->material->idelemento.$objItemReq->material->idsubelemento,//7 rubrica(8)
							$objItemReq->material->idelemento,								//8 idelemento
							$objItemReq->material->idsubelemento,							//9 idsubelemento
							$objMapa->idFornecedor,											//10 idfornecedor
							'Código Material: '.$objItemReq->material->codmaterial,			//11 codmaterial
							$saldo															//12 saldo do item
						);
					}
				}
			}
			elseif($this->idTipoLicitacao == '2')//SERVIÇO
			{
				foreach($itens as $item)
				{
					$item->getItemServExt();
					$objItemServExt = $MIOLO->GetBusiness('adm','itemservext');
					foreach($item->itemservext as $is)
					{
						$objItemServExt->GetById($is->idRequisicao, $is->idServico);
						$objItemServExt->getServico();
						$objItemServExt->getRequisicao();

						if($reqSuplementar->servext)
						{
							$i = $reqSuplementar->servext;
							//((itemreqservext = 0-PENDENTE) e (requisicao = 4-AUTORIZADA PELO GESTOR))
							if(($i->status == '0') and ($reqSuplementar->status == '4'))
							{
								$idReqLinha = $objItemServExt->idRequisicao;
								$reqLinha = $MIOLO->GetBusiness('adm','requisicao',$idReqLinha);
								//testa se requisição suplementar possui mesma uoreq
								if(($reqSuplementar->idUoRequisitante == $objItemServExt->requisicao->idUoRequisitante) && ($reqLinha->suplementar != 'S'))
								{
									//testa se o item da requisição suplementar já está ligado a outra licitacao
									if(($i->idLicitacao == $idLicitacao) and ($i->item == $is->item))
									{
										//OK
										$quantidadeRequisicaoSuplementar = $i->quantidade;
										$valorRequisicaoSuplementar = $i->valorEst;

										$objMapa = $MIOLO->GetBusiness('adm','mapalicitacao');
										$objMapa->GetByIdLicitacaoItemVencedor($idLicitacao, $item->item);
										$objMapa->getFornecedor();
										$objFornecedor = $MIOLO->GetBusiness('adm','fornecedor');
										$objFornecedor->GetById($objMapa->idFornecedor);
										$objFornecedor->getInstituicao();

										$objSuplementacao = $MIOLO->GetBusiness('adm','suplementacaoitem');

										$quantMapa = $objMapa->getMapaQuantidadeVencedor($idLicitacao,$item->item);
										$quantSuplemento = $objSuplementacao->GetQuantidadeByIdLicitacaoItem($idLicitacao,$item->item);
										$quantEmpenhada = $item->GetQuantidadeEmpenhada($idLicitacao, $item->item);
										$saldo = $cf->toDecimal($quantMapa) + $cf->toDecimal($quantSuplemento) - $cf->toDecimal($quantEmpenhada);

										$item->quantidadeLicitada = $quantidadeRequisicaoSuplementar;
										$item->valor = $valorRequisicaoSuplementar;

										$item->valor = floatval(str_replace(',','.',$item->valor));
										$total = ($item->quantidadeLicitada) * floatval($item->valor);
										$descricao = substr($objItemServExt->complemento, 0, 200);
										if(strlen($objItemServExt->complemento) > 200)
										{
											$descricao .= '...';
										}

										$data[] = array(
											$item->item,													//0 item
											$descricao,														//1 descricao do item
											$item->quantidadeLicitada,										//2 quantidade
											'UN',															//3 unidade
											number_format(str_replace(',','.',$item->valor),2,',','.'),		//4 valor unit
											$objFornecedor->instituicao->nome,								//5 empresa
											number_format(str_replace(',','.',$total),2,',','.'),			//6 valor total
											$objItemServExt->servico->idelemento.$objItemServExt->servico->idsubelemento,	//7 rubrica(8)
											$objItemServExt->servico->idelemento,							//8 idelemento
											$objItemServExt->servico->idsubelemento,						//9 idsubelemento
											$objMapa->idFornecedor,											//10 idfornecedor
											'Código Serviço: '.$objItemServExt->servico->codServico,		//11 codServiço
											$saldo															//12 saldo do item
										);
									}
								}
							}
						}
					}
				}
			}
			elseif($this->idTipoLicitacao == '3')//LIVRO
			{
				foreach($itens as $item)
				{
					$item->getItemReqBib();
					$objItemReqBib = $MIOLO->GetBusiness('adm','itemreqbib');

					//verifica se o item da licitação está apto a ser suplementado, através dos status de itemreqbib e requisição
					$itemOK = false;
					foreach($item->itemreqbib as $ir)
					{
						$objItemReqBib = $ir;
						$objItemReqBib->getRequisicao();
						if($reqSuplementar->biblioteca)
						{
							foreach($reqSuplementar->biblioteca as $i)
							{
								$i->retrieveAssociation('requisicao');
								//((itemreqbib = 0-PENDENTE) e (requisicao = 4-AUTORIZADA PELO GESTOR))
								if(($i->status == '0') and ($reqSuplementar->status == '4'))
								{
									//testa se o item da requisição suplementar já está ligado a outra licitacao
									if(($i->idLicitacao == $idLicitacao) and ($i->item == $ir->item))
									{
										$itemOK = true;
										$quantidadeRequisicaoSuplementar = $i->quantPedida;
										$valorRequisicaoSuplementar = $i->precoEstimado;
									}
								}
							}
						}
					}

					if($itemOK)
					{
						$objMapa = $MIOLO->GetBusiness('adm','mapalicitacao');
						$objMapa->GetByIdLicitacaoItemVencedor($idLicitacao, $item->item);
						$objMapa->getFornecedor();
						$objFornecedor = $MIOLO->GetBusiness('adm','fornecedor');
						$objFornecedor->GetById($objMapa->idFornecedor);
						$objFornecedor->getInstituicao();

						$objSuplementacao = $MIOLO->GetBusiness('adm','suplementacaoitem');

						$quantMapa = $objMapa->getMapaQuantidadeVencedor($idLicitacao,$item->item);
						$quantSuplemento = $objSuplementacao->GetQuantidadeByIdLicitacaoItem($idLicitacao,$item->item);
						$quantEmpenhada = $item->GetQuantidadeEmpenhada($idLicitacao, $item->item);
						$saldo = $cf->toDecimal($quantMapa) + $cf->toDecimal($quantSuplemento) - $cf->toDecimal($quantEmpenhada);

						$item->quantidadeLicitada = $quantidadeRequisicaoSuplementar;
						$item->valor = $valorRequisicaoSuplementar;

						$total = ($item->quantidadeLicitada) * $cf->toDecimal($item->valor);
						$item->valor = floatval(str_replace(',','.',$item->valor));

						$data[] = array(
							$item->item,													//0 item
							$item->itemreqbib[0]->material->descricao,						//1 descricao do item
							$item->quantidadeLicitada,										//2 quantidade
							$item->itemreqbib[0]->material->unidade,						//3 unidade
							number_format(str_replace(',','.',$item->valor),2,',','.'),		//4 valor unit
							$objFornecedor->instituicao->nome,								//5 empresa
							number_format(str_replace(',','.',$total),2,',','.'),			//6 valor total
							$item->itemreqbib[0]->material->idelemento.$item->itemreqbib[0]->material->idsubelemento,//7 rubrica(8)
							$item->itemreqbib[0]->material->idelemento,						//8 idelemento
							$item->itemreqbib[0]->material->idsubelemento,					//9 idsubelemento
							$objMapa->idFornecedor,											//10 idfornecedor
							'Código Material: '.$item->itemreqbib[0]->material->codmaterial,//11 codmaterial
							$saldo															//12 saldo do item
						);
					}
				}
			}
		}
		return $data;
	}

	function GetDadosItensParaSuplementacaoEstorno($idLicitacao, $itens)
	{
		global $MIOLO;

		$cf = new MCurrencyFormatter();
		$data = array(); //dados de todos os itens da licitacao
		if($itens)
		{
			array_multisort($itens,SORT_ASC);
			if( ($this->idTipoLicitacao == '1') or ($this->idTipoLicitacao == '4') )//COMPRA
			{
				foreach($itens as $item)
				{
					//busca a última suplementação para o item, aquela que poderá ser estornada
					$objSuplementacao = $MIOLO->GetBusiness('adm','suplementacaoitem');
					$objMapa = $MIOLO->GetBusiness('adm','mapalicitacao');
					$ultimaSuplementacaoItem = $objSuplementacao->GetUltimaSuplementacaoByIdLicitacaoItem($idLicitacao,$item->item);
					if($ultimaSuplementacaoItem->idSuplementacaoItem)
					{
						//verifica se a suplementação já foi parcialmente ou totalmente empenhada
						$quantEmpenhada = $item->GetQuantidadeEmpenhada($idLicitacao, $item->item);
						$quantMapa = $objMapa->getMapaQuantidadeVencedor($idLicitacao,$item->item);
						$quantSuplemento = $objSuplementacao->GetQuantidadeByIdLicitacaoItem($idLicitacao,$item->item);
						if(($quantMapa + $quantSuplemento) >= ($quantEmpenhada + $ultimaSuplementacaoItem->quantidadeSuplementar))
						{
							$objMapa = $MIOLO->GetBusiness('adm','mapalicitacao');
							$objMapa->GetByIdLicitacaoItemVencedor($idLicitacao, $item->item);
							$objMapa->getFornecedor();
							$objFornecedor = $MIOLO->GetBusiness('adm','fornecedor');
							$objFornecedor->GetById($objMapa->idFornecedor);
							$objFornecedor->getInstituicao();

							$item->getItemReq();
							$objItemReq = $MIOLO->GetBusiness('adm','itemreq');
							$objItemReq->GetById($item->itemreq[0]->idRequisicao, $item->itemreq[0]->idMaterial);

							$item->valor = $ultimaSuplementacaoItem->valorUnitSuplementar;
							$item->quantidadeLicitada = $ultimaSuplementacaoItem->quantidadeSuplementar;

							$total = ($item->quantidadeLicitada) * $cf->toDecimal($item->valor);
							$item->valor = floatval(str_replace(',','.',$item->valor));

							$data[] = array(
								$item->item,													//0 item
								$item->itemreq[0]->material->descricao,							//1 descricao do item
								$item->quantidadeLicitada,										//2 quantidade
								$item->itemreq[0]->material->unidade,							//3 unidade
								number_format(str_replace(',','.',$item->valor),2,',','.'),		//4 valor unit
								$objFornecedor->instituicao->nome,								//5 empresa
								number_format(str_replace(',','.',$total),2,',','.'),			//6 valor total
								$objItemReq->material->idelemento.$objItemReq->material->idsubelemento,//7 rubrica(8)
								$objItemReq->material->idelemento,								//8 idelemento
								$objItemReq->material->idsubelemento,							//9 idsubelemento
								$objMapa->idFornecedor,											//10 idfornecedor
								'Código Material: '.$objItemReq->material->codmaterial,			//11 codmaterial
							);
						}
					}
				}
			}
			elseif($this->idTipoLicitacao == '2')//SERVIÇO
			{
				foreach($itens as $item)
				{
					//busca a última suplementação para o item, aquela que poderá ser estornada
					$objSuplementacao = $MIOLO->GetBusiness('adm','suplementacaoitem');
					$objMapa = $MIOLO->GetBusiness('adm','mapalicitacao');
					$ultimaSuplementacaoItem = $objSuplementacao->GetUltimaSuplementacaoByIdLicitacaoItem($idLicitacao,$item->item);
					if($ultimaSuplementacaoItem->idSuplementacaoItem)
					{
						//verifica se a suplementação já foi parcialmente ou totalmente empenhada
						$quantEmpenhada = $item->GetQuantidadeEmpenhada($idLicitacao, $item->item);
						$quantMapa = $objMapa->getMapaQuantidadeVencedor($idLicitacao,$item->item);
						$quantSuplemento = $objSuplementacao->GetQuantidadeByIdLicitacaoItem($idLicitacao,$item->item);
						if(($quantMapa + $quantSuplemento) >= ($quantEmpenhada + $ultimaSuplementacaoItem->quantidadeSuplementar))
						{
							$objMapa = $MIOLO->GetBusiness('adm','mapalicitacao');
							$objMapa->GetByIdLicitacaoItemVencedor($idLicitacao, $item->item);
							$objMapa->getFornecedor();
							$objFornecedor = $MIOLO->GetBusiness('adm','fornecedor');
							$objFornecedor->GetById($objMapa->idFornecedor);
							$objFornecedor->getInstituicao();

							$objItemServExt = $MIOLO->GetBusiness('adm','itemservext');
							$objItemServExt->GetByIdRequisicaoServico($ultimaSuplementacaoItem->idRequisicao, $ultimaSuplementacaoItem->idServico);
							$objItemServExt->getServico();
							$objItemServExt->getRequisicao();

							$item->valor = $ultimaSuplementacaoItem->valorUnitSuplementar;
							$item->quantidadeLicitada = $ultimaSuplementacaoItem->quantidadeSuplementar;

							$item->valor = floatval(str_replace(',','.',$item->valor));
							$total = ($item->quantidadeLicitada) * floatval($item->valor);
							$descricao = substr($objItemServExt->complemento, 0, 200);
							if(strlen($objItemServExt->complemento) > 200)
							{
								$descricao .= '...';
							}

							$data[] = array(
								$item->item,													//0 item
								$descricao,														//1 descricao do item
								$item->quantidadeLicitada,										//2 quantidade
								'UN',															//3 unidade
								number_format(str_replace(',','.',$item->valor),2,',','.'),		//4 valor unit
								$objFornecedor->instituicao->nome,								//5 empresa
								number_format(str_replace(',','.',$total),2,',','.'),			//6 valor total
								$objItemServExt->servico->idelemento.$objItemServExt->servico->idsubelemento,	//7 rubrica(8)
								$objItemServExt->servico->idelemento,							//8 idelemento
								$objItemServExt->servico->idsubelemento,						//9 idsubelemento
								$objMapa->idFornecedor,											//10 idfornecedor
								'Código Serviço: '.$objItemServExt->servico->codServico,		//11 codServiço
							);
						}
					}
				}
			}
			elseif($this->idTipoLicitacao == '3')//LIVRO
			{
				foreach($itens as $item)
				{
					//busca a última suplementação para o item, aquela que poderá ser estornada
					$objSuplementacao = $MIOLO->GetBusiness('adm','suplementacaoitem');
					$objMapa = $MIOLO->GetBusiness('adm','mapalicitacao');
					$ultimaSuplementacaoItem = $objSuplementacao->GetUltimaSuplementacaoByIdLicitacaoItem($idLicitacao,$item->item);
					if($ultimaSuplementacaoItem->idSuplementacaoItem)
					{
						//verifica se a suplementação já foi parcialmente ou totalmente empenhada
						$quantEmpenhada = $item->GetQuantidadeEmpenhada($idLicitacao, $item->item);
						$quantMapa = $objMapa->getMapaQuantidadeVencedor($idLicitacao,$item->item);
						$quantSuplemento = $objSuplementacao->GetQuantidadeByIdLicitacaoItem($idLicitacao,$item->item);
						if(($quantMapa + $quantSuplemento) >= ($quantEmpenhada + $ultimaSuplementacaoItem->quantidadeSuplementar))
						{
							$objMapa = $MIOLO->GetBusiness('adm','mapalicitacao');
							$objMapa->GetByIdLicitacaoItemVencedor($idLicitacao, $item->item);
							$objMapa->getFornecedor();
							$objFornecedor = $MIOLO->GetBusiness('adm','fornecedor');
							$objFornecedor->GetById($objMapa->idFornecedor);
							$objFornecedor->getInstituicao();

							$item->getItemReqBib();
							$objItemReqBib = $MIOLO->GetBusiness('adm','itemreqbib');
							$objItemReqBib->GetById($item->itemreqbib[0]->idRequisicao);

							$item->valor = $ultimaSuplementacaoItem->valorUnitSuplementar;
							$item->quantidadeLicitada = $ultimaSuplementacaoItem->quantidadeSuplementar;

							$total = ($item->quantidadeLicitada) * $cf->toDecimal($item->valor);
							$item->valor = floatval(str_replace(',','.',$item->valor));

							$data[] = array(
								$item->item,													//0 item
								$item->itemreqbib[0]->material->descricao,						//1 descricao do item
								$item->quantidadeLicitada,										//2 quantidade
								$item->itemreqbib[0]->material->unidade,						//3 unidade
								number_format(str_replace(',','.',$item->valor),2,',','.'),		//4 valor unit
								$objFornecedor->instituicao->nome,								//5 empresa
								number_format(str_replace(',','.',$total),2,',','.'),			//6 valor total
								$objItemReqBib->material->idelemento.$objItemReqBib->material->idsubelemento,//7 rubrica(8)
								$objItemReqBib->material->idelemento,							//8 idelemento
								$objItemReqBib->material->idsubelemento,						//9 idsubelemento
								$objMapa->idFornecedor,											//10 idfornecedor
								'Código Material: '.$objItemReqBib->material->codmaterial,		//11 codmaterial
							);
						}
					}
				}
			}
		}
		return $data;
	}

	function DefineOrcamentosParaItensLicitacao($idLicitacao, $data, $ano, $esfera, $ptr, $fonte, $rubrica, $dadosPorSubElemento, $solicitacao=null)
	{
		global $MIOLO, $module, $action;

		//monta um array com idfornecedor como chaves
		$tree = array();
		foreach($data as $item)
		{
			$tree[$item[10]][] = $item; //10 - idfornecedor
		}
		//para cada idfornecedor, monta um array com referencia como chave
		$tree2 = array();
		foreach($tree as $empresa=>$itens)
		{
			$tree2[$empresa] = array();
			foreach($itens as $item)
			{
				$tree2[$empresa][$item[11]][] = $item; //11 - ref
			}
		}
		$tree = $tree2;

		//gera os registros
		$cmd = array();
//		$total = 0;

		$mapaLicitacao = $MIOLO->GetBusiness($module, 'mapalicitacao');
		$empenhado = $MIOLO->GetBusiness($module, 'empenhado');
		$suplementacaoItem = $MIOLO->GetBusiness($module, 'suplementacaoitem');
		$orcamento = $MIOLO->GetBusiness($module, 'orcamento');
		$retornoEmpenhos = '';
		//tree = empresas=>referencias=>empenhos
		foreach($tree as $empresa=>$referencias)
		{
			foreach($referencias as $referencia=>$empenhos)
			{
				//gera registro em ad_empenho
				$sql = new sql("idempenho, idfornecedor, status, tipoempenho, idempenhoref", "ad_empenho");
				$novoIdEmpenho = $this->GetNewIdEmpenho();
				$empenhoRef = $MIOLO->GetBusiness($module, 'empenho', $idEmpenhoRef);
				if($referencia != '0')
				{
					$idEmpenhoRef = $referencia;
					if($empenhoRef->idOrcamento == $idOrcamento)
					{
						$tipoEmpenho = 'CA';
					}
					else
					{
						$tipoEmpenho = 'CO';
					}
				}
				else
				{
					$idEmpenhoRef = $novoIdEmpenho;
					$tipoEmpenho = 'OR';
				}
				$values = array($novoIdEmpenho, $empresa, '1', $tipoEmpenho, $idEmpenhoRef);
				$cmd[] = $sql->Insert($values);
				$empenhoRef->Log(OP_INS,"Novo Empenho: " . $novoIdEmpenho);
				$retornoEmpenhos .= $novoIdEmpenho . ',';
				foreach($empenhos as $empenho)
				{
					//gera SuplementacaoItem, se estas forem superiores ao gravado
					$quantidadeMapa = $mapaLicitacao->getMapaQuantidadeVencedor($idLicitacao, $empenho[0]);
					$totalEmpenhado = $empenhado->GetQuantidadeEmpenhadaByIdItemLicitacao($idLicitacao, $empenho[0]);
					$quantidadeSuplementar = $suplementacaoItem->GetQuantidadeByIdLicitacaoItem($idLicitacao,$empenho[0]);
					if($quantidadeMapa + $quantidadeSuplementar < $totalEmpenhado + $empenho[2])
					{
						//SuplementacaoItem
						$sql = new sql("idSuplementacaoItem,idLicitacao, item, data, valorUnitSuplementar, quantidadeSuplementar", "ad_suplementacaoitem");
						$novoIdSuplementacaoItem = $this->GetNewIdSuplementacaoItem();
						$values = array($novoIdSuplementacaoItem, $idLicitacao, $empenho[0], $this->_db->CharToTimestamp(date("d/m/Y H:i:s")), $empenho[4], ($totalEmpenhado + $empenho[2] - $quantidadeMapa - $quantidadeSuplementar));
//						$cmd[] = $sql->Insert($values);
					}

					//gera registro em ad_empenhado
					$idOrcamento = $dadosPorSubElemento[$empenho[9]][0];
					$valorEmpenhado = $dadosPorSubElemento[$empenho[9]][2];
					$sql = new sql("idempenhado, valoremp, quantidadeemp, idempenho, idlicitacao, item, dataorcamento, idorcamento, status", "ad_empenhado");
					$novoIdEmpenhado = $this->GetNewIdEmpenhado();
					$values = array( $novoIdEmpenhado, $empenho[6], $empenho[2], $novoIdEmpenho, $idLicitacao, $empenho[0], $this->_db->CharToTimestamp(date("d/m/Y H:i:s")), $idOrcamento, '1' );
					$cmd[] = $sql->Insert($values);

					//atualiza status do itemreq ou itemreqservext, se não for suplementação
					$licitacao = $MIOLO->GetBusiness('adm', 'licitacao', $idLicitacao);
					$itemLicitacao = $MIOLO->GetBusiness('adm', 'itemlicitacao');
					$itemLicitacao->GetById($idLicitacao, $empenho[0]);
					if($solicitacao)
					{
						$OperacaoLog = 'Solicitacao de Licitacao';
					}
					else
					{
						$OperacaoLog = 'Definicao de Orcamento';
					}

						/* Removida a referencia
			$sql = new MSql('anoref','ad_controle');
			$anoReferencia = $empenhado->Query($sql)->result[0][0];
			*/
			$anoReferencia = Date('Y');
		
					if(($licitacao->idTipoLicitacao == '1') or ($licitacao->idTipoLicitacao == '4'))//COMPRA
					{
						$itemLicitacao->getItemReq();
						foreach($itemLicitacao->itemreq as $ir)
						{
							if(($ir->status == '5') or ($ir->status == 'A'))//LICITADO OU EMPENHADO PARCIALMENTE; outros estados vêm de uma suplementação
							{
								$sql = new sql("status", "ad_itemreq", "idrequisicao = ? and idmaterial = ? and idrequisicao in (SELECT idrequisicao FROM ad_requisicao WHERE SUBSTR(to_char(datahorareq, 'dd/mm/yyyy'),7,4) = '$anoReferencia')");
								if($quantidadeMapa > $totalEmpenhado + $empenho[2])
								{
									$values = array("A", $ir->idRequisicao, $ir->idMaterial);
									$this->Log(OP_UPD, "Status Item Req: $OperacaoLog idLicitacao $idLicitacao item $itemLicitacao->item idRequisicao $ir->idRequisicao idMaterial $ir->idMaterial status A");
								}
								else
								{
									$values = array("6", $ir->idRequisicao, $ir->idMaterial);
									$this->Log(OP_UPD, "Status Item Req: $OperacaoLog idLicitacao $idLicitacao item $itemLicitacao->item idRequisicao $ir->idRequisicao idMaterial $ir->idMaterial status 6");
								}
								$cmd[] = $sql->Update($values);
							}
						}
					}
					elseif($licitacao->idTipoLicitacao == '2')//SERVIÇO
					{
						$itemLicitacao->getItemServExt();
						foreach($itemLicitacao->itemservext as $is)
						{
							if(($is->status == '5') or ($is->status == 'A'))//LICITADO OU EMPENHADO PARCIALMENTE; outros estados vêm de uma suplementação
							{
								$sql = new sql("status", "ad_itemreqservext", "idrequisicao = ? and idservico = ? and idrequisicao in (SELECT idrequisicao FROM ad_requisicao WHERE SUBSTR(to_char(datahorareq, 'dd/mm/yyyy'),7,4) = '$anoReferencia')");
								if($quantidadeMapa > $totalEmpenhado + $empenho[2])
								{
									$values = array("A", $is->idRequisicao, $is->idServico);
									$this->Log(OP_UPD, "Status Item Req: $OperacaoLog idLicitacao $idLicitacao item $itemLicitacao->item idRequisicao $is->idRequisicao idServico $is->idServico status A");
								}
								else
								{
									$values = array("6", $is->idRequisicao, $is->idServico);
									$this->Log(OP_UPD, "Status Item Req: $OperacaoLog idLicitacao $idLicitacao item $itemLicitacao->item idRequisicao $is->idRequisicao idServico $is->idServico status 6");
								}
								$cmd[] = $sql->Update($values);
							}
						}
					}
					elseif($licitacao->idTipoLicitacao == '3')//LIVRO
					{
						$itemLicitacao->getItemReqBib();
						foreach($itemLicitacao->itemreqbib as $ir)
						{
							if(($ir->status == '5') or ($ir->status == 'A'))//LICITADO OU EMPENHADO PARCIALMENTE; outros estados vêm de uma suplementação
							{
								$sql = new sql("status", "ad_itemreqbib", "idrequisicao = ? and idmaterial = ? and idrequisicao in (SELECT idrequisicao FROM ad_requisicao WHERE SUBSTR(to_char(datahorareq, 'dd/mm/yyyy'),7,4) = '$anoReferencia')");
								if($quantidadeMapa > $totalEmpenhado + $empenho[2])
								{
									$values = array("A", $ir->idRequisicao, $ir->idMaterial);
									$this->Log(OP_UPD, "Status Item Req: $OperacaoLog idLicitacao $idLicitacao item $itemLicitacao->item idRequisicao $ir->idRequisicao idMaterial $ir->idMaterial status A");
								}
								else
								{
									$values = array("6", $ir->idRequisicao, $ir->idMaterial);
									$this->Log(OP_UPD, "Status Item Req: $OperacaoLog idLicitacao $idLicitacao item $itemLicitacao->item idRequisicao $ir->idRequisicao idMaterial $ir->idMaterial status 6");
								}
								$cmd[] = $sql->Update($values);
							}
						}
					}

					//atualiza campo pago da ad_orcamento;
					$sql = new sql("pago", "ad_orcamento", "idorcamento = ?");
					$query = $this->Query($sql,$idOrcamento);
					$pago = floatval(str_replace(',', '.', $query->result[0][0]));
					$sql = new sql("pago", "ad_orcamento", "idorcamento = ?");
					$values = array($pago + $valorEmpenhado, $idOrcamento);
					$cmd[] = $sql->Update($values);
				}
			}
		}
		$retornoEmpenhos = substr($retornoEmpenhos, 0, -1);

		if($solicitacao)//se for solicitacao (HU) atualiza também a tabela ad_solicitacao
		{
			$objSolicitacao = $MIOLO->GetBusiness($module, 'solicitacao');
			foreach($data as $d)
			{
				$solic = $objSolicitacao->GetByItemNaoAtendido($idLicitacao, $d[0]); //idLicitacao, item, quantidade
				$sql = new sql("quantidade, status", "ad_solicitacao", "idlicitacao = ? and numero = ? and item = ? and data = ? and status = '1'");
				$values = array($d[2], '2', $idLicitacao, $solicitacao, $d[0], $this->_db->CharToTimestamp($solic->data));
				$cmd[] = $sql->Update($values);
			}
		}

		$this->Execute($cmd);
		return $retornoEmpenhos;
	}

	function DefineSuplementacaoParaItensLicitacao($idLicitacao, $idRequisicao, $preco)
	{
		global $MIOLO, $module, $action;

		$reqSuplementar = $MIOLO->GetBusiness('adm','requisicao',$idRequisicao);
		$reqSuplementar->getItem();
		$reqSuplementar->BeginTransaction();
		if(($this->idTipoLicitacao == '1') or ($this->idTipoLicitacao == '4'))//COMPRA
		{
			if($reqSuplementar->materialCompra)
			{				
				$j = 0;
				foreach($reqSuplementar->materialCompra as $i)
				{
					$suplementacaoItem = $MIOLO->GetBusiness($module, 'suplementacaoitem');
					$suplementacaoItem->idLicitacao = $idLicitacao;
					$suplementacaoItem->item = $i->item;
					$suplementacaoItem->data = date('d/m/Y');
					$suplementacaoItem->quantidadeSuplementar = $i->quantPedida;					
					
					if($preco[$j])
					{
						$suplementacaoItem->valorUnitSuplementar = $preco[$j];
					}
					else
					{
						$suplementacaoItem->valorUnitSuplementar = $i->precoEstimado;
					}
					$suplementacaoItem->idRequisicao = $idRequisicao;
					$suplementacaoItem->setTransaction($reqSuplementar->getTransaction());
					$suplementacaoItem->save();

					//troca o status do item
					$i->status = '5';
					$i->setTransaction($reqSuplementar->getTransaction());
					$i->save();
					$j++;
				}
			}
		}
		elseif($this->idTipoLicitacao == '2')//SERVICO
		{
			if($reqSuplementar->servext)
			{
				$i = $reqSuplementar->servext;
				$suplementacaoItem = $MIOLO->GetBusiness($module, 'suplementacaoitem');
				$suplementacaoItem->idLicitacao = $idLicitacao;
				$suplementacaoItem->item = $i->item;
				$suplementacaoItem->data = date('d/m/Y');
				$suplementacaoItem->quantidadeSuplementar = $i->quantidade;
				if($preco[0])
				{
					$suplementacaoItem->valorUnitSuplementar = $preco[0];
				}
				else
				{
					$suplementacaoItem->valorUnitSuplementar = $i->valorEst;
				}
				$suplementacaoItem->idRequisicao = $idRequisicao;
				$suplementacaoItem->setTransaction($reqSuplementar->getTransaction());
				$suplementacaoItem->save();

				//troca o status do item
				$i->status = '5';
				$i->setTransaction($reqSuplementar->getTransaction());
				$i->save();
			}
		}
		elseif($this->idTipoLicitacao == '3')//LIVRO
		{
			if($reqSuplementar->biblioteca)
			{
				$i = $reqSuplementar->biblioteca;
				$suplementacaoItem = $MIOLO->GetBusiness($module, 'suplementacaoitem');
				$suplementacaoItem->idLicitacao = $idLicitacao;
				$suplementacaoItem->item = $i->item;
				$suplementacaoItem->data = date('d/m/Y');
				$suplementacaoItem->quantidadeSuplementar = $i->quantPedida;
				if($preco[0])
				{
					$suplementacaoItem->valorUnitSuplementar = $preco[0];
				}
				else
				{
					$suplementacaoItem->valorUnitSuplementar = $i->precoEstimado;
				}
				$suplementacaoItem->idRequisicao = $idRequisicao;
				$suplementacaoItem->setTransaction($reqSuplementar->getTransaction());
				$suplementacaoItem->save();

				//troca o status do item
				$i->status = '5';
				$i->setTransaction($reqSuplementar->getTransaction());
				$i->save();
			}
		}
		$reqSuplementar->status = '7';//LIBERADA PARA EXECUÇÃO
		$reqSuplementar->save();

		$suplementacaoItem->Log(OP_INS, "Suplementacao ".$suplementacaoItem->idSuplementacaoItem." realizada com sucesso");
		$reqSuplementar->EndTransaction();
	}

	function DefineSuplementacaoEstornoParaItensLicitacao($idLicitacao, $data)
	{
		global $MIOLO, $module, $action;

		
		$licitacao = $MIOLO->GetBusiness($module, 'licitacao', $idLicitacao);
		$licitacao->BeginTransaction();
		foreach($data as $d)
		{
			$objSuplementacao = $MIOLO->GetBusiness('adm','suplementacaoitem');
			$ultimaSuplementacaoItem = $objSuplementacao->GetUltimaSuplementacaoByIdLicitacaoItem($idLicitacao,$d[0]);

			$d[2] = $d[2] * -1;
			$d[4] = $d[4] * -1;

			$suplementacaoItem = $MIOLO->GetBusiness($module, 'suplementacaoitem');
			$suplementacaoItem->idLicitacao = $idLicitacao;
			$suplementacaoItem->item = $d[0];
			$suplementacaoItem->data = date('d/m/Y');
			$suplementacaoItem->quantidadeSuplementar = $d[2];
			$suplementacaoItem->valorUnitSuplementar = $d[4];
			$suplementacaoItem->idSuplementacaoItemRef = $ultimaSuplementacaoItem->idSuplementacaoItem;
			$suplementacaoItem->idRequisicao = $ultimaSuplementacaoItem->idRequisicao;
			$suplementacaoItem->setTransaction($licitacao->getTransaction());
			$suplementacaoItem->save();					
			
			$ultimaSuplementacaoItem->setTransaction($licitacao->getTransaction());
			$ultimaSuplementacaoItem->idSuplementacaoItemRef = $suplementacaoItem->idSuplementacaoItem;
			$ultimaSuplementacaoItem->save();
			$idRequisicao = $ultimaSuplementacaoItem->idRequisicao;
			$requisicao = $MIOLO->GetBusiness('adm','requisicao',$idRequisicao);
			$requisicao->status = '4';//AUTORIZADA PELO GESTOR			
			$requisicao->setTransaction($licitacao->getTransaction());
			$requisicao->save();
			$requisicao->getItem();
			if($requisicao->materialCompra)//COMPRA
			{
				foreach($requisicao->materialCompra as $i)
				{
					$i->idLicitacao = $idLicitacao;
					$i->item = $d[0];
					$i->status = '0';//PENDENTE
					$i->setTransaction($licitacao->getTransaction());
					$i->save();
				}
			}
			elseif($requisicao->servext)//SERVICO
			{
				$i = $requisicao->servext;
				$i->idLicitacao = $idLicitacao;
				$i->item = $d[0];
				$i->status = '0';//PENDENTE
				$i->setTransaction($licitacao->getTransaction());
				$i->save();
			}
			elseif($requisicao->biblioteca)//LIVRO
			{
				$i = $requisicao->biblioteca;
				$i->idLicitacao = $idLicitacao;
				$i->item = $d[0];
				$i->status = '0';//PENDENTE
				$i->setTransaction($licitacao->getTransaction());
				$i->save();
			}
		}
		$suplementacaoItem->Log(OP_DEL, "Estorno de suplementacao ".$suplementacaoItem->idSuplementacaoItem." realizada com sucesso");
		$licitacao->EndTransaction();
	}

	function numProcessoFormatado($num=null)
    {
        $num = ($num == null) ? $this->numProcesso : $num;
        if ($num)
        {
            $ano = substr($num,0,4);
            $serie = substr($num,5,5);
            $codigo = substr($num,10,2);
            return "$serie/$ano-$codigo";
        }
    }

	function RepEncLicitacao($licitacao, $tipo)
	{
		if(($tipo == '1') or ($tipo == '4'))//COMPRA
		{
			//primeiro, verifica se existe algum item licitação que corresponde a mais de um item requisição
			$criteria = $this->getCriteria();
			$criteria->AddColumnAttribute('max(itens.itemreq.item)');
			$criteria->addCriteria('numero','=', "'$licitacao'");
			$query = $criteria->retrieveAsQuery();
			$max = $query->result[0][0];

			//busca os dados
			$result = array();
			for($i = 1; $i <= $max; $i++)
			{
				$criteria0 = $this->getCriteria();
				$criteria0->AddColumnAttribute('count(itens.itemreq.idRequisicao)');
				$criteria0->addCriteria('numero','=', "'$licitacao'");
				$criteria0->addCriteria('itens.itemreq.item','=', "'$i'");
				$query0 = $criteria0->retrieveAsQuery();
				$quantidadeUOs = $query0->result[0][0];

				$criteria = $this->getCriteria();
				$criteria->AddColumnAttribute('itens.itemreq.requisicao.uoRequisitante.nome');
				$criteria->AddColumnAttribute('itens.itemreq.material.idelemento');
				if($quantidadeUOs > 1)//busca do itemreq (existem 2 itens req fundidos num mesmo item lic)
				{
					$criteria->AddColumnAttribute('itens.itemreq.quantPedida');
				}
				else//busca do mapa (nao busca quantidade no item, ela pode ter sido diminuida ou aumentada)
				{
					$criteria->AddColumnAttribute('itens.itemreq.mapa.quantidade');
				}
				$criteria->AddColumnAttribute('itens.itemreq.mapa.preco', 'valor');
				$criteria->AddColumnAttribute('itens.item');
				$criteria->addCriteria('numero','=', "'$licitacao'");
				$criteria->addCriteria('itens.itemreq.item','=', "'$i'");
				$criteria->addCriteria('itens.itemreq.mapa.vencedor','=', "'1'");
                $criteria->addCriteria("itens.itemreq.requisicao.dataHora",">","'31/12/2007'");
				$criteria->AddOrderAttribute('itens.itemreq.requisicao.uoRequisitante.nome');
				$criteria->AddOrderAttribute('itens.itemreq.material.idelemento');
				$criteria->AddOrderAttribute('itens.item');
				$query = $criteria->retrieveAsQuery();
				if($query->result)
				{
					foreach($query->result as $r)
					{
						$result[] = $r;
					}
				}
			}
			foreach ($result as $key => $row) {
				$nome[$key]  = $row[0];
				$idelemento[$key] = $row[1];
				$item[$key] = $row[4];
			}
			array_multisort($nome, SORT_ASC, $idelemento, SORT_ASC, $item, SORT_ASC, $result);
			return $result;
		}

		if($tipo == '2')//SERVIÇO
		{
			//primeiro, verifica se existe algum item licitação que corresponde a mais de um item requisição
			$criteria = $this->getCriteria();
			$criteria->AddColumnAttribute('max(itens.itemservext.item)');
			$criteria->addCriteria('numero','=', "'$licitacao'");
			$query = $criteria->retrieveAsQuery();
			$max = $query->result[0][0];

			//busca os dados
			$result = array();
			for($i = 1; $i <= $max; $i++)
			{
				$criteria0 = $this->getCriteria();
				$criteria0->AddColumnAttribute('count(itens.itemservext.idRequisicao)');
				$criteria0->addCriteria('numero','=', "'$licitacao'");
				$criteria0->addCriteria('itens.itemservext.item','=', "'$i'");
				$query0 = $criteria0->retrieveAsQuery();
				$quantidadeUOs = $query0->result[0][0];

				$criteria = $this->getCriteria();
				$criteria->AddColumnAttribute('itens.itemservext.requisicao.uoRequisitante.nome');
				$criteria->AddColumnAttribute('itens.itemservext.servico.idelemento');
				if($quantidadeUOs > 1)//busca do itemreq (existem 2 itens req fundidos num mesmo item lic)
				{
					$criteria->AddColumnAttribute('itens.itemservext.quantidade');
				}
				else//busca do mapa (nao busca quantidade no item, ela pode ter sido diminuida ou aumentada)
				{
					$criteria->AddColumnAttribute('itens.itemservext.mapa.quantidade');
				}
				$criteria->AddColumnAttribute('itens.itemservext.mapa.preco', 'valor');
				$criteria->AddColumnAttribute('itens.itemservext.item');
				$criteria->addCriteria('numero','=', "'$licitacao'");
				$criteria->addCriteria('itens.itemservext.item','=', "'$i'");
				$criteria->addCriteria('itens.itemservext.mapa.vencedor','=', "'1'");
                $criteria->addCriteria("itens.itemservext.requisicao.dataHora",">","'31/12/2007'");
				$criteria->AddOrderAttribute('itens.itemservext.requisicao.uoRequisitante.nome');
				$criteria->AddOrderAttribute('itens.itemservext.servico.idelemento');
				$criteria->AddOrderAttribute('itens.itemservext.item');
				$query = $criteria->retrieveAsQuery();
				if($query->result)
				{
					foreach($query->result as $r)
					{
						$result[] = $r;
					}
				}
			}
			foreach ($result as $key => $row) {
				$nome[$key]  = $row[0];
				$idelemento[$key] = $row[1];
				$item[$key] = $row[4];
			}
			array_multisort($nome, SORT_ASC, $idelemento, SORT_ASC, $item, SORT_ASC, $result);
			return $result;
		}

		if($tipo == '3')//LIVRO
		{
			//primeiro, verifica se existe algum item licitação que corresponde a mais de um item requisição
			$criteria = $this->getCriteria();
			$criteria->AddColumnAttribute('max(itens.itemreqbib.item)');
			$criteria->addCriteria('numero','=', "'$licitacao'");
			$query = $criteria->retrieveAsQuery();
			$max = $query->result[0][0];

			//busca os dados
			$result = array();
			for($i = 1; $i <= $max; $i++)
			{
				$criteria0 = $this->getCriteria();
				$criteria0->AddColumnAttribute('count(itens.itemreqbib.idRequisicao)');
				$criteria0->addCriteria('numero','=', "'$licitacao'");
				$criteria0->addCriteria('itens.itemreqbib.item','=', "'$i'");
				$query0 = $criteria0->retrieveAsQuery();
				$quantidadeUOs = $query0->result[0][0];

				$criteria = $this->getCriteria();
				$criteria->AddColumnAttribute('itens.itemreqbib.requisicao.uoRequisitante.nome');
				$criteria->AddColumnAttribute('itens.itemreqbib.material.idelemento');
				if($quantidadeUOs > 1)//busca do itemreq (existem 2 itens req fundidos num mesmo item lic)
				{
					$criteria->AddColumnAttribute('itens.itemreqbib.quantPedida');
				}
				else//busca do mapa (nao busca quantidade no item, ela pode ter sido diminuida ou aumentada)
				{
					$criteria->AddColumnAttribute('itens.itemreqbib.mapa.quantidade');
				}
				$criteria->AddColumnAttribute('itens.itemreqbib.mapa.preco', 'valor');
				$criteria->AddColumnAttribute('itens.item');
				$criteria->addCriteria('numero','=', "'$licitacao'");
				$criteria->addCriteria('itens.itemreqbib.item','=', "'$i'");
				$criteria->addCriteria('itens.itemreqbib.mapa.vencedor','=', "'1'");
                $criteria->addCriteria("itens.itemreqbib.requisicao.dataHora",">","'31/12/2007'");
				$criteria->AddOrderAttribute('itens.itemreqbib.requisicao.uoRequisitante.nome');
				$criteria->AddOrderAttribute('itens.itemreqbib.material.idelemento');
				$criteria->AddOrderAttribute('itens.item');
				$query = $criteria->retrieveAsQuery();
				if($query->result)
				{
					foreach($query->result as $r)
					{
						$result[] = $r;
					}
				}
			}
			foreach ($result as $key => $row) {
				$nome[$key]  = $row[0];
				$idelemento[$key] = $row[1];
				$item[$key] = $row[4];
			}
			array_multisort($nome, SORT_ASC, $idelemento, SORT_ASC, $item, SORT_ASC, $result);
			return $result;
		}
	}

	function getTotalDePropostasNaoLancadas($idFornecedor)
	{
		$criteria = $this->getCriteria();	
		$criteria->AddColumnAttribute('count(*)');
		$criteria->addCriteria('mapa.preco','=', "'0'");
        $criteria->addCriteria('mapa.status','=', "'1'");
		$criteria->addCriteria('mapa.idFornecedor','=',$idFornecedor);
        $criteria->addCriteria('mapa.idLicitacao','=',$this->idLicitacao);
        $query = $criteria->retrieveAsQuery();
        return $query->result[0][0];
	}
	
	/**
	 * Filtra as licitações para somente da UFJF e somente HU
	 *
	 * @param unknown_type uma query->result com dados
	 * @param unknown_type hu ou sigaept
	 */
	function filtraLicitacoes($query,$local)
	{
		$novaQuery = array();

        // COMPRA        
		foreach ($query->result as $row)
		{
			//var_dump($row[0]);
			$idLicitacao = $row[0];
			
			// Obtém um item da licitação de material
			$criteria = $this->getCriteria();	
            $criteria->AddColumnAttribute('itens.itemreq.requisicao.iduoreq.idUoRequisitante');
			$criteria->addCriteria('idLicitacao','=', "$idLicitacao");
	        $tempQuery = $criteria->retrieveAsQuery();

            if (!$tempQuery->result[0][0]) // Se nao estiver em material verifica se é serviço
            {
    			$criteria = $this->getCriteria();	
                $criteria->AddColumnAttribute('itens.itemservext.requisicao.iduoreq.idUoRequisitante');
                $criteria->addCriteria('idLicitacao','=', "$idLicitacao");
                $tempQuery = $criteria->retrieveAsQuery();                
            }

            // TODO tirar esse comentário quando requisicao de biblioteca entrar no ar
            /*
            if (!$tempQuery->result[0][0]) // Se não for nenhum dos dois verifica se é livro
            {
    			$criteria = $this->getCriteria();	
                $criteria->AddColumnAttribute('itens.itemreqbib.requisicao.iduoreq.idUoRequisitante');
                $criteria->addCriteria('idLicitacao','=', "$idLicitacao");
                $tempQuery = $criteria->retrieveAsQuery();                
            }
            */

	        if ($local == "UFJF")	        	        
	        {
	        	if ($tempQuery->result[0][0]!='325')
	        	{
	        		$novaQuery[] = $row;
	        	}
	        }
	        else 
	        {
	        	if ($tempQuery->result[0][0]=='325')
	        	{
	        		$novaQuery[] = $row;
	        	}
	        }
	        	        
		}

		$query->result = $novaQuery;
		
		return $query;		
	}

	/*---------------------------------------------------------
	
	Método checkNumero($numero)

	Retorna se aquele numero já foi utilizado em alguma licitação
	
	*---------------------------------------------------------*/
	function checkNumero($numero)
	{
		$criteria = $this->getCriteria();
		$criteria->addColumnAttribute('idLicitacao','total');
		$criteria->addCriteria("numero","=","'$numero'");
		$query = $criteria->retrieveAsQuery();

		if ($query->fields('total'))
            return true;
        else
            return false;
	}
	//IFSP
	function getUASG($iduser)
	{
		global $MIOLO;
		$db   = $MIOLO->GetDatabase('sigaept');
		$sql  = new sql(" i.uasg "," cm_instituicao i, cm_setor s, cm_usuario u ","i.idinstituicao = s.idinstituicao and s.idsetor = u.idsetor  and u.idusuario = ".$iduser,"");
		$query= $db->GetQuery($sql);
		return $query;	
	}
	function getIdUo($idinst)
	{
		global $MIOLO;
		$db = $MIOLO->GetDatabase('sigaept');
	$sql = new sql("iduo","ad_uo u, cm_instituicao i, cm_setor s", "u.idsetor = s.idsetor and s.idinstituicao = i.idinstituicao and u.idinstituicao = ".$idinst,"");
		$query = $db->GetQuery($sql);
		return $query;
	}
	function ListItensAtendidosInst($status = 0,$tipoRequisicao = '7',$instituicao)
	
	{	
		
		
		//$sql = New sql("i.idmaterial, m.descricao, r.idrequisicao,i.quantpedida, i.quantentregue, i.precoestimado as valor, m.idsubelemento, m.idelemento, i.idmaterial||'_'||r.idrequisicao as iditemreq, m.descricao as descreq, uo.sigla, m.unidade, (i.quantpedida*i.precoestimado) as valortotal,i.prioridade,i.descricaodetalhada,r.datahoraautreq",	"ad_itemreq i, ad_material m, ad_requisicao r, ad_uo uo, cm_setor s","m.idmaterial = i.idmaterial and i.idrequisicao = r.idrequisicao and r.iduoreq = uo.iduo and uo.idsetor = s.idSetor  and s.idinstituicao = $idinstituicao");		
		$sql = new sql("i.idmaterial, m.descricao, r.idrequisicao,i.quantpedida, i.quantentregue, i.precoestimado as valor, m.idsubelemento, m.idelemento, i.idmaterial||'_'||r.idrequisicao as iditemreq, m.descricao as descreq, uo.sigla, m.unidade ,uo.iduo, uo.idsetor,s.idSetor,s.idinstituicao,(i.quantpedida*i.precoestimado) as valortotal,i.prioridade,i.descricaodetalhada,r.datahoraautreq","ad_itemreq i, ad_material m, ad_requisicao r, ad_uo uo, cm_setor s","m.idmaterial = i.idmaterial and i.idrequisicao = r.idrequisicao and r.iduoreq = uo.iduo and uo.idsetor = s.idSetor  and s.idinstituicao = $idinstituicao");		
		
		//print($idinstituicao);
		if ($tipoRequisicao == '2')
            		$sql->SetWhereAnd("(r.tiporequisicao = '6' OR r.tiporequisicao = '7')");
        	else
    			$sql->SetWhereAnd("r.tiporequisicao = '$tipoRequisicao'");

		$sql->SetWhereAnd("(r.status = '4' or r.status = '7' or r.status = '8')");
		$sql->SetWhereAnd("r.suplementar <> 'S'");
		$sql->SetWhereAnd("i.status = '$status'");
		
		//if ($idinstituicao != null) //filtrar somente se for informado o elemento
			//$sql->SetWhereAnd("uo.idinst = $idinstituicao");
		
		
		$sql->SetOrderBy("m.idelemento");
		$sql->SetOrderBy("m.idsubelemento");
		$sql->SetOrderBy("m.descricao");
		$query = $this->ObjQuery($sql->Select());
		return $query;
	}



	/*---------------------------------------------------------

	Método deleteLicitacaoSemItens($idLicitacao)
	Apaga a licitação gerada sem itens

	*---------------------------------------------------------*/
	function deleteLicitacaoSemItens($idLicitacao)
	{
		$criteria = $this->getDeleteCriteria();
		$criteria->addCriteria('idLicitacao','=', "$idLicitacao");
		$criteria->delete();
	}

	function getTotalDePropostasLancadas($idFornecedor)
    {
		$sql = new sql("count(*)", "ad_mapalicitacao", "preco != 0 and status = '1' and idfornecedor = '$idFornecedor' and idlicitacao = '$this->idLicitacao'");
		$query = $this->ObjQuery($sql->Select());
		return $query;
	}
  
  	function setStatusItemFornecedor($item, $status, $idFornecedor)
	{	
		$sql = new sql('status','ad_mapalicitacao','idLicitacao = ? and item = ? and idfornecedor = ?');
		$values = array(
            $status,
			$this->idLicitacao,
			$item,
			$idFornecedor
		);		

		$ok = $this->Execute($sql->Update($values));
		return $ok;
	}
	
	function verificaParticipante($idFornecedor)
	{
		$sql = new sql('idlicitacao, idfornecedor', 'ad_participante', 'idlicitacao = ? and idfornecedor = ?');
		$values = array(
			$this->idLicitacao,
			$idFornecedor
		);		

		$query = $this->ObjQuery($sql->Select($values));
		if($query->result)
			return true;
		else
			return false;
	}
}
?>
