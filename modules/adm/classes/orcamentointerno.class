
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?php
class BusinessAdmOrcamentoInterno extends Business
{
    public $idUo;
    public $idRubrica;
    public $ano;
    public $credito;
    public $debito;
    public $previsaoDebito;
    public $creditoExecutante;
    public $saldo;
    public $rubrica;
    public $requisita;
    public $uo;

    function __construct($data = null)
    {
        parent::__construct('sigaept',$data);
    }
    
    function save()
    {
        $cf = new MCurrencyFormatter();
        $this->debito = $cf->toDecimal($this->debito);
        $this->credito = $cf->toDecimal($this->credito);
        $this->previsaoDebito = $cf->toDecimal($this->previsaoDebito);
        parent::save();
    }

    function addPrevisaoDebito($debto)
    {
        $cf = new MCurrencyFormatter();
        $this->previsaoDebito = $cf->toDecimal($this->previsaoDebito);
        $debto = $cf->toDecimal($debto);
        $this->previsaoDebito += $debto;
    }
    
    function removePrevisaoDebito($debto)
    {
        $cf = new MCurrencyFormatter();
        $this->previsaoDebito = $cf->toDecimal($this->previsaoDebito);
        $debto = $cf->toDecimal($debto);
        $this->previsaoDebito -= $debto;
    }
    
    function addDebito($debito)
    {
        $cf = new MCurrencyFormatter();
        $this->debito = $cf->toDecimal($this->debito);
        $debito = $cf->toDecimal($debito);
        $this->debito += $debito; 
    }
    
    function addCredito($credito)
    {
        $cf = new MCurrencyFormatter();
      	$this->credito = $cf->toDecimal($this->credito);
        $credito = $cf->toDecimal($credito);
        $this->credito += $credito;
    }
    
    function removeDebito($debito)
    {
        $cf = new MCurrencyFormatter();
        $this->debito = $cf->toDecimal($this->debito);
        $debito = $cf->toDecimal($debito);
        $this->debito -= $debito;
    }
    
    function removeCredito($credito)
    {
        $cf = new MCurrencyFormatter();
      	$this->credito = $cf->toDecimal($this->credito);
        $credito = $cf->toDecimal($credito);
        $this->credito -= $credito;
    }
    
    function addCreditoExecutante($credito)
    {
        $cf = new MCurrencyFormatter();
      	$this->creditoExecutante = $cf->toDecimal($this->creditoExecutante);
        $credito = $cf->toDecimal($credito);
        $this->creditoExecutante += $credito;
    }
    
    function removeCreditoExecutante($credito)
    {
        $cf = new MCurrencyFormatter();
      	$this->creditoExecutante = $cf->toDecimal($this->creditoExecutante);
        $credito = $cf->toDecimal($credito);
        $this->creditoExecutante -= $credito;
    }

    function setSaldo()
    {
        $cf = new MCurrencyFormatter();
        $this->saldo = ( $cf->toDecimal($this->credito) - ($cf->toDecimal($this->debito) + $cf->toDecimal($this->previsaoDebito)) );
    }

    function getSaldo()
    {
        return $this->saldo;
    }
//taka
    function setCredito($credito)
    {
        $cf = new MCurrencyFormatter();
	$cf->toDecimal($this->credito);
    }


 function setprevisaoDebito()
    {
        $cf = new MCurrencyFormatter();
        $cf->toDecimal($this->previsaoDebito);
    }



function getCredito()
    {
        return $this->credito;
    }

function getprevisaoDebito()
    {
        return $this->previsaoDebito;
    }
//taka


    function ListByNome($uo,$rubrica=null,$ano=null)
    {
        $criteria =  $this->getCriteria();
        $criteria->addCriteria('idUo','=', "$uo");
        if ($rubrica)
        {
            $criteria->addCriteria('idRubrica','LIKE', "$rubrica");
        }
        if ($ano)
        {
            $criteria->addCriteria('ano','=', $ano);
        } 
        return $criteria->retrieveAsQuery();
    }

    function GetById($idUo,$idRubrica,$ano)
    {
        $this->idUo = $idUo;
        $this->idRubrica = $idRubrica;
        $this->ano = $ano;
        $this->retrieve();
        return $this;
    } 

    function setData($data)
    {
        $this->idUo = $data->idUo;
        $this->idRubrica = $data->idRubrica;
        $this->ano = $data->ano;
        $this->credito = $data->credito;
        return $this;
    }

    function getSaldoUO($uo,$ano)
    {
        $criteria = $this->getCriteria();
        $criteria->addColumnAttribute('sum(credito)');
        $criteria->addColumnAttribute('sum(debito)');
        $criteria->addColumnAttribute('sum(previsaoDebito)');
        $criteria->addCriteria('idUo','=',"$uo");
        $criteria->addCriteria('ano','=',"'$ano'");
        $query = $criteria->retrieveAsQuery();
        return $query->result[0];
    }

    function getSaldoRubricaIntervalo($uo,$rubrica,$inicio,$fim)
    {
        $criteria = $this->getCriteria();
        $criteria->addColumnAttribute('sum(credito)');
        $criteria->addColumnAttribute('sum(debito)');
        $criteria->addColumnAttribute('sum(previsaoDebito)');
        $criteria->addCriteria('idUo','=',"$uo");
        $criteria->addCriteria('idRubrica','=',"'$rubrica'");
        $criteria->addCriteria('ano','>=',"'$inicio'");
        $criteria->addCriteria('ano','<=',"'$fim'");
        $query = $criteria->retrieveAsQuery();
        return $query->result[0];
    }

    function getSaldoUOIntervalo($uo,$inicio,$fim)
    {
        $criteria = $this->getCriteria();
        $criteria->addColumnAttribute('sum(credito)');
        $criteria->addColumnAttribute('sum(debito)');
        $criteria->addColumnAttribute('sum(previsaoDebito)');
        $criteria->addCriteria('idUo','=',"$uo");
        $criteria->addCriteria('ano','>=',"'$inicio'");
        $criteria->addCriteria('ano','<=',"'$fim'");
        $query = $criteria->retrieveAsQuery();
        return $query->result[0];
    }

    function getSaldoRubrica($uo,$ano,$rubrica)
    {
        $criteria = $this->getCriteria();
        $criteria->addColumnAttribute('sum(credito)');
        $criteria->addColumnAttribute('sum(debito)');
        $criteria->addColumnAttribute('sum(previsaoDebito)');
        $criteria->addCriteria('idUo','=',"$uo");
        $criteria->addCriteria('ano','=', $ano);
        $criteria->addCriteria('idRubrica','=',"'$rubrica'");
        $query = $criteria->retrieveAsQuery();
    }

    function GetRubricasByUo($uo,$ano=null)
    {
        $criteria =  $this->getCriteria();
        $criteria->addCriteria('idUo','=', $uo);
        if ($ano != null)
        {
            $criteria->addCriteria('ano','=', $ano);
        }
        return $criteria->retrieveAsQuery();
    }

    function getTipoReqsPermitidas()
    {
        $this->retrieveAssociation('requisita');
        if ($this->requisita) foreach ($this->requisita as $requisita) $requisita->getTipoReq();
        return $this->requisita;
    }
	
    function getReqsPermitidasGrid($idUo, $idRubrica, $ano)
    {
        $criteria = $this->getCriteria();
        $criteria->AddColumnAttribute('requisita.idTipoReq');
        $criteria->AddColumnAttribute('requisita.tipoReq.descricao', 'descricao');
        $criteria->AddColumnAttribute('requisita.idUo');
        $criteria->AddColumnAttribute('requisita.ano');
        $criteria->addCriteria('idUo','=',$idUo);
        $criteria->addCriteria('requisita.idUo','=',$idUo);
        $criteria->addCriteria('requisita.idRubrica','=', "'$idRubrica'");
        $criteria->addCriteria('ano','=',$ano);
        $criteria->addCriteria('requisita.ativo','=',"'S'" );
        $criteria->addCriteria('requisita.tipoReq.idTipoReq','=','requisita.idTipoReq');
        
        $criteria->addCriteria('idRubrica','=','requisita.idRubrica' );
        $criteria->addCriteria('idUo','=','requisita.idUo' );
        $criteria->addCriteria('idRubrica','=','rubrica.idRubrica');
        $criteria->addCriteria('idRubrica','=','requisita.idRubrica');
        $criteria->addCriteria('ano','=','requisita.ano');
        $criteria->addCriteria('requisita.idTipoReq','=', 'tipoReq.idTipoReq');
        return $criteria->retrieveAsQuery();
    }
	
    function getReqsNaoPermitidas($idUo, $idRubrica,$ano)
    {
        $criteria = $this->getCriteria();
        $criteria->AddColumnAttribute('requisita.idTipoReq');
        $criteria->AddColumnAttribute('requisita.tipoReq.descricao', 'descricao');
        $criteria->addCriteria('idUo','=',$idUo);
        $criteria->addCriteria('requisita.idUo','=',$idUo);
        $criteria->addCriteria('requisita.idRubrica','=',"'$idRubrica'");
        $criteria->addCriteria('requisita.ativo','<>',"'S'" );
        $criteria->addCriteria('requisita.tipoReq.idTipoReq','=','requisita.idTipoReq' );
        
        $criteria->addCriteria('idRubrica','=','requisita.idRubrica' );
        $criteria->addCriteria('idUo','=','requisita.idUo' );
        $criteria->addCriteria('idRubrica','=','rubrica.idRubrica' );
        $criteria->addCriteria('idRubrica','=','requisita.idRubrica' );
        $criteria->addCriteria('ano','=',$ano);
        $criteria->addCriteria('ano','=','requisita.ano');
        $criteria->addCriteria('requisita.idTipoReq','=','tipoReq.idTipoReq');
        return $criteria->retrieveAsQuery();
    }
      
    function getTipoReqPermitida($tipoReq)
    {
        global $MIOLO;
        $this->retrieveAssociation('requisita');
        if ($this->requisita)
        {
            foreach ($this->requisita as $requisita)
            {
                if ($requisita->idTipoReq == $tipoReq)
                {
                    return $requisita;
                }
            }
        }
        $requisita = $MIOLO->getBusiness('adm','requisita');
        $requisita->idTipoReq = $tipoReq;
        $requisita->idUo = $this->idUo;
        $requisita->idRubrica = $this->idRubrica;
        $requisita->ano = $this->ano;
        return $requisita;
    }
	
    function getTipoReqPermitidaAtivo($tipoReq)
    {
        global $MIOLO;
        $this->retrieveAssociation('requisita');
        if ($this->requisita)
        {
            foreach ($this->requisita as $requisita)
            {
                if ($requisita->idTipoReq == $tipoReq)
                {
                    return $requisita;
                }
            }
        }
        $requisita = $MIOLO->getBusiness('adm','requisita');
        $requisita->idTipoReq = $tipoReq;
        $requisita->idUo = $this->idUo;
        $requisita->idRubrica = $this->idRubrica;
        $requisita->ano = $this->ano;
        $requisita->ativo = "'S'";
        return $requisita;
    }


    function getRelatorioOrcamentoInterno($idUo,$tipo)
    {
        $criteria = $this->getCriteria();
        $criteria->AddColumnAttribute('requisita.uo.sigla');
        $criteria->AddColumnAttribute('credito');
        $criteria->AddColumnAttribute('previsaoDebito');
        $criteria->addCriteria('requisita.tipoReq.idTipoReq','=',$tipo);
        $criteria->addCriteria('idUo','=',$idUo);
        return $criteria->retrieveAsQuery();
    }

    function getDotacaoDebito($ano, $idRubrica = NULL, $idUo = NULL)
    {
        $criteria = $this->getCriteria();
        $criteria->AddColumnAttribute('uo.sigla');
        $criteria->AddColumnAttribute('idrubrica');
        $criteria->AddColumnAttribute('ano');
        $criteria->AddColumnAttribute('credito');
        $criteria->AddColumnAttribute('debito');
        $criteria->AddColumnAttribute('previsaodebito');

      $criteria->addCriteria('ano','=', $ano);

        if ($idRubrica)
            $criteria->addCriteria('idRubrica','=',"'$idRubrica'");

        if ($idUo)
            $criteria->addCriteria('idUo','=',$idUo);

        $criteria->addOrderAttribute('uo.sigla');
        return $criteria->retrieveAsQuery();
    }

    function getAnos()
    {
        $criteria = $this->getCriteria();
        $criteria->AddColumnAttribute('distinct(ano)','id');
        $criteria->AddColumnAttribute('ano','ano');
        return $criteria->retrieveAsQuery();
    }
    
    function GetDescricaoRubricasByUo($uo,$ano=null)
    {
        $criteria = $this->getCriteria();
        $criteria->setDistinct(true);
        $criteria->addColumnAttribute('rubrica.idRubrica');
        $criteria->addColumnAttribute('rubrica.descricao');
        $criteria->addCriteria('idUo','=', "$uo");
        if ($ano != null)
        {
            $criteria->addCriteria('ano','=', $ano);
        }
        return $criteria->retrieveAsQuery();
    }
}
?>
