
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?php
class repLiquidacao extends MPDFReport
{
	var $img;
	var $timestamp;
	var $objEmpenho;
	var $data;

	function __construct()
	{
		global $MIOLO, $module, $page, $context, $self, $action, $perms, $item;

		$notas = Form::GetFormValue('notas');

		$ui = $MIOLO->GetUI();
		$this->img = $ui->GetImageSrc('logonet.png',$module); 

	    $columns = array(
			new PDFReportColumn('empenho','<b><i>Empenho</i></b>','center',true,18,true,null,true),
			new PDFReportColumn('fonte','<b><i>Fonte</i></b>','center',true,18,true,null,true),
			new PDFReportColumn('rubrica','<b><i>Nat. Desp</i></b>','center',true,18,true,null,true),
			new PDFReportColumn('pago','<b><i>R$ Pago</i></b>','center',true,18,true,null,true),
			new PDFReportColumn('saldo','<b><i>R$ Saldo</i></b>','center',true,18,true,null,true),
		);

		$this->objEmpenho = $MIOLO->GetBusiness($module,'empenho');

		if($notas) //report chamado a partir da Liquidação
		{
			$liquidacao = $MIOLO->GetBusiness($module, 'liquidacao');
			$query = $liquidacao->getDadosRepLiquidacao($notas);
		}
		else //report chamado a partir do panel de Relatórios
		{
			$licitacao = Form::GetFormValue('liquidacao');
			$objLicitacao = $MIOLO->GetBusiness($module, 'licitacao');
			$idLicitacao = $objLicitacao->GetIdBynumero($licitacao);
			$query = $this->objEmpenho->getEmpenhosByLicitacaoData($idLicitacao, $data);
		}

		foreach($query->result as $row)
		{
			//busca subelemento
			$querySubElemento = $this->objEmpenho->getSubElemento($row[0]);
			$subElemento = $querySubElemento->result[0][0];

			$saldo = $this->objEmpenho->getSaldo($row[0]);

			$data[] = array(
				$row[1],
				$this->string_mask(trim($row[2]),'AAA.AAA.AAA'),
				$this->string_mask(trim(trim($row[3]).$subElemento),'AA.AA.AA.AA'),
				number_format(str_replace(',','.',$row[4]),2,',','.'),
//				number_format(str_replace(',','.',$saldo-$row[4]),2,',','.'),
				number_format(str_replace(',','.',$saldo),2,',','.'),
			);
		}

		parent::__construct($data,$columns,12);

		$this->SetOption('showTableTitle',1);
        $this->SetOption('fontSize',10);
		$this->SetOption('showLines',1);
		$this->timestamp = date('d/m/Y'); //G:i
	}

	function GeneratePageHeader()
	{   
		global $MIOLO, $module;

		$liquidacao = Form::GetFormValue('liquidacao');
		$notas = Form::GetFormValue('notas');
		$notas = explode(',', $notas);
		$idFornecedor = Form::GetFormValue('idFornecedor');

		$objFornecedor = $MIOLO->GetBusiness($module, 'fornecedor', $idFornecedor);
		$objFornecedor->getInstituicao();
		$objNota = $MIOLO->GetBusiness($module, 'notafiscal');
		$objProcesso = $MIOLO->GetBusiness('protocolo', 'processo');
		$numPro = $objProcesso->numProcessoFormatado( $objNota->getProcessoPagamento($notas[0]) );
		$cnpj = $this->string_mask($objFornecedor->instituicao->cgc,'AA.AAA.AAA/AAAA-AA');
		$cc = $this->retiraCarac($objFornecedor->contaCorrente);

		$h = $this->pdf->getFontHeight(12);
		$this->pdf->addText(520,800-$h,10,'Página: ' . $this->pn->pageNumber . '/' . $this->pn->pageCount);


		$x00=$this->pdf->left;
		$hh = $this->pdf->getFontHeight(12);
		$this->pdf->addText($x00, 800, 12, $this->manager->getConf('instituicao.sigla')." - ".$this->manager->getConf('instituicao.nome'));
		$this->pdf->addText($x00, 800 - $hh, 12, $this->manager->getConf('theme.system'));

/*
		$this->pdf->ezImage($this->img,15,50,'none','left');
		$this->pdf->addText(100,800,12,'UFJF - Universidade Federal de Juiz de Fora');

		$this->pdf->addText(100,800-$h,12,'CGCO - Centro de Gestão do Conhecimento Organizacional');
		$this->pdf->addText(100,800-$h-$h,12,'SIGA - Sistema Integrado de Gestão Acadêmica');
*/

		$this->pdf->addText(100,800-$h-$h-$h,12,'Módulo Administrativo');
		$this->pdf->ezSetY(800-$h-$h-$h-$h);

		$x0 = $this->pdf->left-5;
        $x1 = $this->pdf->right-5;
        $y = 800 - $h - $h - 30;

		$this->pdf->addTextWrap($this->pdf->x+50,720,600,10,'Da: COESF - Coordenação de Execução e Suporte Financeiro','left');
		$this->pdf->addTextWrap($this->pdf->x+50,705,600,10,'Para: Gerência de Execução Financeira','left');
		$this->pdf->addTextWrap($this->pdf->x+50,670,550,10,"            Estamos encaminhando o presente processo, devidamente formalizado correspondente ao pagamento", 'center');
		$this->pdf->addTextWrap($this->pdf->x+50,655,550,10,"abaixo especificado:", 'left');

		$this->pdf->addTextWrap($this->pdf->x+50,630,550,10,"Empresa: " . $objFornecedor->instituicao->nome, 'left');
		$this->pdf->addTextWrap($this->pdf->x+50,615,550,10,"CNPJ: " . $cnpj, 'left');
		$this->pdf->addTextWrap($this->pdf->x+50,600,550,10,"Dados Bancários: " . $objFornecedor->idBanco . ' / ' . substr($objFornecedor->idAgencia, 1, 4) . ' / ' . $cc, 'left');
		$this->pdf->addTextWrap($this->pdf->x+50,575,550,10,"Processo Pagamento: " . $numPro, 'left');
		$this->pdf->ezSetY(550);
	}

	function GeneratePageFooter()
	{
		$this->pdf->addTextWrap($this->pdf->x+50,285,600,10,'Optante Simples         SIM (     )         NÃO (     )','left');
		$this->pdf->addTextWrap($this->pdf->x+50,265,600,10,'Contrato nº _____________________','left');

		$this->pdf->addTextWrap($this->pdf->x,245,600,10,'Em _____ de __________________ de 2______','center');
		$this->pdf->addTextWrap($this->pdf->x,225,600,10,'_________________________________________','center');
		$this->pdf->addTextWrap($this->pdf->x,205,600,10,'Gerente Execução Orçamentária','center');

		$this->pdf->line($this->pdf->right, 197, $this->pdf->left, 197);

		$this->pdf->addTextWrap($this->pdf->x+50,180,600,10,'À Gerência de Contabilidade:','left');
		$this->pdf->addTextWrap($this->pdf->x+30,160,600,10,'       Este pagamento foi autorizado através da Ordem Bancária nº _________________________, ', 'center');
		$this->pdf->addTextWrap($this->pdf->x+50,145,600,10,'DARF nº __________________ e GPS nº _________________.', 'left');
		$this->pdf->addTextWrap($this->pdf->x,120,600,10,'Em ______ de __________________ de 2______','center');
		$this->pdf->addTextWrap($this->pdf->x,100,600,10,'______________________________________','center');
		$this->pdf->addTextWrap($this->pdf->x,88,600,10,'Gerente de Execução Financeira','center');

		$this->pdf->line($this->pdf->right, 85, $this->pdf->left, 85);

		$this->pdf->addTextWrap($this->pdf->x,70,600,10,'Conformidade contábil efetuada em: ______/______/________','center');
		$this->pdf->addTextWrap($this->pdf->x,52,600,10,'______________________________________','center');
		$this->pdf->addTextWrap($this->pdf->x,40,600,10,'Gerente de Contabilidade','center');

	}

	function string_mask($string, $mask)
	{
		$totalString = strlen($string);
		$totalMask = strlen($mask);
		$string_mask = '';
		$j = 0;
		$k = 0;
		for($i = 0; $i < $totalMask; $i++)
		{
			if($j >= $totalString)
			{
				break;
			}
			if($mask{$totalMask-1-$i} == 'A')
			{
				$string_mask = $string{$totalString-1-$j} . $string_mask;
				$j++;
				$k++;
			}
			else
			{
				$string_mask = $mask{$totalMask-1-$k} . $string_mask;
				$k++;
			}
		}
		return $string_mask;
	}

	function retiraCarac($string)
	{
		$totalString = strlen($string);
		$novaString = '';
		for($i = 0; $i < $totalString; $i++)
		{
			if( ($string{$i} != '.') and ($string{$i} != '-') )
			{
				$novaString .= $string{$i};
			}
		}
		return $novaString;
	}
}
?>
