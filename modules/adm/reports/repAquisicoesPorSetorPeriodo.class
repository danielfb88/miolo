
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?php
class repAquisicoesPorSetorPeriodo extends PDFReport
{
	var $img;
	var $timestamp;
    var $level = array();
	var $dataInicial;
	var $dataFinal;
	var $idSetor;
	var $setor;
	var $objItemPatrimonio;

	function __construct()
	{
        global $MIOLO, $module, $page, $context, $self, $action, $perms;

        parent::__construct(NULL, NULL, 55);
        $ui = $MIOLO->GetUI();
		$this->img = $ui->GetImageSrc('logo_siga.png',$module); 
        //        $this->SetPDF(new ezPDFReport('2'));
        $this->timestamp = date('d/m/Y G:i');
        //        $this->SetTrigger('AfterNewPage','repMultiLevel2','AfterNewPage', $this);
        $this->pdf->ezStartPageNumbers(520, 800, 12, 'rigth', 'Página: {PAGENUM}');
        $this->pdf->ezSetMargins(100, 30, 30, 30);
        $this->GeneratePageHeader();
        $this->GeneratePageFooter();
		$this->SetOption('fontSize',7);

		$this->dataInicial = Form::GetFormValue('dataInicial');
		$this->dataFinal = Form::GetFormValue('dataFinal');
		$this->idSetor = Form::GetFormValue('idSetor');
		$this->setor = Form::GetFormValue('setor');
		$this->objItemPatrimonio = $MIOLO->GetBusiness($module,'itempatrimonio');

		//montagem da árvore de idelementos.idsubelementos
		$classificadores = $this->objItemPatrimonio->GetClassificadoresPorSetorPeriodo($this->dataInicial, $this->dataFinal, $this->idSetor);
		$numClassificadores = $classificadores->GetRowCount();
		$classificadores->moveFirst();

		$tree = array();
		for ($j = 0; $j < $numClassificadores; $j++)
		{
			//busca e agrupa dados para cada classificador
			$rowClassificador = $classificadores->getRowValues();
			$classificadores->moveNext();

			//$data0 = [0-ip.descricao, 1-ip.dataaquisicao, 2-ip.idempenhado, 3-ip.subelemento, 4-ip.iditempatrimonio, 5-ip.valor]
			$data0 = $this->objItemPatrimonio->RepAquisicoesPorSetorPeriodo($this->dataInicial, $this->dataFinal, $this->idSetor, $rowClassificador[0]);
			$total = count($data0);
			$data = array();
			$soma21 = 0;
			$soma22 = 0.0;
			$k = -1;
			for($i = 0; $i < $total; $i++)
			{
				if( ($data0[$i][2] != $data0[$i-1][2]) or ($data0[$i][0] != $data0[$i-1][0]) or ($data0[$i][4] != $data0[$i-1][4]+1) )
				//(idEmpenhado dif) ou (descricao dif) ou (idItemPatrimonio fora de ordem)
				{
					$k++;
					//$data = [0-INICIAL, 1-FINAL, 2-ip.descricao, 3-ip.dataaquisicao, 4-QUANTIDADE, 5-VALOR]
					$data[$k] = array($data0[$i][4], $data0[$i][4], $data0[$i][0], $data0[$i][1], 1, floatval(str_replace(',','.',$data0[$i][5])));
				}
				else
				{
					$data[$k] = array($data[$k][0], $data0[$i][4], $data[$k][2], $data[$k][3], $data[$k][4]+1, $data[$k][5]+floatval(str_replace(',','.',$data0[$i][5])));
				}
			}
			for($q = 0; $q < count($data); $q++)
			{
				$soma21 += $data[$q][4];//quantidade
				$soma22 += floatval(str_replace(',','.',$data[$q][5]));//valor
				$data[$q][5] = number_format(str_replace(',','.',$data[$q][5]),2,',','.');
			}
			$tree[$rowClassificador[0] . ' - ' . $rowClassificador[1]] = $data;
			$summary2[] = array(array(
				"<b>Total do Classificador:</b>",
				"<b>$soma21</b>",
				"<b>" . number_format(str_replace(',','.',$soma22),2,',','.') . "</b>"
			));
			$soma11 += $soma21;
			$soma12 += $soma22;
		}
		$summary1 = array(array(
			"<b>Total Geral:</b>",
			"<b>$soma11</b>",
			"<b>" . number_format(str_replace(',','.',$soma12),2,',','.') . "</b>"
		));
//var_dump($tree);

		// define as colunas
		$columns = array(
			new PDFReportColumn('det0', '<b><i>Inicial</i></b>', 'center', false, 7, true),
			new PDFReportColumn('det1', '<b><i>Final</i></b>', 'center', false, 7, true),
			new PDFReportColumn('det2', '<b><i>Descrição</i></b>', 'left', false, 63, true),
			new PDFReportColumn('det3', '<b><i>Data</i></b>', 'center', false, 9, true),
			new PDFReportColumn('det4', '<b><i>Qte</i></b>', 'right', false, 5, true),
			new PDFReportColumn('det5', '<b><i>Valor</i></b>', 'right', false, 9, true),
		);

		$sum2 = array(
			new PDFReportColumn('texto0', 'texto0', 'right', false, 86, true),
			new PDFReportColumn('texto1', 'texto1', 'right', false, 5, true),
			new PDFReportColumn('texto2', 'texto2', 'right', false, 9, true),
		);

		$sum1 = array(
			new PDFReportColumn('texto0', 'texto0', 'right', false, 86, true),
			new PDFReportColumn('texto1', 'texto1', 'right', false, 5, true),
			new PDFReportColumn('texto2', 'texto2', 'right', false, 9, true),
		);

		// Largura do report, em %
		$this->SetWidth(100);

		// registra as colunas de detalhes e summary
		$this->SetColumns($columns);
		$colDetail = $this->columns;
		$this->SetColumns($sum2);
		$colSum2 = $this->columns;
		$this->SetColumns($sum1);
		$colSum1 = $this->columns;

		// gera o report
		$i = 0;
		foreach ($tree as $this->level[1] => $node1)
		{
			$this->SetOption('showHeadings', 1);
			$this->SetOption('showLines', 0);
			$this->columns = $colDetail;
			$this->GenerateGroupHeader(1, $this->level);
			$this->GenerateData($node1);
			$this->SetOption('showHeadings', 0);
			$this->SetOption('showLines', 1);

			$this->columns = $colSum2;
			$this->GenerateData($summary2[$i++]);
		}
		$this->columns = $colSum1;
		$this->GenerateData($summary1);
	}

	function GenerateGroupHeader($level, $array)
	{
		$this->pdf->SetStrokeColor(0, 0, 0);
		$x0 = $this->pdf->left;

		if ($level == 1)
		{
			$this->pdf->ezSetDy(-45, 'makeSpace');
			$y = $this->pdf->y;
			$this->pdf->addText($x0, $y + 19, 10, 'Classificador: ' . $array[1]);
			$this->pdf->line($x0, $y + 15, 300, $y + 15);
			$this->pdf->ezSetDy(+15);
		}
	}

	function GeneratePageHeader()
	{
		$this->dataInicial = Form::GetFormValue('dataInicial');
		$this->dataFinal = Form::GetFormValue('dataFinal');
		$this->idSetor = Form::GetFormValue('idSetor');
		$this->setor = Form::GetFormValue('setor');
		$x0 = $this->pdf->left;
		$x1 = $this->pdf->right;
		$h = $this->pdf->getFontHeight(12);
		$header = $this->pdf->openObject();
		$this->pdf->saveState();
		//$this->pdf->addPngFromFile($this->img, $x0, 780, 50, 25);

		$x0=$this->pdf->left;	
		$this->pdf->addText($x0, 800, 12, $this->manager->getConf('instituicao.sigla')." - ".$this->manager->getConf('instituicao.nome'));
		$this->pdf->addText($x0, 800 - $h, 12, $this->manager->getConf('theme.system'))

/*		$this->pdf->addText($x0 + 60, 800, 12, 'UFJF - Universidade Federal de Juiz de Fora');
		$this->pdf->addText($x0 + 60, 800 - $h, 12, 'Patrimônio da Universidade Federal de Juiz de Fora');
		$this->pdf->addText($x0 + 60, 800 - $h - $h, 12, 'SIGA - Sistema Integrado de Gestão Acadêmica');
*/

		$this->pdf->SetStrokeColor(0, 0, 0);
		$y = 800 - $h - $h - 5;
		$this->pdf->line($x0, $y, $x1, $y);
		$this->pdf->addText($x0, $y - 13, 12, "Relatório de Aquisições por Setor: $this->idSetor ($this->setor) - Período: de $this->dataInicial a $this->dataFinal");
		$this->pdf->line($x0, $y - 15, $x1, $y - 15);
		$this->pdf->restoreState();
		$this->pdf->closeObject();
		$this->pdf->addObject($header, 'all');
		$this->pdf->ezSetDy(+15);
	}

	function GeneratePageFooter()
	{
		$x0 = $this->pdf->left;
		$x1 = $this->pdf->right;
		$footer = $this->pdf->openObject();
		$this->pdf->saveState();
		$this->pdf->SetStrokeColor(0, 0, 0);
		$this->pdf->line($x0, 28, $x1, 28);
		$this->pdf->addText($x0, 19, 9, $this->timestamp . ' - CGCO/DSI');
		$this->pdf->restoreState();
		$this->pdf->closeObject();
		$this->pdf->addObject($footer, 'all');
	}

	function GenerateData($data)
	{
		$this->pdf->ezSetDy(-5);
		$this->SetData($data);
		$this->rawdata = $this->GenerateTableData();
		$this->GenerateBody($this->rawdata);
	}

	function Generate()
	{
		$this->SetOutput();
		$this->Execute();
	}

}
?>
