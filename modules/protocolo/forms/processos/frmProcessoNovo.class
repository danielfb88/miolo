<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?php
class frmProcessoNovo extends MFormAjax
{
	protected $processo;
	protected $perms;
	protected $setor;
	protected $setorAcesso;
	protected $session;

	public function __construct()
	{
		//      construct
		global $MIOLO;
		$this->processo  = $MIOLO->GetBusiness('protocolo','processo');
		$this->setor  = $MIOLO->GetBusiness('protocolo','setor');
		$this->setorAcesso  = $MIOLO->GetBusiness('protocolo','setoracesso');
		$this->perms  = $MIOLO->getPerms();
		$this->session = $MIOLO->session;
		parent::__construct('Incluir Processo');
		$this->SetClose($MIOLO->GetActionURL('protocolo','main'));
		$this->page->addJsCode(file_get_contents(dirname(__FILE__).'/js/frmProcessoNovo.js'));
		$this->EventHandler();
	}

	public function CreateFields()
	{
		global $MIOLO;

		//      ano do processo
		if ($this->perms->checkAccess('PROT_ANO', A_ACCESS))
		{
			$ano = array('last'=>date('Y')-1,'this'=>date('Y'));
//			$value = ($this->session->isRegistered('sAno')) ? $this->session->getValue('sAno') : $ano['this'];
			$opt1 = new MOption( 'opt1', $ano['last'],$ano['last'].'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;', false, 'id1' );
			$opt2 = new MOption( 'opt2', $ano['this'],$ano['this'].'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;', true, 'id2' );
			$groupAno = new MRadioButtonGroup('anoCorrente','Ano do processo',array($opt1,$opt2),false,'','horizontal','css');
			$groupAno->addAttribute('style','padding:10px');
		}
		else
		{
			$ano = date('Y');
			$groupAno = new MHiddenField('anoCorrente',$ano);
		}

		if($this->perms->checkAccess('PROT_DIR', A_EXECUTE)){
			$permissao = 'dir';
		}elseif ($this->perms->checkAccess('PROT_GER', A_EXECUTE)){
			$permissao = 'ger';
		}elseif ($this->perms->checkAccess('PROT_COORD', A_EXECUTE)){
			$permissao = 'coord';
		}else{
			$permissao = 'false';
		}


		//      dados do processo
		$url = $this->manager->getActionUrl('protocolo','ajaxhandler');		

		if (($this->perms->checkAccess('PROT_ADMIN', A_EXECUTE)) || (($this->perms->checkAccess('PROT_PC',A_EXECUTE)) && ($this->perms->checkAccess('PROT_PT',A_EXECUTE)))){
			$tipo = new Mselection('tipo',$this->session->getValue('sTipo'),'Tipo:',array('P'=>'Processo','A'=>'Protocolado'));
		}elseif ($this->perms->checkAccess('PROT_PC',A_EXECUTE)){
			$tipo = new Mselection('tipo',$this->session->getValue('sTipo'),'Tipo:',array('P'=>'Processo'));
		}elseif ($this->perms->checkAccess('PROT_PT',A_EXECUTE)){
			$tipo = new Mselection('tipo',$this->session->getValue('sTipo'),'Tipo:',array('A'=>'Protocolado'));
		}

		//$tipo = new MSelection('tipo',$this->session->getValue('sTipo'),'Tipo:',array('P'=>'Processo','A'=>'Protocolado'));
		//  IFRJ   $tipo = new MSelection('tipo','','Tipo:',array('P'=>'Processo','A'=>'Protocolado'));
		MIOLO::GetPage()->OnLoad("doTextTipo('$url');"); // IF Sudeste MG
		$tipo->addAttribute("onchange","doTextTipo('$url');");

		//$titulo = new MTextField('titulo',$this->session->getValue('sTitulo'),'Titulo:',90);
		$titulo = new MTextField('titulo','','Titulo',90);
		$titulo->addAttribute('maxlength','80');
	
		$solicitante = new MTextField('solicitante','','Solicitante:',80);
		$solicitante->addAttribute('maxlength','80');

		$receberEmail = new Selection('receberEmail','','<br>Deseja receber informações sobre o processo por e-mail?',array('S'=>'Sim','N'=>'Não'));
		$email = new TextField('email','','<br>Informe o e-mail do interessado apenas se não for o autor do processo. Caso seja autor do processo, utilize o campo abaixo para informar se deseja ou não acompanhar o processo por e-mail.',70, '');
		$email->addAttribute('maxlength','50');

		//$assunto = new MMultiLineField('assunto',$this->session->getValue('sAssunto'),'Assunto:',240,5,88);
		$assunto = new MMultiLineField('assunto','','Assunto:',240,5,69);
		$assunto->addAttribute('maxlength','240');
		
		$publico = new Selection('publico','','<br>Tornar processo público:',array('S'=>'Sim','N'=>'Não'));
		$espaco = new MSpacer(2);
		$espaco1 = new MSpacer(1);
		//$clearProcesso = ($this->session->IsRegistered('sTitulo') && $this->session->IsRegistered('sSolicitante') && $this->session->IsRegistered('sAssunto')) ? new MButton('limparProcesso','Limpar',"javascript:doLimparDadosProcesso('$url')") : null;
		$clearProcesso = new MButton('limparProcesso','Limpar',"javascript:doLimparDadosProcesso('$url')");
		
		$groupDadosProcesso = new MBaseGroup( 'groupTipoProcesso', 'Dados do processo',array($tipo,$titulo,$espaco1,$espaco1,$solicitante,$email, $espaco1,$espaco1, $assunto,$receberEmail,$espaco,$publico,$espaco,$clearProcesso),'horizontal','css');
		$groupDadosProcesso->addAttribute('style','padding:10px');

		//      origem do processo

		//IFSP
		$msg_tst = $MIOLO->login->idkey;
		$uasg 	 = $this->processo->getUASG($msg_tst);
		$value   = ($this->session->IsRegistered('sInstituicao')) ? $this->session->getValue('sInstituicao') : $uasg->fields('uasg');

		$instituicao =  new MTextField('instituicao',$value,'Instituição:',15);
		$instituicao->addAttribute('maxlength','6');
		$numProcesso = new MDiv('m_numProcesso','');

		if (!$this->perms->checkAccess('PROT_ADMIN', A_ACCESS))
		{
			$instituicao->setReadOnly(true);
		}
		else
		{
			$url 			= $this->manager->getActionUrl('protocolo','ajaxhandler');
			$origemExterna  = new MCheckBox( 'origemExterna','value','&nbsp;',false, _M('externo') );
			$origemExterna->addAttribute("onchange","doTextInstituicao('$url');doTextOrigem('$url');");
			$destinoExterno  = new MCheckBox( 'destinoExterno','value','&nbsp;',false, _M('externo') );
			$destinoExterno->addAttribute("onchange","doTextDestino('$url');");
		}
		
		$setorOrigem = $this->session->IsRegistered("setorOrigem") ? $this->session->GetValue("setorOrigem") : $this->processo->getSetorUsuario();
		$setoresAcesso = ($this->perms->checkAccess('PROT_ADMIN', A_ACCESS)) ? $this->setor->selAll() : $this->setorAcesso->selSetoresAcesso($this->processo->getSetorUsuario());
$teste = $setorOrigem;
		//IFSP
	/*	$setorOrigemExterna = new MTextField('setorOrigemExterna',$setorOrigem,'Setor de Origem:',15);
		$setorOrigemExterna->addAttribute('readonly',false);*/

//Lucas Amaral

		$setor = $MIOLO->GetBusiness('common', 'setor');
		$setor->idSetor = $setor->getIdBySigla($setorOrigem);
		$equivalentes[] = array($setorOrigem, $setorOrigem);
		
		$result = $setor->retrieveEquivalencia();

        foreach($result as $e)
        {
            $equivalentes[] = array($e[0], $e[0]);
        }
		
		$siglaOrigem = new MHiddenField('siglaOrigem',$setorOrigem);
		$setorOrigem = new MComboBox('setorOrigem','','Setor de Origem:',$equivalentes,'','',15);
		$setorOrigem->addAttribute('readonly',true);
		$setorOrigem->addAttribute("onkeyup","toUpperCase('setorDestino')");
		$setorOrigem->addAttribute('style','text-transform:uppercase');

//------

		//$setorOrigem = new MComboBox('setorOrigem',$setorOrigem,'Setor de Origem:',$setoresAcesso,'','',15);
		//$setorOrigem->addAttribute('maxlength','15');
		//$setorOrigem->addAttribute("onkeyup","toUpperCase('setorOrigem')");
		//$setorOrigem->addAttribute('style','text-transform:uppercase');
		//$clearOrigem = ($this->session->IsRegistered('sSetorOrigem')) ? new MButton('limparOrigem','Limpar',"javascript:doLimparOrigem()") : null;

		$groupOrigem = new MBaseGroup('groupOrigem', 'Origem do processo',array($siglaOrigem,$instituicao,$numProcesso,$setorOrigem,$origemExterna,new MSpacer(),$clearOrigem),'horizontal','css');
		$groupOrigem->addAttribute('style','padding:10px');

		//      arquivo do proceso
		//$arquivo = new MTextField('arquivo',$this->session->getValue('sArquivo'),'Caixa Arquivo:',15);
		$arquivo = new MTextField('arquivo','','Caixa Arquivo:',15);
		$arquivo->addAttribute('maxlength','7');

		$clearArquivo = ($this->session->IsRegistered('sArquivo')) ? new MButton('limparArquivo','Limpar',"javascript:doLimparArquivo()") : null;
		$groupArquivo = new MBaseGroup('groupArquivo', 'Arquivo do processo (opcional)',array($arquivo,$clearArquivo),'vertical','css');
		$groupArquivo->addAttribute('style','padding:10px');

		//      saída do processo
		//$setorDestino = new MComboBox('setorDestino',$this->session->getValue('sSetorDestino'),'Setor de Destino:',$this->setor->selAll(),'','',15);
		$setorDestino = new MComboBox('setorDestino','','Setor de Destino:',$this->setor->selAll(),'','',15);
		$setorDestino->addAttribute('readonly',true);
		$setorDestino->addAttribute("onkeyup","toUpperCase('setorDestino')");
		$setorDestino->addAttribute('style','text-transform:uppercase');

		//$decisao = new MMultiLineField('decisao',$this->session->getValue('sDecisao'),'Decisão:',400,5,88);
		$decisao = new MMultiLineField('decisao','','<br>Decisão:',1000,8,69);
		//$autor = new MTextField('autor',$this->session->getValue('sAutor'),'Autor:',40);
		$autor = new MTextField('autor','','Autor:',40);
		
		$autor->addAttribute('maxlength','40');
		//$clearSaida = ($this->session->IsRegistered('sSetorDestino') && $this->session->IsRegistered('sDecisao') && $this->session->IsRegistered('sAutor')) ? new MButton('limparSaida','Limpar',"javascript:doLimparSaida()") : null;
		$clearSaida = new MButton('limparSaida','Limpar',"javascript:doLimparSaida()");		
		$groupSaida = new MBaseGroup('groupSaida', 'Saída do processo (opcional)',array($setorDestino,$destinoExterno,$decisao,$autor,$tornaPublico,$clearSaida),'horizontal','css');
		$groupSaida->addAttribute('style','padding:10px');

		//      fields
		$fields = array(
			new MHiddenField('numProcesso'),
			new MHiddenField('user',$permissao),
			$groupAno,
			array($groupDadosProcesso),
			array($groupOrigem),
			array($groupArquivo),
			array($groupSaida),
		);
		$this->SetFields($fields);

		//      required fields
		$validators = array(
			new MRequiredValidator('titulo'),
			new MRequiredValidator('solicitante'),
			new EMAILValidator('email','','','E-mail inválido'),
			new MRequiredValidator('assunto'),
			new MRequiredValidator('setorOrigem'),
			new MRequiredValidator('autor'),
		);
		$this->setValidators($validators);

		//      buttons
		$buttons = array(
			new MButton('btnSalvar','Abrir'),
		);
		$this->SetButtons($buttons);
	}

	public function btnSalvar_click()
	{
		global $MIOLO, $auth;
		//      data
		$data = $this->getData();
		
		if(Form::getFormValue('origemExterna') != NULL)
		{
			$data->setorOrigem = (substr($data->setorOrigem,0,1) == '*') ? $data->setorOrigem : '*'."$data->setorOrigem";
		}

		if ($data->tipo == 'A')
		{
			$processoClass = $MIOLO->getBusiness('protocolo','processo');
			$id = $data->titulo;
			$tit = $processoClass->getTitulo($id);
			$res = $tit->result;
			$data->titulo = $res[0][0];
		}
		$data->titulo = trim($data->titulo);
        $data->solicitante = trim($data->solicitante);
        $data->assunto = trim($data->assunto);
		
		if (strlen($data->titulo) == 0){
			if ($data->tipo == ""){
				$this->addError('Selecione o tipo do processo.');
			}
			else{
        	 	$this->addError('O campo "Título" deve ser preenchido.');
        	}
            return;
        }
        if (strlen($data->solicitante) == 0){
        	 $this->addError('O campo "Solicitante" deve ser preenchido.');
            return;
        }
        if (strlen($data->assunto) == 0){
        	 $this->addError('O campo "Assunto" deve ser preenchido.');
            return;
        }
		if(strlen(trim($data->decisao)) > 1000)
        {
	        $this->AddError('O campo decisão deve conter, no máximo, 1000 caracteres.');
                return;
        }


		if (!$data->tipo)
		{
			$this->addError('Você deve escolher um tipo de processo.');
			return;
		}
		elseif(!$data->receberEmail)
		{
			$this->addError('Você deve escolher se deseja ou não receber informações sobre o processo por email.');
			return;
		}
		elseif(!$data->publico)
		{
			$this->addError('Você deve escolher se quer tornar o processo público ou não.');
			return;
		}
		elseif(strlen(trim($data->instituicao)) == 0){
			$this->addError('Você deve fornecer o UP da Instituição.');
			return;
		}
		elseif(!is_numeric($data->instituicao)){
			$this->addError('O UP da Instituição deve conter apenas números.');
			return;
		}
		
		$data->dataAbertura = ($data->anoCorrente == date('Y')) ? date("YmdHi") : $data->anoCorrente.'12311200';
		$data->dataSaida = ($data->setorDestino) ? $data->dataAbertura : null;
		$data->dataDespacho = ($data->decisao) ? $data->dataAbertura : null;
		$this->setData($data);
		//      session
		if ($data->anoCorrente) $this->session->SetValue('sAno',$data->anoCorrente);
		$this->session->SetValue('sTipo',$data->tipo);
		$this->session->SetValue('sTitulo',$data->titulo);
		$this->session->SetValue('sSolicitante',$data->solicitante);
		$this->session->SetValue('sEmail',$data->email);
		//$this->session->SetValue('sEmail','');
		$this->session->SetValue('sAssunto',$data->assunto);
		$this->session->SetValue('sPublico',$data->publico);
		
		$this->session->SetValue('sInstituicao',$data->instituicao);

		$this->session->SetValue('sSetorOrigem',$data->setorOrigem);
		$this->session->SetValue('sArquivo',$data->arquivo);
		$this->session->SetValue('sSetorDestino',$data->setorDestino);
		$this->session->SetValue('sDecisao',$data->decisao);
		$this->session->SetValue('sAutor',$data->autor);

		$this->processo->setData($data);
		if (!$numeroProcesso = $this->getFormValue('numProcessoExterno'))
		{
			$this->processo->setNewNumProcesso($data->anoCorrente);
		}
		else
		{
			if (strlen($numeroProcesso) >= 9){
				$numeroProcesso = str_repeat('0',14-strlen($numeroProcesso)).$numeroProcesso;
			}else{
				$this->addError('Número de processo inválido.');
				return;
			}
			$controle = $this->manager->getBusiness('protocolo','controleprotocolo');
			$instituicao = $data->instituicao;
			$serie = substr($numeroProcesso,0,6);
			$ano = substr($numeroProcesso,7,4);
			$codigo = substr($numeroProcesso,12,2);
			//$codigo = (is_int($codigo)) ? $codigo : $controle->getCodigo($ano.$serie,$data->instituicao);
			if (intval($ano.$serie.$codigo) > 0)
			{
				$this->processo->getByNumero($ano.$serie.$codigo);
				if ($this->processo->isPersistent()){
					$this->addError('Numero de processo existente.');
					return;
				}else{
					$this->processo->setData($data);
					$this->processo->numProcesso = $ano.$serie.$codigo;
				}
			}
			else
			{
				$this->addError('Número de processo inválido.');
				return;
			}
		}

		//      set and save
		try
		{
			$login = $auth->GetLogin();
			$objProcesso = $MIOLO->getBusiness('protocolo','processo');
			$this->processo->beginTransaction();
			$andamento = $this->processo->getAndamento(1);
			$andamento->setData($data,$login->idkey);

			$user = $MIOLO->getBusiness('common', 'usuario');
			$result = $user->GetById($login->idkey);		
			//$andamento->autor = $result->nome; 
			$andamento->autor = $data->autor;
			$andamento->status = 'N';
			$andamento->setor = $setorOrig;
			$andamento->dataEntrada = $data->dataAbertura;
			$this->processo->addAndamento($andamento);
			$this->processo->retencao = $this->manager->getBusiness('protocolo','retencao');
			$this->processo->retencao->setData($andamento);
			$objProcesso->iduser = $login->idkey;
			//$objProcesso->save();
			$objProcesso->SaveProcesso($data,$this->processo->numProcesso);
			$msg = "Processo ".$this->processo->numProcessoFormatado()." criado com sucesso.";
			$this->processo->Log(OP_INS,$msg);
			$this->processo->endTransaction();
			if($data->receberEmail == 'S')
                        {
				$objProcesso->numProcesso = $this->processo->numProcesso;
                                $insert = $objProcesso->salvarEmail();
                                if($insert)
                                        $msg .= "A partir de agora, você receberá informações deste processo em seu e-mail.";
                                else
                                        $msg .= "Ocorreu algum problema e você não receberá informações deste processo por e-mail.";
                        }

			$this->manager->Information($msg,$this->manager->GetActionURL('protocolo','main:processos',$this->processo->numProcesso));
		}
		catch(Exception $e) {
			$this->manager->Error($e->getMessage());
		}
	}
}
?>
