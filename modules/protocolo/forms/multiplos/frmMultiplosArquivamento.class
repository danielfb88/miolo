
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?
class frmMultiplosArquivamento extends MFormAjax
{
    protected $processo;
    protected $perms;
    protected $setor;
    protected $setoracesso;
    
    public function __construct()
    {
//      construct
        global $MIOLO;
        $this->processo  = $MIOLO->GetBusiness('protocolo','processo');
        $this->perms = $MIOLO->getPerms();
        $this->setor = $MIOLO->getBusiness('protocolo','setor');
        $this->setoracesso = $MIOLO->getBusiness('protocolo','setoracesso');
        parent::__construct('Arquivamento Múltiplo');
        $this->SetClose($MIOLO->GetActionURL('protocolo','main'));
        $this->eventHandler();
    }    
    public function CreateFields()
    {
//      decisão
        $decisao = new MMultiLineField('decisao',$andamento->decisao,'Decisão:',240,5,88);
        $decisao->addAttribute('maxlength','400');
        $autor = new MTextField('autor',$andamento->autor,'Autor:',90);
        $autor->addAttribute('maxlength','40');
        
        $setorInOp = new MComboBox('setorInOp','','Permitir decisão se o processo estiver no setor abaixo (opcional)<br>Setor:',$this->setor->selAll(),'','',15);
        $setorInOp->addAttribute('maxlength','15');
        $setorInOp->addAttribute("onkeyup","toUpperCase('setorInOp')");
        $setorInOp->addAttribute('style','text-transform:uppercase');
        
        $clearDecisao = new MButton('clearDecisao','Limpar',"toClearDecisao()");
        $clearDecisao->visible = false;
        $groupDecisao = new MBaseGroup('groupDecisao', 'Decisão do processo',array($decisao,$autor,$clearDecisao),'vertical','css');
        $groupDecisao->addAttribute('style','padding:10px');
//Arquivo
        $arquivo = new MTextField('arquivo',$this->processo->arquivo,'Caixa Arquivo',15);
        $arquivo->addAttribute('maxlength','7');
        $groupArquivo = new MBaseGroup('groupArquivo', 'Arquivo do processo',array($arquivo),'horizontal','css');
        $groupArquivo->addAttribute('style','padding:10px');
//      processos afetados
        $numProcesso = new MLookupTextField('numProcesso','','Processo:',22);
        $numProcesso->addAttribute("onkeypress","return setValue(this,event)");
        $numProcesso->module = 'protocolo';
        $numProcesso->item = 'processosaida';
        $numProcesso->event = 'filler';
        $numProcesso->related = 'none,numProcesso';
        $numProcesso->filter = 'setorUsuario,numProcesso';        
        $numProcessos = new MMultiTextField3( 'numProcessos', null, 'Seleção de processos',array($numProcesso), 200, true, 'horizontal' );
        $numProcessos->fieldWidth = 200;       
//      fields        
        $setorUsuario = ($this->perms->checkAccess('PROT_ADMIN', A_ACCESS)) ? '%' : $this->processo->getSetorUsuario();
		$fields = array(
            new MHiddenField('setorUsuario',$setorUsuario),
            array(
                $groupDecisao,
                $groupArquivo,
            ),
            $numProcessos,
        );
        $this->SetFields($fields);
//      required fields
        $validators = array(
			new MRequiredValidator('decisao'),
			new MRequiredValidator('autor'),
			new MRequiredValidator('arquivo'),
        );
        $this->setValidators($validators);
//      buttons
        $buttons = array(
           new MButton('btnExecutar', 'Executar'),
        );
        $this->SetButtons($buttons);
    }
    public function btnExecutar_click()
    {
//      atributte fields
        $this->setFieldAttr('clearDecisao','visible',true);
        $this->setFieldAttr('clearSetor','visible',true);
//      data
        $data = $this->getData();
        $data->autor = trim($data->autor);
        $data->decisao = trim($data->decisao);
        $data->arquivo = trim($data->arquivo);
        $data->status = 'A'; 
        if (strlen($data->decisao) == 0){
        	 $this->addError('O campo "Decisão" deve ser preenchido.');
            return;
        }
        if (strlen($data->autor) == 0){
        	 $this->addError('O campo "Autor" deve ser preenchido.');
            return;
        }
        if (strlen($data->arquivo) == 0){
        	 $this->addError('O campo "Arquivo" deve ser preenchido.');
            return;
        }
        $this->setData($data);
//		Acesso
		$setorUsuario = ($this->perms->checkAccess('PROT_ADMIN', A_ACCESS)) ? '%' : $this->setoracesso->selSetoresAcesso($this->processo->getSetorUsuario());		
//      errors
        if (!$numProcessos = $this->numProcessos->getCodeValue())
        {
            $this->addError('Você deve selecionar pelo menos um processo para realizar a decisão.');
            return;
        }
        foreach ($numProcessos as $key => $numProcesso)
        {
//          get object			
            $numProcesso = $numProcesso[0];
            $numProcesso = str_repeat('0',14-strlen($numProcesso)).$numProcesso;
            $serie = substr($numProcesso,0,6);
            $ano = substr($numProcesso,7,4);
            $codigo = substr($numProcesso,12,2);
            $$numProcesso = $this->manager->getBusiness('protocolo','processo');
            if (!is_numeric($codigo)) $$numProcesso->getByPartNumero($ano.$serie);
            else $$numProcesso->getByNumero($ano.$serie.$codigo);
//          errors			
            if (!$$numProcesso->isPersistent())
            {
                $mensagem[] = array($numProcesso,'Número de processo inválido.');
                continue;
            }
            if (!(in_array($$numProcesso->retencao->setor,$setorUsuario)) && !$this->perms->checkAccess('PROT_ADMIN', A_ACCESS))
            {
                $mensagem[] = array($numProcesso,'O processo não está disponível para este setor.');
                continue;
            }            
            if ($$numProcesso->retencao->setor == $data->setorInOp && !$this->perms->checkAccess('PROT_ADMIN', A_ACCESS) && !$data->setorInOp)
            {
                $mensagem[] = array($numProcesso,'O setor atual do processo é diferente do setor assinalado.');
                continue;
            }
            switch ($$numProcesso->retencao->status)
            {
                case 'J':
                    $mensagem[] = array($numProcesso,'O processo encontra-se anexado.');
                break;
                case 'A':
                    $mensagem[] = array($numProcesso,'O processo encontra-se arquivado.');
                break;
                case 'N':
                    $decisao[] = $numProcesso;
                    $mensagem[] = array($numProcesso,'Arquivamento realizado com sucesso.');
                    unset($numProcessos[$key]);
                break;
            }
        }
//      set and save
		
        if (is_array($decisao))
        {
            $transaction = $$decisao[0];
            $transaction->beginTransaction();
            foreach ($decisao as $numProcesso)
            {
                         	
            	$$numProcesso->setTransaction($transaction->getTransaction());
            	$andamento = $$numProcesso->getAndamento($$numProcesso->retencao->numAndamento);
            	$numanda = count($$numProcesso->andamento);            	
            	if (!($$numProcesso->andamento[$numanda]->decisao))
                {
                	$andamento->decisao = $data->decisao;                	
                } 
                else 
                {
  	              	$andamento->decisao = $$numProcesso->andamento[$numanda]->decisao.' - '.$data->decisao;
  	              	
                }            	
            	$andamento->autor = $data->autor;
                $andamento->dataDespacho = date("YmdHi");
                $andamento->status = $data->status; 
                $$numProcesso->arquivo = $data->arquivo;    	 	
                $$numProcesso->addAndamento($andamento);
                $$numProcesso->retencao->setData($andamento);
                unset($andamento);
                try 
                {
                    
                	$$numProcesso->save();
                    $msg = 'O processo '.$$numProcesso->numProcessoFormatado().' foi arquivado com sucesso.';
                    $$numProcesso->Log(OP_UPD,$msg);
                    
                }
                catch(Exception $e) {$this->addError($e->getMessage());}
            }
            $transaction->endTransaction();
            
            $this->numProcessos->setCodeValue($numProcessos);
        }

        //      message
        $titulos = array('Número','Resultado da ação&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;');
        $dadosVerificados = new MTableRaw('',$mensagem,$titulos);
        $dadosVerificados->setWidth('300px');
        $groupDadosVerificados = new MBaseGroup( 'groupDadosVerificados', 'Mensagens',array($dadosVerificados),'horizontal','css');
        $groupDadosVerificados->addAttribute('style','padding:10px');
        $this->addField($groupDadosVerificados);
    }
                 
                
}
?>
