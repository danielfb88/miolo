
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?php
class BusinessProtocoloSetor extends MBusiness
{
    var $idSetor;
    var $sigla;
    var $dataInicio;
    var $dataFim;
    var $nome;
    var $tipo;
    var $fone;
    var $fax;
   	var $obs;
    var $paiRelat;
    var $localizacao;
    function __construct($data=NULL)
    {
        parent::__construct('common',$data);
    }
    function OnCreate($idSetor)
    {
        if ($idSetor) $this->GetById($idSetor);
    }
    function GetById($id)
    {
       $this->idSetor = $id;
       $this->retrieve();
       return $this;
    }
    function getBySigla($sigla)
    {
        $criteria =  $this->getCriteria();
        $criteria->addColumnAttribute('idSetor');
        $criteria->addCriteria('sigla','=',"'$sigla'");
        $this->getById($criteria->retrieveAsQuery()->result[0][0]);
    }
	function listAll()
    {
        $criteria =  $this->getCriteria();
        $criteria->addCriteria('dataFim','is', "null");
        $criteria->addOrderAttribute('sigla');
        return $criteria->retrieveAsQuery();
    }
	function selAll()
    {
        $setores = $this->listAll()->chunkResult();
        return array_combine($setores,$setores);
    }
    function novoAcesso($setorFilho)
    {
        global $MIOLO;
        $acesso = $MIOLO->getBusiness('protocolo','setoracesso');
        $acesso->setor = $this->sigla;
        $acesso->setorFilho = $setorFilho;
        try 
        {
            $acesso->save();
        }
        catch(Exception $e) {$this->addError($e->getMessage());}
    }

	function ListBySigla($sigla)
    {
        $sigla = strtoupper($sigla);
        $criteria =  $this->getCriteria();
        $criteria->AddColumnAttribute('idSetor');
        $criteria->AddColumnAttribute('nome');
        $criteria->addCriteria('sigla','LIKE', "'$sigla%'");
        $criteria->addOrderAttribute('sigla');
        return $criteria->retrieveAsQuery();
    }

    function getAcesso()
    {
        $this->retrieveAssociation('filhos');
    }

    function getSetorAcesso($id)
    {
        if ( $this->filhos )
        {
            foreach ( $this->filhos as $f )
            {
                if ( $f->setorFilho == $id )
                {
                    return $f;
                }
            }
        }
        return $NULL;
    }

    function deleteAcesso($id)
    {
        $acesso = $this->getSetorAcesso($id);
        $acesso->delete();
    }

    function getSetoresPais()
    {
        $criteria =  $this->getCriteria();
		$criteria->addColumnAttribute('paiRelat');
        $criteria->addGroupAttribute('paiRelat');
        return $criteria->retrieveAsQuery()->result;
    }
}
?>
