
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?
class BusinessProtocoloControleProtocolo extends Business
{
    public $ano;
    public $ultimoNumProcesso;
    public $ultimoNumProtocolado;
    public $instituicao;
    function __construct($data=NULL)
    {
        
        $this->Business('sigaept',$data);
        
    }
   
    //IFSP
    function getByAno($ano,$instituicao)
    {
        
        $this->ano = $ano;
        //IFSP
        $this->uasg = $instituicao;
        $this->retrieve();
    }
     //IFSP
    function addControle($ano,$instituicao)
    {
        
        $this->ano = $ano;
        //IFSP
        $this->uasg = $instituicao; 
        $this->ultimoNumProcesso = 0;
        $this->ultimoNumProtocolado = 500000;
        $this->save();
    }
    function getNewNumProcesso($tipo)
    {
        switch ($tipo)
        {
            case 'P':
                $this->ultimoNumProcesso++;
                $serie = $this->ultimoNumProcesso;
            break;
            case 'A':
                $this->ultimoNumProtocolado++;
                $serie = $this->ultimoNumProtocolado;
            break;
        }
        // retorna o número de processo
        $serie = str_repeat('0',6-strlen($serie)).$serie;
        $codigo = $this->getCodigo($this->ano.$serie,$instituicao);
        return $this->ano.$serie.$codigo;
    }
    function getCodigo($serie)
    {
        $d1 = (11 - ($serie[1] * 4 + $serie[0] * 5 + 
        $serie[3] * 2 + $serie[2] * 3 + 
        $serie[9] * 6 + $serie[8] * 7 + 
        $serie[7] * 8 + $serie[6] * 9 + 
        $serie[5] * 10 + $serie[4] * 11 + 
      	// Alterado pelo IFSP
      	($this->uasg % 10) * 12 + 
        ($this->div($this->uasg,10) % 10) * 13 + 
        ($this->div($this->uasg,100) % 10) * 14 + 
        ($this->div($this->uasg,1000) % 10) * 15 + 
        ($this->div($this->uasg,10000) % 10) * 16) % 11) % 10;
      
       /* ($instituicao % 10) * 12 + 
        ($this->div($instituicao,10) % 10) * 13 + 
        ($this->div($instituicao,100) % 10) * 14 + 
        ($this->div($instituicao,1000) % 10) * 15 + 
        ($this->div($instituicao,10000) % 10) * 16) % 11) % 10;*/
        $d2 = (11 - ($d1 * 2 + 
        $serie[3] * 3 + $serie[2] * 4 + 
        $serie[1] * 5 + $serie[0] * 6 + 
        $serie[9] * 7 + $serie[8] * 8 + 
        $serie[7] * 9 + $serie[6] * 10 + 
        $serie[5] * 11 + $serie[4] * 12 + 
       	($this->uasg % 10) * 13 + 
        //Alterado pelo IFSP.
        ($this->div($this->uasg,10) % 10) * 14 + 
        ($this->div($this->uasg,100) % 10) * 15 + 
        ($this->div($this->uasg,1000) % 10) * 16 + 
        ($this->div($this->uasg,10000) % 10) * 17) % 11) % 10;
        /*($instituicao % 10) * 13 + 
        ($this->div($instituicao,10) % 10) * 14 + 
        ($this->div($instituicao,100) % 10) * 15 + 
        ($this->div($instituicao,1000) % 10) * 16 + 
        ($this->div($instituicao,10000) % 10) * 17) % 11) % 10;*/
        return $d1.$d2;
    }
    
    function div($dividendo,$divisor)
    {
        $quociente = $dividendo / $divisor;
        return (int)$quociente;
    }

	
}
?>
