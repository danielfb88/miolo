
<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
?>

<?
class BusinessProtocoloSoundex extends MBusiness
{
	public $numProcesso;
	public $som;

    function __construct($data=NULL)
    {
       parent::__construct('sigaept',$data);
    }
    function PalProibida($palavra)
    {
        $palavra = strtoupper($palavra);    	
    	if (($palavra == 'COM' ) || ($palavra == 'QUE' ) || ($palavra == 'FOI' ) || ($palavra == 'NAO' ) || ($palavra == 'POR' ) || ($palavra == 'PARA' ) )
    	{
    		return true;	
    	}
        else
        return false;
    }
    function Majus($ch)
    {
    	$ch = strtoupper($ch);
    	
    	switch($ch)
    	{
    		case 'Á':
    		case 'À': 
    		case 'Â':
    		case 'Ã': 
    				$ch = 'A'; 
    				break;    			    		   				  		
    		case 'É':
    		case 'Ê': 
    				$ch = 'E'; 
    				break; 
    		case 'Í': 
    			$ch = 'I';
    			break;  
    		case 'Ó':
    		case 'Ô':
    		case 'Õ':
    				$ch = 'O'; 
    				break; 
    		case 'Ú':
    				$ch = 'U'; 
    				break; 
    		case 'Ç':
    				$ch = 'C'; 
    				break;    		
    	}
    	return $ch;
    }
    function Soundex($st)
    {
    	
    	$fora = 'AEIOUYH1234567890~!@#$%^&*()-_=+\|[{]};:<,>./?';
    	$st2= '';
    	for ($i=0;$i<strlen($st);$i++)
    	{
    		$st2 = $st2 . $this->Majus($st[$i]);
    	}
    	$st ='';
    	for ($i=0;$i<strlen($st2);$i++)
    	{    
    		if (stripos($fora,$st2[$i])===FALSE)
    		{
    			$st = $st . $st2[$i];
       		} 
    	}
    	if ($st != '')
    	{
    			$st2 = '';
    			for ($j=0;$j<strlen($st);$j++)
    			{
    				switch ($st[$j])
    				{
    					case 'B':
    					case 'P':
    							$st2 = $st2 . '1';
    							break;
    					case 'C':
    					case 'K':
    					case 'Q':
    							$st2 = $st2 . '2';
    							break;
    					case 'D':
    					case 'T':
    							$st2 = $st2 . '3';
    							break;
    					case 'L':
    							$st2 = $st2 . '4';
    							break;
    					case 'M':
    					case 'N':
    							$st2 = $st2 . '5';
    							break;
    					case 'R':
    							$st2 = $st2 . '6';
    							break;
    					case 'G':
    					case 'J':
    							$st2 = $st2 . '7';
    							break;
    					case 'S':
    					case 'X':
    					case 'Z':
    							$st2 = $st2 . '8';
    							break;
    					case 'F':
    					case 'V':
    					case 'W':
    							$st2 = $st2 . '9';
    							break;
    					default :
    							$st2 = $st2 . '0';
    							break;
    				}
    				
    			}      			
				$st = $st2[0];
				
				for ($k=1;$k<strlen($st2);$k++)
				{
					
					if ( $st2[$k] != $st[(strlen($st))-1] )
					{
						($st = $st . $st2[$k]);						
					}
					
				}				
				
	    		if (strlen($st) < 4 ) 
	    		{
	    			for ($i=strlen($st);$i<4;$i++) $st = $st . '0';
	    		}
	    		if (strlen($st) > 4 ) $st = substr($st,0,4); 	    		
	    		return $st;
    	}
    	else 
    	{
    		
    		$st = $st2[0] . '000';    		
    		return $st;
    	}
    	
    }
    function GetNumPro($fonetica)
    {
		$criteria = $this->getCriteria();
    	$criteria->addColumnAttribute('numpro');
    	foreach ($fonetica as $registro )
    	{
    		$criteria->addORCriteria('som','=',"'$registro'");
    	}
    	$criteria->addGroupAttribute('numProcesso');    	
        $criteria->addOrderAttribute('numProcesso',true);
        $numpro = $criteria->retrieveAsQuery();
        return $numpro->result;
    }
    function listNumProcessos($numProcesso)
    {
        $criteria = $this->getCriteria();
        $criteria->addColumnAttribute('numpro');        
    }

    function setSom($char)
    {
        $this->som = $this->Soundex($char);
    }
}
?>
