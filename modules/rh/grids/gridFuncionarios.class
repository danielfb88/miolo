<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
/**
 * Grid Funcionarios
 * Grid de uso geral para selecionar funcionários
 * @package br.org.miolo.ufjf.rh.grids
 */

MIOLO::Import('modules::rh::controls::linkvinculo');
MIOLO::Import('modules::rh::controls::linkfuncionario');

class gridFuncionarios extends MDataGrid2
{
	function gridFuncionarios()
	{   
        	global $MIOLO,$self;
	        
	        $this->SetFilter(false);
	        $filterNome = Form::GetFormValue('nome');
        	$filterMatricula = Form::GetFormValue('matricula');
		if(is_numeric($filterMatricula) || (!$filterMatricula))
		{
		        $nome = Util::NVL($filterNome, '%');
		        $this->AddFilterText('nome','Nome',$nome);
		        $this->AddFilterText('matricula','Matricula',$filterMatricula);
		        $this->SetIndex(1);
		        $objFuncionario = $MIOLO->GetBusiness('rh','funcionario');		
	
		        if ( ($MIOLO->getPerms()->isMemberOf('','RH_SECRETARIA')) && (!$MIOLO->getPerms()->isMemberOf('','ADMIN')) && (!$MIOLO->getPerms()->isMemberOf('','RH_GESTOR')) )
	        	{        
			        $login = $MIOLO->getLogin();
			          
		        	//var_dump($login->id);
		            
			        $usuario = $MIOLO->getBusiness('common','usuario');
		        	$usuario->getByLogin($login->id);
		            
			        //var_dump($usuario->nome, $usuario->idPessoa ,$usuario->idSetor);
		            
		        	$pessoa = $MIOLO->GetBusiness('common','pessoa',$usuario->idPessoa);
		            
		            	$funcionario = $MIOLO->GetBusiness('rh','funcionario');
				if ($funcionario->isFuncionario($pessoa->idpessoa))
		        	{
		            		$funcionario->GetFuncionarioByPessoa($pessoa->idpessoa);
			            	$vinculoAtivo = $funcionario->GetVinculoAtivo();
			            	$provimentoAtual = $vinculoAtivo->GetProvimentoAtual();
			            	$usuario->idSetor = $provimentoAtual->idSetor;
				}
	            
			        //var_dump($usuario->idSetor);
	            
	            		// com o usuario, pegar a pessoa
		      		// com a pessoa, pegar o funcionario (servidor)
			        // com o servidor, pegar o vinculo
			       // com o vinculo pegar o ultimo provimento
          
        	    		$setor = $MIOLO->getBusiness('common','setor',$usuario->idSetor);
            
        			//var_dump($setor->sigla, $setor->nome);
            
        			$setorPai = $MIOLO->getBusiness('common','setor');
				$setorPai->getById($setor->idPaiSetor);
            
				//var_dump($setor->idPaiSetor, $setorPai->idSetor, $setorPai->nome);
            
				$idSetorPai = ( $setorPai->idPaiSetor == 0 ) ? $setor->idSetor : $setorPai->idSetor;
            			$idSetores = $setor->getSetoresFilhos($idSetorPai);

			        //var_dump($idSetores);
            
		        }

			//var_dump($idSetores);
			//$idSetores = null;
		        $query = $objFuncionario->ListByNomeOrMatriculaSituacao(strtoupper("'%$nome%'"), $filterMatricula, $idSetores);
			if ( $query->eof() )
		        {
	        		/*
		        	$query = $objFuncionario->listByNome(strtoupper("'$nome%'"));
			            if ( ! $query->eof() )
		            	{
			                $linkFuncionario = new LinkFuncionario('linkFuncionario','%0%');
		                $column = new MDataGridControl($linkFuncionario,'idFuncionario','Id. Única','right',true,'10%');
		        		    }
				            else
		            {
		                $column = new MDataGridControl(new MLabel(),'vinculo','Matrícula','right',true,'10%');
		            }
			            */
            
        		}
		        else
		        {
				$linkVinculo = new LinkVinculo('linkVinculo','%1%');
				$column = new MDataGridControl($linkVinculo,'vinculo','Matrícula','right',true,'10%');
	
		        }
	        
		        $columns = array(
		            //new MDataGridColumn('idfuncionario','Número','right', true,'0%', false),
		            //new MDataGridControl($linkVinculo,'vinculo','Matrícula','right',true,'10%'),
		            $column,
		            new MDataGridColumn('nome','Nome','left', true,'55%'),
		            new MDataGridColumn('descricao','Situação','left', true,'20%'),
		            new MDataGridColumn('ultimoprov','Exclusão','center',true,'15%')
			        );
	        
			$href_grid = $MIOLO->GetActionURL('rh',$self);        
        		parent::__construct($query, $columns, $href_grid, 25);
        		$this->setRowMethod( 'gridFuncionarios', 'MyRowMethod' );
		}
		else
		{
			$MIOLO->Error("Favor, digitar os números da matrícula do servidor corretamente.");
		}
    }

    function GenerateFooter()
    {
        if (!$this->data) 
           $footer[] = $this->GenerateEmptyMsg();
        return $footer;
    }
    
    public function myRowMethod( $i, $row, $actions, $columns )
    {
        global $MIOLO;
        
        $idVinculo = $row[1];
        $vinculo = $MIOLO->getBusiness('rh','vinculo',$idVinculo);
        $provimento = $vinculo->getUltimoProvimento();
        $provimento->retrieveAssociation('situacaofuncional');
        $columns['descricao']->control[$i]->setValue($provimento->situacaofuncional->descricao);
        $columns['ultimoprov']->control[$i]->setValue($provimento->dataFim);
    }
}
?>
