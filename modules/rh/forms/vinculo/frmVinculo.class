<?PHP
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

MIOLO::Import('modules::rh::forms::funcionario::frmFuncionario');
class frmVinculo extends frmFuncionario
{
    
	protected $vinculo;

	
	/**
     * Construtor
     */
    function __construct($objVinculo)
    {
        global $MIOLO;
        $this->vinculo = $objVinculo;
        $this->funcionario = $MIOLO->GetBusiness('rh','funcionario',$this->vinculo->idFuncionario);
        parent::__construct($this->funcionario);
        $this->SetClose($MIOLO->GetActionURL('rh','main:funcionario:find'));
        $this->SetIcon($MIOLO->GetUi()->GetImage('rh','servidor_mini.png'));
    }
    

    function CreateFields()
    {
        global $MIOLO, $page, $module, $context, $action, $history;

        $vinculo = $this->vinculo;
        Util::SetIfNull($this->oid, $vinculo->idVinculo);
        parent::CreateFields();
        $ui = $MIOLO->GetUI();
        $form = Form::GetFormValue('form');
      
        $action = $context->action;
        $this->_panel[1] = $panel = new ActionPanel('pnlCompound','Vínculo: ' . $vinculo->idVinculo,'',false);
        $panel->SetIconType('small');

        //$panel->AddUserAction('rh_vinculo_dados',A_EXECUTE,'Editar',
        //    $ui->GetImage('rh','edit.png'),'rh',$action, $this->oid, array("form"=>"dados"));

        $panel->AddUserAction('rh_info',A_EXECUTE,'Dados Funcionais',
            $ui->GetImage('rh','dadosfuncionais_mini.png'),'rh',$action, $this->oid, array("form"=>"dadosFuncionais"));

        $panel->AddUserAction('rh_info',A_EXECUTE,'Provimentos',
            $ui->GetImage('rh','provimentos_mini.png'),'rh',$action, $this->oid, array("form"=>"provimentos"));

        // $panel->AddUserAction('rh_vinculo_ocupacaovaga',A_EXECUTE,'Ocupação de Vagas',
        // $ui->GetImage('rh','ocupacaovaga.png'),'rh',$action, $this->oid, array("form"=>"ocupacaovaga"));

        $panel->AddUserAction('rh_info',A_EXECUTE,'Férias',
            $ui->GetImage('rh','ferias_mini.png'),'rh',$action, $this->oid, array("form"=>"periodoaquisitivo"));

        $panel->AddUserAction('rh_info',A_EXECUTE,'Licenças / Afastamentos',
            $ui->GetImage('rh','licenca_mini.png'),'rh',$action, $this->oid, array("form"=>"licAfast"));


        //********************************************************************************************************
        //se tiver em intrrupção de férias liberar este link
        //$panel->AddUserAction('rh_vinculo_interrupcao',A_EXECUTE,'Interrupção de Férias',
        //$ui->GetImage('rh','default.png'),'rh',$action, $this->oid, array("form"=>"interrupcao"));

        //$this->vinculo->getProvimentos();
        //$provimento = $this->vinculo->getProvimentoAtual();
        //$provimento->GetDados();        

        //if ( $provimento->idSituacao == '2' ) 
        {
            $panel->AddUserAction('rh_averbacao',A_EXECUTE,'Averbações T.S.',
                $ui->GetImage('rh','averbacao_mini.png'),'rh',$action, $this->oid, array("form"=>"averbacao"));
        }

        $panel->AddUserAction('rh_aposentadoria',A_EXECUTE,'Aposentadoria',
            $ui->GetImage('rh','aposentadoria_mini.png'),'rh',$action, $this->oid, array("form"=>"aposentadoria"));

        $panel->AddUserAction('rh_info',A_EXECUTE,'Adicionais',
            $ui->GetImage('rh','adicional_mini.png'),'rh',$action, $this->oid, array("form"=>"adicional"));

        $panel->AddUserAction('rh_info',A_EXECUTE,'Exercício em outros órgãos',
            $ui->GetImage('rh','externo_mini.png'),'rh',$action, $this->oid, array("form"=>"cessao"));
    
         $panel->AddUserAction('rh_exclusao_servidor',A_EXECUTE,'Exclusão',
            $ui->GetImage('rh','exclusao_mini.png'),'rh',$action, $this->oid, array("form"=>"exclusao"));
    
        if ( $this->vinculo->permiteMudancaJornada() ) 
        {
            $panel->AddUserAction('rh_jornada',A_EXECUTE,'Jornada',
            $ui->GetImage('rh','jornada_mini.png'),'rh',$action, $this->oid, array("form"=>"jornada"));
        }


         $panel->AddUserAction('rh_remocao',A_EXECUTE,'Remoção',
            $ui->GetImage('rh','remocao_mini.png'),'rh',$action, $this->oid, array("form"=>"remocao"));

        if ($vinculo->isAtivo())
        {
            $panel->AddUserAction('rh_progressao',A_EXECUTE,'Progressão Funcional',
            $ui->GetImage('rh','progressao_mini.png'),'rh',$action, $this->oid, array("form"=>"progressao"));
        }

        if ($vinculo->isTA())
        {
          $panel->AddUserAction('rh_incentivo',A_EXECUTE,'Incentivo à qualificação',
          $ui->GetImage('rh','meusdados_mini.png'),'rh',$action, $this->oid, array("form"=>"incentivo"));
        }

        if ( $this->vinculo->contratoTemporario() )
        {
         $panel->AddUserAction('rh_info',A_EXECUTE,'Contrato',
            $ui->GetImage('rh','temporario_mini.png'),'rh',$action, $this->oid, array("form"=>"contrato"));
        }
         /*$panel->AddUserAction('rh_media',A_EXECUTE,'Média',
            $ui->GetImage('rh','media2_mini.png'),'rh',$action, $this->oid, array("form"=>"media"));            */

         $panel->AddUserAction('rh_atividade',A_EXECUTE,'Atividades',
            $ui->GetImage('rh','remocao_mini.png'),'rh',$action, $this->oid, array("form"=>"atividade"));
            

          $panel->AddUserAction('rh_historicos',A_EXECUTE,'Histórico',
            $ui->GetImage('rh','historico_mini.png'),'rh',$action, $this->oid, array("form"=>"historicos"));

        $provimento = $this->vinculo->getProvimentoAtual();
        if ( ($provimento->idGrupoCargo <> '60')
        and  ($provimento->idSituacao == 1 or
              $provimento->idSituacao == 8 or
              $provimento->idSituacao == 9 or
              $provimento->idSituacao == 11    ) )      //ambiente organizacional: somente Técnico-Administrativo
        {
            $panel->AddUserAction('rh_ambiente',A_EXECUTE,'Ambiente Organizacional',
                                  $ui->GetImage('rh','geral_mini.png'),'rh',$action, $this->oid, array("form"=>"ambiente"));
        }

        //$objocupacaofuncao = $MIOLO->GetBusiness($module,'ocupacaofuncao',$item);
        //$ocupacao = $objocupacaofuncao->ultimaOcupacaoporidVinculo($vinculo->idVinculo);
        //if (($ocupacao) or Marquinho)
        //{
            $panel->AddUserAction('rh_info',A_EXECUTE,'Ocupação de Função',
                                  $ui->GetImage('rh','decisao_mini.png'),'rh',$action, $this->oid, array("form"=>"funcao"));
        //}

        switch ($form)
        {
            case 'dados' : 
                 $vinculo->GetById($vinculo->idVinculo,false);
                 $this->_form[0] = $ui->GetForm($module,'frmVinculoDados', $vinculo,'vinculo'); 
                 break;

            case 'funcao' :
                 array_unshift($this->_form, $ui->GetGrid($module,'gridOcupacaopeloServidor',$vinculo->idVinculo,'funcao'));
                 break;

            case 'ocupacaofuncaoincluir' :
/*
     Aqui neste caso, ou no frmOcupacaoFuncaoIncluir, ou GENERICAMENTE
     neste frmVinculo [tvz em vinculo\main.inc, mas falta idvinculo], deveria ter a verificacao seVinculosobSetorLogin.

     Atualmente está em ocupacaofuncao.inc e em gridOcupacaopeloServidor.

     No futuro estaria em ocupacaofuncao.inc e em frmVinculo (no gridOcupacaopeloServidor não precisa).

     Testar com usuário 1148292  (APARECIDA)
         e url http://miolo.ufjf.br:8540/index.php?module=rh&amp;action=main:vinculo&amp;item=1148030&form=ocupacaofuncaoincluir
               http://miolo.ufjf.br:8540/index.php?module=rh&amp;action=main:vinculo&amp;item=2165046&form=ocupacaofuncaoincluir
*/
                 $this->_form[] = $ui->GetForm('rh','frmOcupacaoFuncaoIncluir',$this->vinculo->idVinculo,'funcao');
                 break;

            case 'licAfast' :
                 $vinculo->GetLicAfasts();
                 if ( ($id = Form::GetFormValue('id')) != NULL )
                 {
                    $licAfast = $vinculo->GetLicAfast($id);
                    if ($licAfast != NULL)
                    {
                        $this->_form[] = $ui->GetForm($module,'frmVinculoLicAfast',$licAfast,'vinculo');
                        $page->SetAction($history->Top('action'));
                    }
                }
                 array_unshift($this->_form, $ui->GetGrid($module,'gridLicAfast', $vinculo)); 
                 break;

            case 'ocupacaovaga' :
                $vinculo->getOcupacaoVagas();
                if ( ($id = Form::GetFormValue('id')) != NULL )
                {
                    $ocupacaovaga = $vinculo->getOcupacaoVaga($id);
                    if ($ocupacaovaga != NULL)
                    {
                        $this->_form[] = $ui->GetForm($module,'frmVinculoOcupacaoVaga',$ocupacaovaga,'vinculo');
                        $page->SetAction($history->Top('action'));
                    }
                 }
                 array_unshift($this->_form, $ui->GetGrid($module,'gridOcupacaoVaga', $vinculo));
                 break;

            
            case 'periodoaquisitivo' :
                $vinculo->getPeriodosAquisitivos();
                if ( ($id = Form::GetFormValue('id')) != NULL )
                {   
                    if ( (Form::GetFormValue('id')) != "new" ) 
                    {
                        $periodoaquisitivo = $vinculo->getPeriodoAquisitivo($id);
                        $data = explode("/", $periodoaquisitivo->getDataInicio());
                        $action = $context->action;

                        $periodoAqFerias = $vinculo->getPeriodoAquisitivo($id);
                        array_unshift($this->_form, $ui->GetGrid('rh','gridFerias', $periodoAqFerias));
                        $page->SetAction($history->Top('action'));
                        
                        if ( (Form::GetFormValue('exec')) == "editarperiodo" )
                        {
                            $periodoaquisitivo = $vinculo->getPeriodoAquisitivo($id);
                            if ($periodoaquisitivo != NULL)
                            {
                                $this->_form[] = $ui->GetForm($module,'frmVinculoPeriodoAquisitivo',$periodoaquisitivo,'vinculo');
                                $page->SetAction($history->Top('action'));
                            }
                        }
                    }
                    else
                    {
                        $periodoaquisitivo = $vinculo->getPeriodoAquisitivo($id);
                        if ($periodoaquisitivo != NULL)
                        {
                            $this->_form[] = $ui->GetForm($module,'frmVinculoPeriodoAquisitivo',$periodoaquisitivo,'vinculo');
                            $page->SetAction($history->Top('action'));
                        }
                    }
                }
                else    
                {
                array_unshift($this->_form, $ui->GetGrid($module,'gridPeriodoAquisitivo', $vinculo));
                }
            break;

            case 'ferias' :
            $vinculo->getPeriodosAquisitivos();
            if ( ($id = Form::GetFormValue('dtInicioPerAq')) != NULL )
                {
    
                    $periodoaquisitivo = $vinculo->getPeriodoAquisitivo($id);
                    $data = explode("/", $periodoaquisitivo->dataInicio);
                    $action = $context->action;
    
                    if ( !(Form::GetFormValue('exec')) == "formularioferias" )
                    {
                        $periodoAqFerias = $vinculo->getPeriodoAquisitivo($id);
                        array_unshift($this->_form, $ui->GetGrid('rh','gridFerias', $periodoAqFerias));
                        $page->SetAction($history->Top('action'));
                    }

                    if ( (Form::GetFormValue('exec')) == "formularioferias" )
                    {
                        $periodoaquisitivo = $vinculo->getPeriodoAquisitivo($id);
                        $dtInicioFerias = Form::GetFormValue('dtInicioFerias');
                        $ferias = $periodoaquisitivo->getThisFerias($dtInicioFerias);
    
                        if ($ferias != NULL)
                        {
                            array_unshift($this->_form,$ui->GetForm('rh','frmVinculoLancarFerias',$ferias,'vinculo'));
                            $page->SetAction($history->Top('action'));
                        }
                    }
    
                    if ( (Form::GetFormValue('exec')) == "gridferias" )
                    {
                        $periodoAqFerias = $vinculo->getPeriodoAquisitivo($id);
                        array_unshift($this->_form, $ui->GetGrid('rh','gridFerias', $periodoAqFerias));
                        $page->SetAction($history->Top('action'));
                    }
    
            }
            break;

            case 'provimentos' :
                 $this->_form[0] = $ui->GetGrid('rh','gridProvimentos', $vinculo); 
                 if (($dataInicio = Form::GetFormValue('data')) != NULL)
                 {
                     $provimento = $vinculo->getProvimento($dataInicio);
                     $this->_form[1] = $ui->GetForm($module,'frmVinculoProvimento', $provimento,'vinculo'); 
                     $page->SetAction($history->Top('action'));
                 }
                 break;

            case 'exclusao' :
                 $vinculo->GetById($vinculo->idVinculo,false);
                 $ultprov = $vinculo->getUltimoProvimento();
                 if (!$ultprov->dataFim) //verifica a data fim nesse caso porque a função isAtivo que era usada anteriormente não funciona para aposentados
                 {
                    $this->_form[0] = $ui->GetForm($module,'frmVinculoExclusao', $vinculo,'vinculo');
                 }  
                 else
                 {                
                 $go = $this->manager->getActionURL('rh','main:vinculo',$this->vinculo->idVinculo);
                 $MIOLO->Error("Servidor já excluído",$go);
                 }
                 break;

            case 'aposentadoria' : 
                 $this->_form[1] = $ui->GetForm('rh','frmVinculoAposentadoria', $vinculo,'vinculo'); 
                 $page->SetAction($history->Top('action'));
                 break;

            case 'averbacao'     : 
                $vinculo->getAverbacoes();
                if ( $vinculo->permiteAverbacao() )
                {
                    if ( ($id = Form::GetFormValue('id')) != NULL )
                    {
                        if ( $id == 'new' )
                        {
                            $this->_form[0] = $ui->GetForm('rh','frmAverbacaoNew',$vinculo,'vinculo/averbacao');
                        }
                        else
                        {
                            $averbacao = $vinculo->getAverbacao($id);
                            if ($averbacao != NULL)
                            {
                                $this->_form[0] = $ui->GetForm('rh','frmAverbacao',$averbacao,'vinculo/averbacao');
                                array_unshift($this->_form, $ui->getgrid('rh','gridAverbacao', $vinculo)); 
                            }
                        }
                     }
                     else
                     {
                        $this->_form[0] = $ui->GetGrid('rh','gridAverbacao', $vinculo);
                    }
                }
                else
                {
                    $this->addError("Situação funcional do servidor é incompatível com averbação de tempo de serviço.");
                }
                 break;
                 
            case 'adicional' :
                 $vinculo->GetAdicionais();
                 if ( ($id = Form::GetFormValue('id')) != NULL )
                 {
                    $adicional = $vinculo->GetAdicional($id);
                    if ($adicional != NULL)
                    {
                        $this->_form[] = $ui->GetForm('rh','frmVinculoAdicional',array($adicional,$vinculo),'vinculo');
                    }
                 }
                 array_unshift($this->_form, $ui->getgrid('rh','gridAdicional', $vinculo)); 
                 break;
                 
            case 'cessao' :
                     $vinculo->GetCessoes();
                     if ( ($id = Form::GetFormValue('id')) != NULL )
                     {
                        $cessao = $vinculo->GetCessao($id);
                        if ($cessao != NULL)
                        {
                            $this->_form[] = $ui->GetForm('rh','frmVinculoCessao',array($cessao,$vinculo),'vinculo');
                        }
                     }
                     array_unshift($this->_form, $ui->GetGrid($module,'gridCessao', $vinculo));
                 break;

            case 'dadosFuncionais' :
                    $this->_form[] = $ui->GetForm('rh','frmVinculoDadosFuncionais',$vinculo,'vinculo');
                 break;
                 
            case 'jornada' :
                    $this->_form[] = $ui->GetForm('rh','frmVinculoJornada',$vinculo,'vinculo');
                 break;

            case 'mudancaCargo' :
                    $this->_form[] = $ui->GetForm('rh','frmVinculoMudancaCargo',$vinculo,'vinculo');
                 break;
	    case 'editVinculo' :
                    $this->_form[] = $ui->GetForm('rh','frmVinculoEditDadosVinculo',$vinculo,'vinculo');
		 break;

            case 'remocao' :
                    $this->_form[] = $ui->GetForm('rh','frmVinculoRemocao',$vinculo,'vinculo');
                 break;

            case 'progressao' :
                    try
                    {//var_dump($vinculo);die();
                        $vinculo->progressaoAutomatica();
                        $this->_panel[2] = new ActionPanel('pnlCompound','Progressão Funcional','',false);
                        $this->_panel[2]->SetIconType('small');

                        /*
						if ( $vinculo->isDocenteEfetivo() )
                        {
                            $this->_panel[2]->AddUserAction('rh_progressao',A_EXECUTE,'Por Interstício',
                            $ui->GetImage('rh','intersticio_mini.png'),'rh',$action, $this->oid, array("form"=>"progressaoIntersticio"));
       
                        } 
						else 
						{
                        	 $this->_panel[2]->AddUserAction('rh_progressao',A_EXECUTE,'Por capacitação profissional', $ui->GetImage('rh','capacitacao_mini.png'),'rh',$action, $this->oid, array("form"=>"progressaoCapacitacao"));
                        	 
                        }
						*/
                        
                        if ($vinculo->isTA()){
                        	$this->_panel[2]->AddUserAction('rh_progressao',A_EXECUTE,'Por Capacitação Profissional',
								$ui->GetImage('rh','capacitacao_mini.png'),'rh',$action, $this->oid, array("form"=>"progressaoCapacitacao"));	
                        	$this->_panel[2]->AddUserAction('rh_progressao',A_EXECUTE,'Por Mérito Profissional',
								$ui->GetImage('rh','intersticio_mini.png'),'rh',$action, $this->oid, array("form"=>"progressaoMerito"));
                        }
                        
                        if ($vinculo->isDocenteEfetivo())
						{
                        	$this->_panel[2]->AddUserAction('rh_info',A_EXECUTE,'Por Titulação',
								$ui->GetImage('rh','titulacao_mini.png'),'rh',$action, $this->oid, array("form"=>"titulacoes"));
                        	$this->_panel[2]->AddUserAction('rh_progressao',A_EXECUTE,'Por Interstício',
								$ui->GetImage('rh','intersticio_mini.png'),'rh',$action, $this->oid, array("form"=>"progressaoIntersticio"));
                        }
                  
                    }
                    catch ( Exception $e )
                    {
                        if(!$provimento->idClasse)
                        {
                            $this->addError('Servidor não está vinculado a uma classe.');
                        }
                        else
                        {
                            $this->addError($e->getMessage());
                        }
                    }
                
                 break;

            case 'progressaoIntersticio' :
                $this->_form[] = $ui->GetForm('rh','frmVinculoProgressao',$vinculo,'vinculo');
                break;
                
            case 'progressaoMerito' :
                $this->_form[] = $ui->GetForm('rh','frmVinculoProgressaoMerito',$vinculo,'vinculo');
                break;
                
            case 'progressaoCapacitacao' :
            	$this->_form[] = $ui->GetForm('rh','frmVinculoProgressaoCapacitacao',$vinculo,'vinculo');
            	break;
                 
            case 'contrato' :
                 $vinculo->getProrrogacoesContrato();
                 if ( ($id = MForm::getFormValue('id')) != NULL )
                 {
                    $this->_form[] = $ui->GetForm($module,'frmVinculoProrrogacao',array($vinculo,$id),'vinculo');
                    $page->SetAction($history->Top('action'));
                }
                 array_unshift($this->_form, $ui->GetGrid($module,'gridProrrogacoes', $vinculo)); 
                 break;
                 
            case 'media' : 
                    $this->_form[] = $ui->GetForm('rh','frmVinculoMedia',$vinculo,'vinculo');
                 break;
                 
            case 'atividade' :
                    $vinculo->GetAtividades();
                     if ( ($id = Form::GetFormValue('id')) != NULL )
                     {
                        $atv = $vinculo->getAtividade($id);
                        if ($atv != NULL)
                        {
                            $this->_form[] = $ui->GetForm('rh','frmVinculoAtividade',array($atv,$vinculo),'vinculo');
                        }
                     }
                     array_unshift($this->_form, $ui->GetGrid($module,'gridAtividade', $vinculo));
                 break;
            
            case 'incentivo' :
                 if ($vinculo->isTA()) {
                     if (($id = Form::GetFormValue('id')) != NULL)
                     {
                         $incentivo = $vinculo->getIncentivo($id);
                         if ($incentivo->idHistIncentivo != NULL)
                         {
                            $this->_form[] = $ui->GetForm('rh','frmIncentivoData', $incentivo,'vinculo'); 
                            $this->page->SetAction($this->manager->history->Top('action'));
                         } else
                         {
                            $this->_form[] = $ui->GetForm('rh','frmIncentivoNew', $vinculo,'vinculo'); 
                            $this->page->SetAction($this->manager->history->Top('action'));
                         }
                     }
                     array_unshift($this->_form, $ui->GetGrid($module,'gridHistIncentivo', $this->vinculo));
                } else throw new EBusinessException('Essa operação é permitida somente para servidores técnicos administrativos.'); 
                 break;
           

            case 'ambiente' :
                $provimento->retrieveAssociation('ambiente');
                $this->_panel[2] = new ActionPanel('pnlCompound','Ambiente atual:   ' . $provimento->ambiente->descricao,'',false);
                $this->_panel[2]->SetIconType('small');
                $this->_panel[2]->AddUserAction('rh_ambiente',A_EXECUTE,'Mudar Ambiente',
                                                $ui->GetImage('rh','remocao_mini.png'),
                                                'rh',$action, $this->oid, array("form"=>"mudarambiente"));
                $this->_panel[2]->AddUserAction('rh_ambiente',A_EXECUTE,'Editar Ambiente',
                                                $ui->GetImage('rh','geral_mini.png'),
                                                'rh',$action, $this->oid, array("form"=>"editarambiente"));
                break;

            case 'mudarambiente' :
                $this->_form[] = $ui->GetForm('rh','frmMudarAmbiente',$this->vinculo->idVinculo,'ambiente');
                //array_unshift($this->_form, $ui->GetGrid($module,'gridAtividade', $vinculo));
                /*$vinculo->GetAtividades();
                     if ( ($id = Form::GetFormValue('id')) != NULL )
                     {
                        $atv = $vinculo->getAtividade($id);
                        if ($atv != NULL)
                        {
                            $this->_form[] = $ui->GetForm('rh','frmVinculoAtividade',array($atv,$vinculo),'vinculo');
                        }
                     }
                     array_unshift($this->_form, $ui->GetGrid($module,'gridAtividade', $vinculo));*/
                break;

            case 'editarambiente' :
                $this->_form[] = $ui->GetForm('rh','frmEditarAmbiente',array($atv,$vinculo),'ambiente');
                //array_unshift($this->_form, $ui->GetGrid($module,'gridAtividade', $vinculo));
                /*$vinculo->GetAtividades();
                     if ( ($id = Form::GetFormValue('id')) != NULL )
                     {
                        $atv = $vinculo->getAtividade($id);
                        if ($atv != NULL)
                        {
                            $this->_form[] = $ui->GetForm('rh','frmVinculoAtividade',array($atv,$vinculo),'vinculo');
                        }
                     }
                     array_unshift($this->_form, $ui->GetGrid($module,'gridAtividade', $vinculo));*/
                break;
				
            case 'historico':
            	$this->_form[] = $ui->getGrid('rh','gridMudancasAmbiente',$vinculo);
                if (($dataInicio = Form::GetFormValue('data')) != NULL)
                 {
                     $provimento = $vinculo->getProvimento($dataInicio);
                     $this->_form[1] = $ui->GetForm($module,'frmVinculoHistoricoAmbiente', $provimento,'vinculo');
                     $page->SetAction($history->Top('action'));
                 }
            	break;

            case 'historicos':
                 $vinculo->GetHistoricos();
                 if ( ($id = Form::GetFormValue('id')) != NULL )
                 {
                    $historico = $vinculo->GetHistorico($id);
                    if ($historico != NULL)
                    {
                        $this->_form[] = $ui->GetForm('rh','frmVinculoHistorico',array($historico,$vinculo),'vinculo');
                    }
                 }
                 array_unshift($this->_form,$ui->getgrid('rh','gridHistorico',$vinculo)); 
                 break;
            case 'ref' :
            	$this->_form[] = $ui->GetForm('rh','frmVinculoReferencia',$vinculo,'vinculo');
	         break;

        }


        if ($this->_form[0])
        {
            $this->_form[0]->SetClose($MIOLO->GetActionURL('rh','main:vinculo',$vinculo->idVinculo));
            //$page->SetAction($history->Top('action'));
        }
    }
}
?>
