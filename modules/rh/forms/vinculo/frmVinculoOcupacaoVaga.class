<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

/**
 * Formulário de edição de Ocupação de Vagas
 */
class frmVinculoOcupacaoVaga extends Form
{
	/**
	 * Objeto ocupacaovaga
	 * @access protected
	 * @var BusinessRhVinculoOcupacaoVaga
	 */
	protected $ocupacaovaga;

    function __construct($objOcupacaoVaga)
    {
        global $MIOLO;

		$this->ocupacaovaga = $objOcupacaoVaga;
        parent::__construct('Dados da Ocupação da Vaga');
        $this->SetClose($MIOLO->GetActionURL('rh','main:vinculo',$this->ocupacaovaga->idVinculo, array('form'=>'ocupacaovaga')));
        $this->EventHandler();
    }

    function CreateFields()
    {
       global $MIOLO;

/*		$vaga2 = $MIOLO->GetBusiness('rh', 'vaga');

		$listaDeVagas = $vaga2->ListAllByNumeroVagaOrDescricaoCargo();
		echo"<pre>";
		var_dump($listaDeVagas);
*/
        $comentarios = array (
            new Text('comentario1','<b>Atenção:</b>'),
            new Text('comentario2','Utilize o pequeno calendário ao lado do campo para selecionar uma data <b>válida</b>,'),
            new Text('comentario3','ou digite a data no formato <b>DD/MM/AAAA</b>. Por exemplo: <b>31/12/2005</b>.'),
        );
		$fldNumeroVaga = new LookupTextField('numeroVaga','','No. da Vaga','9');
//        $fldNumeroVaga = new TextField('numeroVaga','','No. da Vaga', '9');
        $fldDataInicio = new CalendarField('dataInicio','','Início');
        $fldDataFim    = new CalendarField('dataFim','','Fim');
        
        $fields = array(
            new Spacer('10px'),
			//new LookupTextField('numeroVaga','','No. da Vaga','9'),
            $fldNumeroVaga,
            new Spacer('10px'),
            $comentarios,
            new Spacer('10px'),
            $fldDataInicio,
            $fldDataFim,
        );
		
        $this->SetFields($fields);

		$this->SetFieldAttr('numeroVaga','module','rh');
	    $this->SetFieldAttr('numeroVaga','item','NumeroVaga');
        $this->SetFieldAttr('numeroVaga','event','filler');
        $this->SetFieldAttr('numeroVaga','related','numeroVaga');
//	    $this->SetFieldAttr('numeroVaga','filter','999');

        $fldNumeroVaga->AddAttribute('maxlength','7');
        $fldDataInicio->AddAttribute('maxlength','10');
        $fldDataFim->AddAttribute('maxlength','10');

        $this->SetData();
        
        $this->SetFieldAttr('numeroVaga','readonly',$this->ocupacaovaga->isPersistent());

		$buttons = array(
			new FormButton('btnSalvar','Enviar'),
			new FormButton('btnExcluir','Excluir')
        );
		
        $this->SetButtons($buttons);
		
        $this->SetButtonAttr('btnExcluir','visible',$this->ocupacaovaga->isPersistent());

		$validators = array(
			new RequiredValidator('numeroVaga'),
		);

		$this->SetValidators($validators);
    }

	function SetData()
	{
		$this->SetFieldValue('numeroVaga',  $this->ocupacaovaga->numeroVaga);
		$this->SetFieldValue('dataInicio',  $this->ocupacaovaga->dataInicio);
		$this->SetFieldValue('dataFim',     $this->ocupacaovaga->dataFim);
	}

	function GetData()
	{
        $data = new FormData();
		$data->numeroVaga   = $this->GetFieldValue('numeroVaga');
		$data->dataInicio   = $this->GetFieldValue('dataInicio');
		$data->dataFim      = $this->GetFieldValue('dataFim');
        return $data;
	}

	public function btnSalvar_click()
	{
		global $MIOLO;

		$update = $this->ocupacaovaga->isPersistent();

        $this->ocupacaovaga->SetData($this->GetData());

		try 
        {
			$this->ocupacaovaga->save();
            $go = $MIOLO->GetActionURL('rh','main:vinculo',$this->ocupacaovaga->idVinculo, array('form'=>'ocupacaovaga'));
			if ($update)
			{
	            $MIOLO->Information('Ocupação da Vaga atualizada com sucesso.', $go );
			}
			else
			{
	            $MIOLO->Information('Ocupação da Vaga inserida com sucesso.', $go );
			}
        }
        catch (Exception $e)
        {
            $this->AddError($this->ocupacaovaga->GetErrors());
        }
	}

	function btnExcluir_click()
	{
        global $MIOLO;

		$action_sim = $MIOLO->GetActionURL('rh','main:vinculo',$this->ocupacaovaga->idVinculo,array('form'=>'ocupacaovaga','id'=>$this->ocupacaovaga->numeroVaga,'conf'=>'sim','event'=>'btnExcluir:click'));
		$action_nao = $MIOLO->GetActionURL('rh','main:vinculo',$this->ocupacaovaga->idVinculo,array('form'=>'ocupacaovaga','id'=>$this->ocupacaovaga->numeroVaga));

		$conf = $this->GetFormValue('conf');

		if ($conf == 'sim')
		{
			$this->ocupacaovaga->Delete();
			if (!$this->ocupacaovaga->CheckError())
			{
				$MIOLO->Information('Ocupação excluída com sucesso',$MIOLO->GetActionURL('rh','main:vinculo',$this->ocupacaovaga->idVinculo,array('form'=>'ocupacaovaga')));
			}
			else
			{
				$MIOLO->Error("Informe o seguinte erro à equipe do CGCO: ".$this->ocupacaovaga->GetErrors());
			}
					
	   }
	   else
	   {
		   $MIOLO->Question("Tem certeza que deseja excluir a ocupação da vaga ".$this->ocupacaovaga->numeroVaga."?",$action_sim,$action_nao);
		}
	}

}
?>
