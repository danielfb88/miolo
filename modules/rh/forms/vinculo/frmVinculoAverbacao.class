<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

MIOLO::Import('modules::rh::forms::vinculo::frmVinculo');

class frmAverbacao extends frmVinculo
{
    protected $averbacao;
    /**
     * Construtor
     */
    function __construct($objAverbacao)
    {
        global $MIOLO;
        $this->averbacao = $objAverbacao;
        $this->vinculo = $MIOLO->GetBusiness('rh','vinculo',$this->averbacao->idVinculo);
        parent::__construct($this->vinculo);
        $this->SetClose($MIOLO->GetActionURL('rh','main:vinculo'));
        $this->SetIcon($MIOLO->GetUi()->GetImage('rh','classe_mini.png'));
    }

    function CreateFields()
    {
        /*
        global $MIOLO, $page, $module, $context, $action, $history;

        $vinculo = $this->vinculo;
        Util::SetIfNull($this->oid, $vinculo->idVinculo);
        parent::CreateFields();

        $ui = $MIOLO->GetUI();
        $form = Form::GetFormValue('form');

// panel        
        $action = $context->action;
        $this->_panel[1] = $panel = new ActionPanel('pnlCompound','Vínculo: ' . $vinculo->idVinculo,'',false);
        $panel->SetIconType('small');

		$panel->AddUserAction('rh_vinculo_dados',A_EXECUTE,'Editar',
            $ui->GetImage('rh','edit.png'),'rh',$action, $this->oid, array("form"=>"dados"));

		$panel->AddUserAction('rh_vinculo_provimento',A_EXECUTE,'Provimentos',
            $ui->GetImage('rh','edit.png'),'rh',$action, $this->oid, array("form"=>"provimentos"));

		$panel->AddUserAction('rh_vinculo_ocupacaovaga',A_EXECUTE,'Ocupação de Vagas',
            $ui->GetImage('rh','ocupacaovaga.png'),'rh',$action, $this->oid, array("form"=>"ocupacaovaga"));

		$panel->AddUserAction('rh_vinculo_periodoaquisitivo',A_EXECUTE,'Período Aquisitivo',
            $ui->GetImage('rh','periodoaquisitivo.png'),'rh',$action, $this->oid, array("form"=>"periodoaquisitivo"));

		$panel->AddUserAction('rh_vinculo_licafast',A_EXECUTE,'LicAfast',
            $ui->GetImage('','default.png'),'rh',$action, $this->oid, array("form"=>"licAfast"));

		$panel->AddUserAction('rh_vinculo_aposentadoria',A_EXECUTE,'Aposentadoria',
            $ui->GetImage('','default.png'),'rh',$action, $this->oid, array("form"=>"aposentadoria"));

		$panel->AddUserAction('rh_vinculo_averbacao',A_EXECUTE,'Averbação',
            $ui->GetImage('','default.png'),'rh',$action, $this->oid, array("form"=>"averbacao"));

// form
		switch ($form)
        {

            case 'dados' : 
                 $vinculo->GetById($vinculo->idVinculo,false);
                 $this->_form[0] = $ui->GetForm($module,'frmVinculoDados', $vinculo,'vinculo'); 
                 break;
            
			
			case 'licAfast' : 
				 $vinculo->GetLicAfasts();
				 if ( ($id = Form::GetFormValue('id')) != NULL )
				 {
				 	$licAfast = $vinculo->GetLicAfast($id);
					if ($licAfast != NULL)
					{
						$this->_form[] = $ui->GetForm($module,'frmVinculoLicAfast',$licAfast,'vinculo');
						$page->SetAction($history->Top('action'));
					}
				}
                 array_unshift($this->_form, $ui->GetGrid($module,'gridLicAfast', $vinculo)); 
                 break;
            
			
			case 'ocupacaovaga' : 
				$vinculo->getOcupacaoVagas();
				if ( ($id = Form::GetFormValue('id')) != NULL )
				{
					$ocupacaovaga = $vinculo->getOcupacaoVaga($id);
					if ($ocupacaovaga != NULL)
					{
					 	$this->_form[] = $ui->GetForm($module,'frmVinculoOcupacaoVaga',$ocupacaovaga,'vinculo');
                        $page->SetAction($history->Top('action'));
					}
				 }
                 array_unshift($this->_form, $ui->GetGrid($module,'gridOcupacaoVaga', $vinculo));
                 break;

            
			case 'periodoaquisitivo' : 
				$vinculo->getPeriodosAquisitivos();
	   		if ( ($id = Form::GetFormValue('id')) != NULL )

			{	

			if ( (Form::GetFormValue('id')) != "new" ) 
				{
					$periodoaquisitivo = $vinculo->getPeriodoAquisitivo($id);
//					echo"<pre>"; var_dump($periodoaquisitivo);echo"</pre>";
					$data = explode("/", $id);
					$action = $context->action;
					$this->_panel[2] = new ActionPanel('pnlCompoundPeriodoAquisitivo','Período Aquisitivo. Ano de: ' . $data[2],'',false);
					$this->_panel[2]->SetIconType('small');
					$this->_panel[2]->AddUserAction('rh_vinculo_dados',A_EXECUTE,'Visualizar',
						$ui->GetImage('rh','edit.png'),'rh',$action, $this->oid, array("form"=>"periodoaquisitivo", "id"=>$id, "exec"=>"editarperiodo"));

					if ($periodoaquisitivo->permiteFerias())
						$this->_panel[2]->AddUserAction('rh_vinculo_ferias',A_EXECUTE,'Férias', $ui->GetImage('rh','edit.png'),'rh',$action, $this->oid, array("form"=>"periodoaquisitivo", "id"=>$id, "exec"=>"gridferias"));

					if ( (Form::GetFormValue('exec')) == "editarperiodo" )
					{
						$periodoaquisitivo = $vinculo->getPeriodoAquisitivo($id);
						if ($periodoaquisitivo != NULL)
						{
							$this->_form[] = $ui->GetForm($module,'frmVinculoPeriodoAquisitivo',$periodoaquisitivo,'vinculo');
							$page->SetAction($history->Top('action'));
						}
					 }
					else

					if ( (Form::GetFormValue('exec')) == "gridferias" )
					{
						$periodoAqFerias = $vinculo->getPeriodoAquisitivo($id);							array_unshift($this->_form, $ui->GetGrid('rh','gridFerias', $periodoAqFerias));
						$page->SetAction($history->Top('action'));
					}
					else
					if ( (Form::GetFormValue('exec')) == "formularioferias" )
					{
						$periodoAqFerias = $vinculo->getPeriodoAquisitivo($id);
					
					   var_Dump($periodoAqFerias->idVinculoPeraq);	array_unshift($this->_form,$ui->GetForm('rh','frmVinculoLancarFerias',$periodoAqFerias,'vinculo'));
						$page->SetAction($history->Top('action'));



					}
                }
				else
					{ //se id new
						$periodoaquisitivo = $vinculo->getPeriodoAquisitivo($id);
						if ($periodoaquisitivo != NULL)
						{
						 	$this->_form[] = $ui->GetForm($module,'frmVinculoPeriodoAquisitivo',$periodoaquisitivo,'vinculo');
				            $page->SetAction($history->Top('action'));
						}
				  }			
			}
			else   			 
			array_unshift($this->_form, $ui->GetGrid($module,'gridPeriodoAquisitivo', $vinculo));
            break;

			case 'provimentos' : 
                 $this->_form[0] = $ui->GetGrid('rh','gridProvimentos', $vinculo); 
                 if (($dataInicio = Form::GetFormValue('data')) != NULL)
                 {
                     $provimento = $vinculo->getProvimento($dataInicio);
                     $this->_form[1] = $ui->GetForm($module,'frmVinculoProvimento', $provimento,'vinculo'); 
                     $page->SetAction($history->Top('action'));
                 }
                 break;
			
            case 'aposentadoria'     : 
                 $this->_form[1] = $ui->GetForm($module,'frmVinculoAposentadoria', $vinculo,'vinculo'); 
                 $page->SetAction($history->Top('action'));
                 break;
                 
            case 'averbacao'     : 
				$vinculo->getAverbacoes();
				if ( ($id = Form::GetFormValue('id')) != NULL )
				{
					$averbacao = $vinculo->getAverbacao($id);
					if ($averbacao != NULL)
					{
					 	$this->_form[] = $ui->GetForm('rh','frmVinculoAverbacao',$averbacao,'vinculo');
                        $page->SetAction($history->Top('action'));
					}
				 }
                 array_unshift($this->_form, $ui->GetGrid($module,'gridAverbacao', $vinculo));
                 break;
        }

        if ($this->_form[0])
        {
            $this->_form[0]->SetClose($MIOLO->GetActionURL('rh','main:vinculo',$vinculo->idVinculo));
            $page->SetAction($history->Top('action'));
        }
        */
	}
}
?>
