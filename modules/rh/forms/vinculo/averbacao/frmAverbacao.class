<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class frmAverbacao extends MCompoundForm
{
    protected $averbacao;
    /**
     * Construtor
     */
    function __construct($objAverbacao)
    {
        global $MIOLO;
        $this->averbacao = $objAverbacao;
        parent::__construct();
        $this->SetClose(null);
        $this->SetIcon($MIOLO->GetUi()->GetImage('','default_mini.png'));
        $this->SetTitle("Averbações");
    }

    function CreateFields()
    {
        global $context;

        $vinculo = $this->manager->getBusiness('rh','vinculo');
        $vinculo->getById($this->averbacao->idVinculo);
        
        $perms = $this->manager->getPerms();
        $perms->checkAccess('rh_averbacao',A_ACCESS,TRUE);
        
        $averbacao = $this->averbacao ;
        $ui = $this->manager->GetUI();
        

        $subForm = Form::GetFormValue('subForm');
        $url = $this->manager->getActionURL('rh','main:vinculo',$averbacao->idVinculo,array('form'=>'averbacao','id'=>$averbacao->idAverbacao,'subForm'=>$subForm));
        $this->page->setAction($url);
        switch ($subForm)
        {
            case 'dados': 
                $this->_form[0] = $ui->GetForm('rh','frmAverbacaoDados', $averbacao, 'vinculo/averbacao'); 
                break;
            case 'finalidades':
                $averbacao->getFinalidades();
                if ( ($id = $this->getFormValue('idFinalidade')) != NULL )
                {
                    $averbacao->deleteFinalidade($id);
                    $averbacao->getFinalidades();
                }
                if ( $vinculo->isAtivo() )
                {
                    $this->_form[] = $ui->GetForm('rh','frmAverbacaoFinalidade',$averbacao,'vinculo/averbacao');
                }
                
                 array_unshift($this->_form, $ui->GetGrid('rh','gridAverbacaoFinalidade', $averbacao));
                 break;
            case 'desaverbacao':
                $averbacao->getDesaverbacoes();
                if ( ($id = Form::getFormValue('idDesaverbacao')) != NULL )
                {
                    $desaverbacao = $averbacao->getDesaverbacao($id);
                    if ($desaverbacao != NULL)
                    {
                        $this->_form[0] = $ui->GetForm('rh','frmAverbacaoDesaverbacao',$desaverbacao,'vinculo/averbacao');
                    }
                }
                 array_unshift($this->_form, $ui->GetGrid('rh','gridAverbacaoDesaverbacao', $averbacao));
                 break;

            case 'excluir'     : 
                 $this->_form[0] = $ui->GetForm('rh','frmAverbacaoDel', $averbacao, 'vinculo/averbacao'); 
                 break;
        }
        // info
        $this->_info[0] = new TextLabel('txtProcesso',$this->averbacao->processo,'Processo');
        $this->_info[1] = new TextLabel('txtDataInicio',$this->averbacao->dataInicio,'Data Início');
        $this->_info[2] = new TextLabel('txtDataFim',$this->averbacao->dataFim,'Data Fim');
        $this->_info[3] = new TextLabel('txtTotalDias',$this->averbacao->totalDias,'Total Dias');
        $this->_info[4] = new TextLabel('txtInstituicao',$this->averbacao->instituicao,'Instituição');
        if ( $this->averbacao->temDesaverbacoes() )
        {
            $this->_info[5] = new MLabel('Dias desaverbados: '.$this->averbacao->getDiasDesaverbados());
            $total = $this->averbacao->totalDias + $this->averbacao->getDiasDesaverbados() ;
            $this->_info[6] = new MLabel('Dias averbados originalmente: '.$total);
        }
        
        // panel        
        $action = $context->action;
        $this->_panel[0] = $panel = new ActionPanel('pnlCompound','Opções','',false);
        $panel->setIconType('small');

        // caso o servidor esteja ativo, permitor a edição e a exclusão da averbação!
        if ( $vinculo->isAtivo() )
        {
            $panel->AddUserAction('rh_averbacao',A_EXECUTE,'Editar',$ui->GetImage('rh','edit.png'),'rh',$action, $averbacao->idVinculo, array("form"=>"averbacao","id"=>$averbacao->idAverbacao,"subForm"=>"dados"));
            $panel->AddUserAction('rh_averbacao',A_EXECUTE,'Excluir',$ui->GetImage('rh','excluir.png'),'rh',$action, $averbacao->idVinculo, array("form"=>"averbacao","id"=>$averbacao->idAverbacao,"subForm"=>"excluir"));

        }

        $panel->AddUserAction('rh_averbacao',A_EXECUTE,'Finalidades',$ui->GetImage('','default.png'),'rh',$action, $averbacao->idVinculo, array("form"=>"averbacao","id"=>$averbacao->idAverbacao,"subForm"=>"finalidades"));
        $panel->AddUserAction('rh_averbacao',A_EXECUTE,'Desaverbação',$ui->GetImage('','default.png'),'rh',$action, $averbacao->idVinculo, array("form"=>"averbacao","id"=>$averbacao->idAverbacao,"subForm"=>"desaverbacao"));
    }
}
?>
