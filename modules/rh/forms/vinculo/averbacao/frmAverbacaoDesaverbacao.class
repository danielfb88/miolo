<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class frmAverbacaoDesaverbacao extends MForm
{
	protected $objDesaverbacao;
    protected $dias;
    protected $k;

    function __construct($objDesaverbacao)
    {
        $this->k = new MKrono();
		$this->SetClose(NULL);
		$this->objDesaverbacao = $objDesaverbacao;
        $this->objDesaverbacao->retrieveAssociation('averbacao');
        $this->dias = $this->objDesaverbacao->averbacao->totalDias; 
        parent::__construct('Dados da Desaverbacao');
        $this->EventHandler();
    }

    function CreateFields()
    {
        $averbInicio = $this->objDesaverbacao->averbacao->dataInicio;
        $averbFim = $this->objDesaverbacao->averbacao->dataFim;
        $averbTotalDias = $this->objDesaverbacao->averbacao->totalDias;
        
        $vinculo = $this->manager->getBusiness('rh','vinculo');
        $vinculo->getById($this->objDesaverbacao->averbacao->idVinculo);

        $fields = array(
            new MHiddenField('idDesaverbacao'),
            new MCalendarField('dataInicio','','Data Início','16',"[ $averbInicio ... $averbFim]"),
            new MCalendarField('dataFim','','Data Fim','16',"[ $averbInicio ... $averbFim]"),
            new MTextField('totalDias','','Total Dias',6,"Máx. $this->dias"),	
            //new MCalendarField('data','','Data',16),
            new MMultiLineField('motivo','','Motivo',50,3,50) 
        );
		
        $this->setFields($fields);
        //$this->setFieldValue('totalDias',$averbTotalDias);
        $this->setFieldAttr('totalDias','readonly',$this->objDesaverbacao->isPersistent());

		$buttons = array(
			new MButton('btnSalvar','Salvar'),
			new MButton('btnExcluir','Excluir')
            );
            
        $this->setButtons($buttons);
	    $validators = array(
/*           new MRangeValidator('dataInicio','',$averbInicio,$averbFim,'d','required'),
           new MRangeValidator('dataFim','',$averbInicio,$averbFim,'d','required'),*/
           new MRequiredValidator('dataInicio','','required'),
           new MRequiredValidator('dataFim','','required'),
           //new MRangeValidator('totalDias','',1,$this->dias,'i','required'),
           //new MRequiredValidator('data')
		);
        $this->setValidators($validators);

        $this->setButtonAttr('btnExcluir','visible',$this->objDesaverbacao->isPersistent() && $vinculo->isAtivo() );
        $this->setButtonAttr('btnSalvar','visible',$vinculo->isAtivo() );
	$this->setFieldAttr('totalDias','visible',false);
        
		$this->setData();
    }

	function SetData()
	{
		$data = $this->objDesaverbacao;
        $id = ( $this->objDesaverbacao->idDesaverbacao ) ? $this->objDesaverbacao->idDesaverbacao : 'new';
        $dataInicio = ( $this->objDesaverbacao->dataInicio ) ? $this->objDesaverbacao->dataInicio : $this->objDesaverbacao->averbacao->dataInicio;
        $dataFim = ( $this->objDesaverbacao->dataFim ) ? $this->objDesaverbacao->dataFim : $this->objDesaverbacao->averbacao->dataFim;
        $totalDias = ( $this->objDesaverbacao->totalDias ) ? $this->objDesaverbacao->totalDias : $this->objDesaverbacao->averbacao->totalDias;
        $this->setFieldValue('idDesaverbacao',$id);
		$this->setFieldValue('dataInicio',$dataInicio);
		$this->setFieldValue('dataFim',$dataFim);
        if ( $this->objDesaverbacao->isPersistent() )
    		$this->setFieldValue('totalDias',$totalDias);
		//$this->setFieldValue('data',$data->data);
		$this->setFieldValue('motivo',$data->motivo);
	}

	public function btnSalvar_click()
	{
		global $MIOLO;

		$objAverbacao = $MIOLO->getBusiness('rh','averbacao');
		$diasAverbados = $objAverbacao->getDiasAverbados($this->objDesaverbacao->averbacao->idVinculo);

		$update = $this->objDesaverbacao->isPersistent();
		$data = new FormData();
	        $data->dataInicio = $this->getFormValue('dataInicio');
	        $data->dataFim = $this->getFormValue('dataFim');
	        $data->totalDias = $this->getFormValue('totalDias');
	        //$data->data = $this->getFormValue('data');
	        $data->motivo = $this->getFormValue('motivo');
        
		$this->objDesaverbacao->SetData($data);
	        $this->objDesaverbacao->totalDias = ( $this->objDesaverbacao->totalDias ) ? $this->objDesaverbacao->totalDias : $this->objDesaverbacao->getDaysDiff();
	        $err = FALSE;
	if($this->objDesaverbacao->totalDias > $diasAverbados)
	{
		$this->addError('A quantidade de dias Desaverbados não pode ser maior que a quantidade de dias Averbados');
		$err = TRUE;
	}
        if ( $data->totalDias > $this->dias )
        {
            $this->addError("O total de dias da desaverbação não pode ultrapassar $this->dias dias.");
            $err = TRUE;
        }
        if ( $this->k->compareDate($data->dataInicio,'<',$this->objDesaverbacao->averbacao->dataInicio) || $this->k->compareDate($data->dataFim,'>',$this->objDesaverbacao->averbacao->dataFim) )
        {
            $this->addError("O período a ser desaverbado deve estar contido no período averbado.");
            $err = TRUE;
        }
        if ( $this->k->compareDate($data->dataInicio,'>',$data->dataFim) )
        {
            $this->addError("A data de início está maior do que a data de fim.");
            $err = TRUE;
        }
/*        if ( $this->k->compareDate($data->data,'<=',$this->objDesaverbacao->averbacao->dataFim) )
        {
            $this->addError("A data da averbação não pode ser igual ou inferior à data fim da averbação.");
            $err = TRUE;
        }*/

        if ( ! $err )
        {
        
    		try 
            {
		    	$this->objDesaverbacao->save();
                $this->objDesaverbacao->log(OP_INS," id averbacao ".$this->objDesaverbacao->idAverbacao." data inicio: ".$this->objDesaverbacao->dataInicio." data fim: ".$this->objDesaverbacao->dataFim." dataFim: ".$this->objDesaverbacao->totalDias." data: ".$this->objDesaverbacao->data." motivo: ".$this->objDesaverbacao->motivo );
                $this->objDesaverbacao->retrieveAssociation('averbacao');
                $go = $this->manager->GetActionURL('rh','main:vinculo',$this->objDesaverbacao->averbacao->idVinculo,array('form'=>'averbacao','id'=>$this->objDesaverbacao->idAverbacao,'subForm'=>'desaverbacao'));
    			if ($update)
	    		{
	                $this->manager->information('Desaverbação atualizada com sucesso.', $go );
			    }
    			else
	    		{
	                $this->manager->information('Desaverbação inserida com sucesso.', $go );
			    }
            }
            catch (Exception $e)
            {
                $this->AddError($e->getMessage());
            }
        }
	}
	
	function btnExcluir_click()
	{
		$action_sim = $this->manager->GetActionURL('rh','main:vinculo',$this->objDesaverbacao->averbacao->idVinculo,array('form'=>'averbacao','id'=>$this->objDesaverbacao->idAverbacao,'subForm'=>'desaverbacao','idDesaverbacao'=>$this->objDesaverbacao->idDesaverbacao,'conf'=>'sim','event'=>'btnExcluir:click'));
		$action_nao = $this->manager->GetActionURL('rh','main:vinculo',$this->objDesaverbacao->averbacao->idVinculo,array('form'=>'averbacao','id'=>$this->objDesaverbacao->idAverbacao,'subForm'=>'desaverbacao','idDesaverbacao'=>$this->objDesaverbacao->idDesaverbacao));

		$conf = $this->GetFormValue('conf');

		if ($conf == 'sim')
		{
            try
            {
    			$this->objDesaverbacao->delete();
                $this->objDesaverbacao->log(OP_DEL," id averbacao ".$this->objDesaverbacao->idAverbacao." data inicio: ".$this->objDesaverbacao->dataInicio." data fim: ".$this->objDesaverbacao->dataFim." dataFim: ".$this->objDesaverbacao->totalDias." data: ".$this->objDesaverbacao->data." motivo: ".$this->objDesaverbacao->motivo );
		    	$this->manager->information('Desaverbação excluída com sucesso',$this->manager->getActionURL('rh','main:vinculo',$this->objDesaverbacao->averbacao->idVinculo,array('form'=>'averbacao','id'=>$this->objDesaverbacao->idAverbacao)));
            }
            catch ( Exception $e )
            {
			   	$this->manager->error("Informe o seguinte erro à equipe do CGCO: ".$this->ocorrencia->GetErrors());
            }
	   }
	   else
	   {
		   $this->manager->question("Tem certeza que deseja excluir a desaverbacao?",$action_sim,$action_nao);
		}
	}

 }
?>
