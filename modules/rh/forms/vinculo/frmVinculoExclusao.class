<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

MIOLO::Import('modules::rh::controls::linkvinculo');
/**
 * Formulário de exclusão de um vínculo
 */
class frmVinculoExclusao extends Form
{
	/**
	 * Formulário Exclusao
	 * @access protected
	 * 
	 */
	protected $objVinculo;

    function __construct($objVinculo)
    {
		$this->objVinculo = $objVinculo;
        parent::__construct('Dados da Exclusão');
        $this->EventHandler();
    }


    function CreateFields()
    {
        global $MIOLO;
        $perms = $MIOLO->getPerms();
        $perms->checkAccess('rh_exclusao_servidor',A_ACCESS,TRUE);
	   
	     //aqui para que um possível addError não faça mostrar o botão padrão do Miolo
        $this->defaultButton = false;

		$ocupacaofuncao = $MIOLO->GetBusiness('rh','ocupacaofuncao');
        if ($ocupacaofuncao->seServidortemOcupacao($this->objVinculo->idVinculo))
        {
            $this->addInfo('Operação impossível: o servidor tem uma função atualmente');
            return;
        }

        $this->objVinculo->getProvimentos();
		$provimento = $this->objVinculo->getProvimentoAtual();
		$Ocorrencia = $MIOLO->GetBusiness('rh','ocorrencia');

		## Dados do último provimento ##
		$regimeJuridico = $provimento->regimeJuridico;
		$idClasse		= $provimento->idClasse;
		$idReferencia	= $provimento->idReferencia;
		$idSituacao		= $provimento->idSituacao;
		$idGrupoCargo	= $provimento->idGrupoCargo;
		$idCargo		= $provimento->idCargo;
		$idSetor		= $provimento->idSetor;

		## Fim Dados do último provimento ##
		$listaOcorrencias = $Ocorrencia->ListBySituacaoGrupoOcorrencia($idSituacao,'02');
		$arrOcorrencias = $listaOcorrencias->result;

		$today = date('d/m/Y');
		
		$fields = array(
			new Selection('grupoOcorrencia','','Ocorrência',$arrOcorrencias),
			new CalendarField('dataExclusao',$today,'Data da Exclusao',15),
			new MLookupFieldValue('publicacao','','Publicação'),
			new HiddenField('idSituacao',$idSituacao),
			new MultiLineField('obs','','Observação',25,5,40,'Máx. 500')
		);
		$this->SetFields($fields);
		
		$this->obs->AddAttribute('maxlength',500);
		
		$buttons = array(
			new FormButton('btnPost','Enviar')
		);
		$this->SetButtons($buttons);
		
		$this->SetFieldAttr('publicacao','module','rh');
		$this->SetFieldAttr('publicacao','item','publicacao');
		$this->SetFieldAttr('publicacao','event','filler');
		$this->SetFieldAttr('publicacao','related','idPublicacao,null,publicacao');

		$validators = array(
			new RequiredValidator('dataExclusao')
		);
		$this->SetValidators($validators);	
    }


	function GetData()
	{
		$this->objVinculo->getProvimentos();
		$provimento = $this->objVinculo->getProvimentoAtual();
	  	$provimento->regimeJuridico = $this->GetFormValue('regimeJuridico');
		$provimento->idClasse = $this->GetFormValue('idClasse');
		$provimento->idReferencia = $this->GetFormValue('idReferencia');
		$provimento->idSituacao = $this->GetFormValue('idSituacao');
		$provimento->idCargo = $this->GetFormValue('idCargo');
		$provimento->idGrupoCargo = $this->GetFormValue('idGrupoCargo');
		$provimento->idSetor = $this->GetFormValue('idSetor');
		$provimento->obs = $this->GetFormValue('obs');
	}

	public function btnPost_click()
	{
		global $MIOLO;
		$dataExclusao = $this->GetFormValue('dataExclusao');
		$idOcorrencia = $this->GetFormValue('grupoOcorrencia');
		$idSituacao = $this->GetFormValue('idSituacao');
		$obs  = $this->GetFormValue('obs');
		$pub = $this->getFormValue('publicacao');
		
		// Retirando os caracteres especiais. :-)
		$caracteres = array("#","*", "&", "%", "(", ")", "$", "@", "!", "'", "\"", "+", "=", "-", "/", ".", ",", "^", "?", ":", "}", "]", "[", "º","{","|",">","<",";");
		$obs = str_replace($caracteres,"",$obs);

      if(!$idOcorrencia) {
		  $this->addError('Favor selecionar uma Ocorrência');
	  }
     elseif(!$pub)
		{
		
			{
				$this->addError('Selecione uma Publicação');
			}
		}

	      else

		try
		{
            $k = new MKrono();
            
			$this->objVinculo->validaExclusao($dataExclusao, $idOcorrencia);
			$this->objVinculo->finalizaOcupacaoVaga($dataExclusao);
			$this->objVinculo->novoProvimento($dataExclusao, $k->operation('-',$dataExclusao,'1%D'), 02, $idOcorrencia, $idSituacao,'','','','','','','',$obs);
			$this->objVinculo->getProvimentos();
			$provimentoAtual = $this->objVinculo->getProvimentoAtual();
			$provimentoAtual->finaliza($dataExclusao);
            $this->objVinculo->setDataVacancia($dataExclusao);
            $this->objVinculo->save();

            if ( $provimentoAtual->idGrupoCargo == 60 )
            {
                $docente = $this->manager->getBusiness('ensino','docente');
                $docente->getByIdVinc($this->objVinculo->idVinculo);
                if ( $docente->isPersistent() )
                {
                    $docente->setInativo();
                }
            }

		  	$go = $this->manager->getActionURL('rh','main:vinculo',$this->objVinculo->idVinculo);

       	   	$this->manager->information('Vínculo excluído com sucesso!', $go );
            
		}
		catch ( ESimpleRnException $e )
		{
			$this->AddError($e->getMessage());
		}

	}	
 }
?>
