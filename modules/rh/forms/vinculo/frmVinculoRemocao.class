<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

MIOLO::Import('modules::rh::controls::linkvinculo');
/**
 * Formulário de remoção de um vínculo
 */
class frmVinculoRemocao extends MForm
{
	/**
	 * Formulário Remoção
	 * @access protected
	 * 
	 */
	protected $objVinculo;

    function __construct($objVinculo)
    {
	    $this->objVinculo = $objVinculo;
        parent::__construct('Dados da Remoção');
        $this->EventHandler();
    }

    function CreateFields()
    {
   		global $MIOLO;

        $perms = $MIOLO->getPerms();
        $perms->checkAccess('rh_remocao',A_ACCESS,TRUE);
        
        $this->defaultButton = false;  //aqui para que um possível addError não faça mostrar o botão padrão do Miolo
        $ocupacaofuncao = $MIOLO->GetBusiness('rh','ocupacaofuncao');
        if ($ocupacaofuncao->seServidortemOcupacao($this->objVinculo->idVinculo))
        {
            $this->addError('Erro: operação impossível: o servidor tem uma função atualmente');
            return;
        }

        $setor = $MIOLO->GetBusiness('rh','setor');
   		$qSetores = $setor->ListAll(TRUE);
		$arrSetores = $qSetores->ChunkResult();

		$dataRemocao    = $this->GetFormValue('dataRemocao');            // ?what for? !contains nothing!
		$idNovoSetor    = $this->GetFormValue('idSetor');
		$idPublicacao   = $this->GetFormValue('idPublicacao');

		$fields = array(
                    new MCalendarField('dataRemocao',$dataRemocao,'Data da Remoção',15),
                    new MLookupFieldValue('publicacao',$idPublicacao,'Publicação'),
                    new MHiddenField('idPublicacao',$idPublicacao),
                    new MSelection('idSetor',$idNovoSetor,'Novo Setor',$arrSetores)
        );

   		$objprovimento = $MIOLO->GetBusiness('rh','provimento');
        $objprovimento->getUltimoProvimento($this->objVinculo->idVinculo);
		$idnovoambiente = $objprovimento->idAmbiente;

        if ( ($objprovimento->idGrupoCargo <> '60')
        and  ($objprovimento->idSituacao == 1 or
              $objprovimento->idSituacao == 8 or
              $objprovimento->idSituacao == 9 or
              $objprovimento->idSituacao == 11    ) )      //ambiente organizacional: somente Técnico-Administrativo
        {
       		$objambiente = $MIOLO->GetBusiness('rh','ambiente');
   	    	$qy          = $objambiente->ListAll();
		    $ambientes   = $qy->ChunkResult();
            $fields[] = new MSelection('idAmbiente',$idnovoambiente,'Ambiente Organizacional',$ambientes);
        }

        $this->SetFields($fields);
	    $this->SetFieldAttr('publicacao','module','rh');
    	$this->SetFieldAttr('publicacao','item','publicacao');
        $this->SetFieldAttr('publicacao','event','filler');
		$this->SetFieldAttr('publicacao','related','idPublicacao,null,publicacao');
        $validators = array(
			new MRequiredValidator('dataRemocao'),
			new MRequiredValidator('idAmbiente','',100)
		);
		$this->SetValidators($validators);
		$buttons = array( new MButton('btnPost','Enviar') );
		$this->SetButtons($buttons);
    }

	public function btnPost_click()
	{
		global $MIOLO, $module, $self;
		$dataRemocao    = $this->GetFormValue('dataRemocao');
		$idNovoSetor    = $this->GetFormValue('idSetor');
		$idPublicacao   = $this->GetFormValue('idPublicacao');
		$idnovoambiente = $this->GetFormValue('idAmbiente');

		$action_sim = $MIOLO->GetActionURL( $module,$self,$this->objVinculo->idVinculo,
                                            array('form'=>'remocao',
                                                  'conf'=>'sim',
                                                  'event'=>'btnPost:click',
                                                  'dataRemocao' =>$dataRemocao,
                                                  'idSetor'     =>$idNovoSetor,
                                                  'idPublicacao'=>$idPublicacao,
                                                  'idAmbiente'  =>$idnovoambiente) );
		$action_nao = $MIOLO->GetActionURL( $module,$self,$this->objVinculo->idVinculo,
                                            array('form'=>'remocao') );

		$conf = $this->GetFormValue('conf');

		if ($conf == 'sim')
		{
			if($idPublicacao)
			{
				try
				{
					$this->objVinculo->validaRemocao($dataRemocao);
					$this->objVinculo->remove($dataRemocao,$idPublicacao,$idNovoSetor,$idnovoambiente);
					$go = $this->manager->getActionURL('rh','main:vinculo:remocao',$this->objVinculo->idVinculo);
					$MIOLO->Information('Remoção efetuada com sucesso!',$go);
				}
				catch ( ESimpleRnException $e )
				{	
					$this->AddError($e->getMessage());
				}
			}
			else
			{
				$this->addError('Favor, informe a publicação');
			}
		}
		else
		{
			$MIOLO->Question("Tem certeza que deseja aplicar esta remoção?",$action_sim,$action_nao);	   	
		}		
		
/*		
		try
		{
			$this->objVinculo->validaRemocao($dataRemocao);
			$this->objVinculo->remove($dataRemocao,$idPublicacao,$idNovoSetor);
		    $go = $this->manager->getActionURL('rh','main:vinculo:remocao',$this->objVinculo->idVinculo);
  	    	$this->manager->information('Remoção efetuada com sucesso!', $go );
		}
		catch ( ESimpleRnException $e )
		{
			$this->AddError($e->getMessage());
		}
*/		

	}
}	
?>
