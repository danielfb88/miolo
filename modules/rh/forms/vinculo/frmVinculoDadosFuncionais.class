<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class frmVinculoDadosFuncionais extends Form
{
    /**
     * Objeto Vinculo
     * @access protected
     * @var BusinessRhVinculo
     */
    protected $objVinculo;
    protected $objProvimento;


    function __construct($objVinculo)
    {
        $this->objVinculo = $objVinculo;
        parent::__construct('Dados Funcionais');
        $this->defaultButton = FALSE;
    }


    function CreateFields()
    {
        global $MIOLO;
       
        $perms = $MIOLO->getPerms();
        $tabelaGeral = $MIOLO->GetBusiness('common','tabelageral');
        $query = $tabelaGeral->ListByTabela('RH_REGIMEJUR');

        //funcionario
        $d1 = new MHContainer('',
        array(
                new MLabel('Escolaridade: '),
                 new MTextLabel('escolaridade','','Escolaridade','7'),
            ));
        $d2 = new MHContainer('',        
              array(
                new MLabel('Titulação: '),
                   new MTextLabel('titulacao','','Titulação','15'),
            ));

        $spacer = new MSpacer('5px');
        $dadosFunc = new MBaseGroup('dFunc','Dados do Funcionário',array($spacer,$d1,$d2),'vertical','css');

        //vinculo
        $dados1 = new MHContainer('',
        array(
                new MLabel('Matrícula: '),
                 new MTextLabel('idVinculo','','Id Vínculo','7'),
                 new MLabel('     DV: '),
                new MTextLabel('dvIdVinculo','','DV','1'),
                new MLabel('     Data da Posse: '),
                new MTextLabel('dataPosse','','Data posse','15'),
                new MLabel('     Data Exercício: '),
                new MTextLabel('dataExercicio','','Data exercício  ','15'),
            ));
        $dados2 = new MHContainer('',        
              array(
                new MLabel('Data concurso: '),
                   new MTextLabel('dataConcurso','','Data concurso','15'),
                new MLabel('     Data fim contrato: '),
                   new MTextLabel('dataFimContrato','','Data fim contrato','15'),
                new MLabel('     Classificação Concurso: '),
                new MTextLabel('classificacaoConcurso','','Classificação concurso','3')
            ));

        $spacer = new MSpacer('5px');
        $dadosVinculo = new MBaseGroup('dVinculo','Dados do Vínculo',array($spacer,$dados1,$dados2),'vertical','css');

        $this->objVinculo->getProrrogacoesContrato();
        if ( count($this->objVinculo->prorrogacoesContrato) > 0 )
        {
            //possui prorrogações contrato
            foreach ( $this->objVinculo->prorrogacoesContrato as $contrato )
            {
                $infos[] = new MHContainer('',
                    array(
                    new MLabel('Prorrogado até: '),
                    new MTextLabel('',$contrato->dataFim,'Data Fim','7')
                ));
                $infos[] = new MHContainer('',
                    array(
                    new MLabel('Observação: '),
                    new MTextLabel('',$contrato->obs,'Data Fim','7')
                ));
            }
            $dadosContrato = new MBaseGroup('contrato','Prorrogações de contrato temporário',$infos,'vertical','css');
        }

        //provimento
        $this->objVinculo->getProvimentos();
        $this->objProvimento = $this->objVinculo->getProvimentoAtual();
        $title = 'Dados do Provimento Atual';
        if ( ! $this->objProvimento->dataInicio )
        {
            $this->objProvimento = $this->objVinculo->getUltimoProvimento();
            $title = 'Dados do Último Provimento';
        }
        if ( $this->objProvimento->dataInicio )
        {
            $dados3 = new MHContainer('',
                array(
                    new MTextLabel('lbocorrencia','Ocorrência: '),
                    new MTextLabel('ocorrencia')
                )
            );
        	
        	$dados4 = new MHContainer('',
            array(
                new MTextLabel('lbdataInicio','Data da Ocorrência: '),
                new MTextLabel('dataInicio'),

                //new MLabel('     Data Fim: '),
                //new MTextLabel('dataFim')
                )
            );

            $dados5 = new  MHContainer('',
                array(
                    new MTextLabel('lbexcedeLotacao','Excede Lotação: '),
                    new MTextLabel('excedeLotacao'),
        
                    new MLabel('     Regime Jurídico: '),
                    new MTextLabel('regimeJuridico')
                )
            );

            $dados6 = new MHContainer('',
                array(
                    new MTextLabel('lbclasseRef','Classe / Nível Padrão: '),
                    new MTextLabel('classeRef'),
        
                    new MLabel('     Jornada: '),
                    new MTextLabel('jornada')
                )
            );

            $dados7 = new MHContainer('',
                array(
                    new MTextLabel('lbsituacao','Situação: '),
                    new MTextLabel('situacao')
                )
            );

            $dados8 = new MHContainer('',
                array(
                    new MTextLabel('lbcargo','Cargo: '),
                    new MTextLabel('cargo')
                )
            );

            $dados9 = new MHContainer('',
                array(
                    new MTextLabel('lbsetor','Setor: '),
                    new MTextLabel('setor')
                )
            );

            $dados10 = new MHContainer('',
                array(
                    new MTextLabel('lbambiente','Ambiente Organizacional: '),
                    new MTextLabel('ambiente')
                )
            );            

            $dados11 = new MHContainer('',
                array(
                    new MTextLabel('lbpublicacao','Publicação: '),
                    new MTextLabel('publicacao')
                )
            );

            $dadosProvimento = new MBaseGroup('dProvimento',$title,
                array($spacer,$dados3,$dados4,$dados5,$dados6,$dados7,$dados8,$dados9,$dados10,$dados11),'vertical','css');
        }
        $fields[] = $dadosFunc;
        $fields[] = $dadosVinculo;
        if ( $dadosContrato )
        {
            $fields[] = $dadosContrato;
        }
        if ( $dadosProvimento )
        {
            $fields[] = $dadosProvimento; 
        }
        $fields[] = $spacer;
        
        $this->SetFields($fields);

        $buttons = array(
            new MButton('btnMudanca','Cadastrar Mudança de Cargo',$this->manager->getActionUrl('rh','main:vinculo',$this->objVinculo->idVinculo,array('form'=>'mudancaCargo'))),
	    new MButton('btnEditarVinculo','Editar Dados do Vínculo',$this->manager->getActionUrl('rh','main:vinculo',$this->objVinculo->idVinculo,array('form'=>'editVinculo'))),
        );

        $this->setButtons($buttons);
        $this->setButtonAttr('btnMudanca','visible',$perms->checkAccess('rh_mudanca_jornada',A_ACCESS));

        $this->SetData();
        $this->SetBackgroundColor('#FFF');
    }


    function SetData()
    {
        global $MIOLO;

        $data = $this->objVinculo;

        $data->getFuncionario();
        $data->funcionario->getTitulacoes();

        $arrayTitulacoes = array();

        if (is_array($data->funcionario->titulacao))
        {
            foreach ($data->funcionario->titulacao as $key => $value)            
                array_push($arrayTitulacoes, $value->idTitulacao);            
        
            rsort($arrayTitulacoes);
        }

        //echo"<pre>";var_dump("codigo da escolaridade",$data->funcionario->escolaridade);echo"</pre>";
        //echo"<pre>"; var_dump("codigo da titulacao",$arrayTitulacoes[0]); echo"</pre>";

        $tabelaGeral2 = $MIOLO->GetBusiness('common','tabelageral');
        $escolaridade = $tabelaGeral2->GetByItem('RH_ESCOLARIDADE',$data->funcionario->escolaridade);        

        $tabelaGeral3 = $MIOLO->GetBusiness('common','tabelageral');
        $titulacao = $tabelaGeral3->GetByItem('RH_TITULACAO',$arrayTitulacoes[0]);
        /*        
        $tG = $MIOLO->GetBusiness('common','tabelageral');
        $escolaridade = $tG->GetByItem('RH_ESCOLARIDADE',$data->funcionario->escolaridade);        
        $titulacao = $tG->GetByItem('RH_TITULACAO',$arrayTitulacoes[0]);
        echo"<pre>"; var_dump($escolaridade); echo"</pre>";
        */

        $this->SetFieldValue('escolaridade',($escolaridade->item2) ? $escolaridade->item2 : ' - ' );
        $this->SetFieldValue('titulacao',($titulacao->item2) ? $titulacao->item2 : ' - ' );

        $this->SetFieldValue('idVinculo',($data->idVinculo) ? $data->idVinculo : ' - ' );
        $this->SetFieldValue('dvIdVinculo', $data->dvIdVinculo);
        $this->SetFieldValue('dataPosse',($data->dataPosse) ? $data->dataPosse : ' - ' );
        $this->SetFieldValue('dataExercicio',($data->dataExercicio) ? $data->dataExercicio : ' - ' );
        $this->SetFieldValue('dataConcurso', ($data->dataConcurso) ? $data->dataConcurso : ' - ' );
        $this->SetFieldValue('dataFimContrato', ($data->dataFimContrato) ? $data->dataFimContrato : ' - ' );
        $this->SetFieldValue('classificacaoConcurso', ($data->classificacaoConcurso) ? $data->classificacaoConcurso : ' - ' );

        if ( $this->objProvimento->dataInicio )
        {
            $provimento = $this->objProvimento;
            $provimento->retrieveAssociation('publicacao');
            $provimento->retrieveAssociation('setor');
            $provimento->retrieveAssociation('ambiente');
            $provimento->retrieveAssociation('ocorrencia');
            $regimeJuridico = $this->manager->GetBusiness('common','tabelageral');
            $regimeJuridico->GetByItem('RH_REGIMEJUR', $provimento->regimeJuridico);
            $data = $provimento->GetDados();
            $this->SetFieldValue('dataInicio',$provimento->dataInicio);
            //$this->SetFieldValue('dataFim',$provimento->dataFim);
            $this->SetFieldValue('excedeLotacao',($provimento->excedeLotacao == 'S' ? 'Sim' : 'Não'));
            $this->SetFieldValue('regimeJuridico', $regimeJuridico->item1 . ' - ' . $regimeJuridico->item2);
            $this->SetFieldValue('classeRef', $data[0] . '/'. $data[1]);
            $this->SetFieldValue('jornada',$data[2]);
            $this->SetFieldValue('situacao',$data[3]);
            $this->SetFieldValue('setor',$provimento->setor->sigla . ' - ' . $provimento->setor->nome);
            $this->SetFieldValue('ambiente',strtoupper($provimento->ambiente->descricao));
            $this->SetFieldValue('cargo',$data[5]);
            $this->SetFieldValue('ocorrencia',$provimento->ocorrencia->descricao);
            if ($this->objProvimento->publicacao)
            {
                $this->SetFieldValue('publicacao',$provimento->publicacao->diplomaLegal->descricao.' '.
                                            $provimento->publicacao->numero.' de '.
                                            $provimento->publicacao->data.' - '.
                                            $provimento->publicacao->autoridade);
            }
        }
            $this->lbdataInicio   ->setWidth('140');
            $this->lbexcedeLotacao->setWidth('140');
            $this->lbclasseRef    ->setWidth('140');
            $this->lbsituacao     ->setWidth('140');
            $this->lbcargo        ->setWidth('140');
            $this->lbsetor        ->setWidth('140');
            $this->lbambiente     ->setWidth('140');
            $this->lbocorrencia   ->setWidth('140');
            $this->lbpublicacao   ->setWidth('140');

            $this->lbdataInicio   ->setBold(false);
            $this->lbexcedeLotacao->setBold(false);
            $this->lbclasseRef    ->setBold(false);
            $this->lbsituacao     ->setBold(false);
            $this->lbcargo        ->setBold(false);
            $this->lbsetor        ->setBold(false);
            $this->lbambiente     ->setBold(false);
            $this->lbocorrencia   ->setBold(false);
            $this->lbpublicacao   ->setBold(false);
    }


}
?>
