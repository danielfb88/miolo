<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class frmVinculoHistorico extends MForm
{
	protected $objHistorico;
    protected $objVinculo;

    function __construct($values)
    {
		$this->objHistorico = $values[0];
        $this->objVinculo   = $values[1];
        parent::__construct('Histórico');
        $this->EventHandler();
    }

    function CreateFields()
    {
		$persistente = $this->objHistorico->isPersistent();

		$fields = array(
            new MCalendarField('dataInicio',date('d/m/Y'),'Data de início','10','DD/MM/YYYY'),
            new MCalendarField('dataFim','','Data final','10','DD/MM/YYYY'),
			new MultiLineField('obs','','Observação',5000,10,90,'Máx. 5000'),
        );
        $this->setFields($fields);
		
		$buttons = array(
            new MButton('btnPost','Enviar'),
			//new MButton('btnSalvar','Salvar'),
			new MButton('btnExcluir','Excluir')
            );
		$this->setButtons($buttons);

		//$this->setButtonAttr('btnSalvar','visible',$persistente);  // edição
        $this->setButtonAttr('btnExcluir','visible',$persistente); // exclusão

		$validators = array(
			new MDateDMYValidator('dataInicio','','required'),
			new MRequiredValidator('obs'),
		);
		$this->SetValidators($validators);

        if ( $persistente )
        {
            $this->setData();
        }
        
    }


	function SetData()
	{
		$this->SetFieldValue('dataInicio',$this->objHistorico->dataInicio);
		$this->SetFieldValue('dataFim',$this->objHistorico->dataFim);
		$this->SetFieldValue('obs',$this->objHistorico->obs);
	}


    function btnPost_click()
    {
		$this->objHistorico->obs		= $this->GetFormValue('obs');
		$this->objHistorico->dataInicio	= $this->GetFormValue('dataInicio');
		$this->objHistorico->dataFim	= $this->GetFormValue('dataFim');
		$dataInicio = $this->getFormValue('dataInicio');
		$dataFim = $this->getFormValue('dataFim');
		$k = new MKrono();
		$obs = strlen(trim($this->getFormValue('obs')));
		if ( $k->compareDate($dataInicio,">",$dataFim) )
		{
			$this->addError("Data início não pode ser maior que a Data Fim.");
            	}
		if ( strlen(trim($this->objHistorico->obs)) < 3)
		{
		    	$this->addError('O campo observação deve conter no mínimo 3 caracteres.');		    
		}
		if (!$this->hasErrors())
		{

			if ( $this->objHistorico->isPersistent() )
			{
				$op = OP_UPD;
			}
			else
			{
				$op = OP_INS;
			}

			try
			{
				$this->objHistorico->idVinculo = trim($this->objVinculo->idVinculo);
				$this->objHistorico->save();
				$go = $this->manager->getActionURL('rh','main:vinculo',$this->objHistorico->idVinculo,array('form'=>'historicos'));
				$this->objHistorico->log($op,"vinculo: ".$this->objHistorico->idVinculo." Início: ".$this->objHistorico->dataInicio." Fim: ".$this->objHistorico->dataFim." idhistorico: ".$this->objHistorico->idHistorico." OBS.: ".substr($this->objHistorico->obs,0,50));
				$this->manager->information('Dados do histórico gravados com sucesso!',$go);
			}
			catch (Exception $e)
			{
				$this->AddError($e->GetMessage());
			} 
		}
    }
   

	function btnExcluir_click()
	{
		$action_sim = $this->manager->getActionURL('rh','main:vinculo',$this->objHistorico->idVinculo,array('form'=>'historicos','id'=>$this->objHistorico->idHistorico,'conf'=>'sim','event'=>'btnExcluir:click'));
		$action_nao = $this->manager->getActionURL('rh','main:vinculo',$this->objHistorico->idVinculo,array('form'=>'historicos','id'=>$this->objHistorico->idHistorico));

		$conf = $this->GetFormValue('conf');

		if ($conf == 'sim')
		{
			try
			{
				$this->objHistorico->delete();
                $this->objHistorico->log(OP_DEL,"Vínculo: ".$this->objHistorico->idVinculo." Início: ".$this->objHistorico->dataInicio." Fim: ".$this->objHistorico->dataFim." Id: ".$this->objHistorico->idHistorico." OBS.: ".substr($this->objHistorico->obs,0,50));
				$this->manager->information('Histórico excluído com sucesso',$this->manager->GetActionURL('rh','main:vinculo',$this->objHistorico->idVinculo,array('form'=>'historicos')));
			}
			catch ( Exception $e )
			{
				$this->manager->error("Informe o seguinte erro à equipe do CGCO: ".$e->getMessage());
			}
					
	   }
	   else
	   {
		   $this->manager->question("Tem certeza que deseja excluir o histórico '<u>".substr($this->objHistorico->obs,0,50)."</u>...', com data início em:".$this->objHistorico->dataInicio."?",$action_sim,$action_nao);
		}
	}

}
?>
