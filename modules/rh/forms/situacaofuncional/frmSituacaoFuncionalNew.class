<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class frmSituacaoFuncionalNew extends Form
{

    function __construct()
    {
        global $MIOLO, $module;

        $this->Form('Incluir Nova Situação');
        $this->SetClose($MIOLO->GetActionURL($module,'main:situacaofuncional:find'));
        $this->EventHandler();
    }

    function CreateFields()
    {
        global $MIOLO, $module;
	   
        $fldidsituacao     = new TextField('idSituacao','','Código','4');
        $flddescricao      = new TextField('descricao','','Descrição','40');
        $fldregimejuridico = new Selection('regimeJuridico','','Regime Jurídico');

		$fields = array(
            $fldidsituacao,
            $flddescricao,
            array (
                $fldregimejuridico
            ),
        );

        $this->SetFields($fields);

        $fldidsituacao->AddAttribute('maxlength','5');
        $flddescricao->AddAttribute('maxlength','20');

        $tabelaGeral = $MIOLO->GetBusiness('common','tabelageral');
	   	$query = $tabelaGeral->ListByTabela('RH_REGIMEJUR');
        $this->SetFieldAttr('regimeJuridico','options',$query->chunkResult()); 

        $validators = array(
            new RequiredValidator('idSituacao'),
            new RequiredValidator('descricao'),
            
            new IntegerValidator('idSituacao'),
        );
        
        $this->SetValidators($validators);

		$buttons = array(
        	new FormButton('btnNew', 'Incluir Situação Funcional')
        );
		$this->SetButtons($buttons);

    }

	function GetData()
	{
        $data = new FormData();
		$data->idSituacao     = $this->GetFormValue('idSituacao');
		$data->descricao      = substr($this->GetFormValue('descricao'), 0, 20);
		$data->regimeJuridico = $this->GetFormValue('regimeJuridico');
        return $data;
	}

    function btnNew_click()
    {
		global $MIOLO, $page, $module, $action, $item;

      $data = $this->GetData();
		$id = $data->idSituacao;
		
		// Retirando os caracteres especiais. :-)
		$caracteres = array("#","*", "&", "%", "(", ")", "$", "@", "!", "'", "\"", "+", "=", "-", "/", ".", ",", "^", "?", ":", "}", "]", "[", "º","{","|",">","<",";");
		$data->descricao = str_replace($caracteres,"",$data->descricao);
		
		if(is_numeric($id))
		{
	      $situacao = $MIOLO->GetBusiness($module,'situacaofuncional',$id);
	      if ($id <= 0)
			{
				$this->addError('Informe um id valido a Situação Funcional.');
			}
			else if (strlen(trim($id)) < '1')
			{
				$this->addError('Informe o id da Situação Funcional.');
			}
			elseif($situacao->isPersistent())
			{
				$this->addError('Já existe um registro de Situação Funcional com esse ID. Favor digite outro ID.');
			}
			elseif(strlen(trim($data->descricao)) < '5')
			{
				$this->addError('Informe a Descrição da Situação Funcional.');
			}
			else
			{
		        	$situacao->SetData($data);
		        	$situacao->save();
		         $go = $MIOLO->GetActionURL('rh','main:situacaofuncional',$situacao->idSituacao);
			      $MIOLO->Information('Dados da Situação Funcional inseridos com sucesso.', $go );
			}
		}
		else
		{
			$this->addError('Informe o id Situação Funcional no padrão numérico');
		}
 
    }

 }
?>
