<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

MIOLO::Import('modules::rh::forms::pessoa::frmPessoa');

class frmFuncionario extends frmPessoa
{
    protected $funcionario;

    function __construct($objFuncionario)
    {
        $this->funcionario = $objFuncionario;
        parent::__construct($this->funcionario->pessoa);
        $this->SetTitle($this->funcionario->pessoa->nome);
        $this->SetIcon($this->manager->GetUi()->GetImage('rh','funcionario_mini.png'));
    }

    function CreateFields()
    {
         global $MIOLO, $page, $module, $context, $action, $history;

        $funcionario = $this->funcionario;
        Util::SetIfNull($this->oid, $funcionario->idFuncionario);
        parent::CreateFields();

//form
        $ui = $this->manager->GetUI();
        $form = Form::GetFormValue('form');
        switch ($form)
        {
/*            case 'dadosfuncionais' : 
                 $this->_form[0] = $ui->GetForm('rh','frmFuncionarioDados', $funcionario); 
                 break;
*/
            case 'dependentes'     : 
                $funcionario->getDependentes();
                $this->_form[] = $ui->GetGrid('rh','gridDependentes', $funcionario);
                 break;
            case 'titulacoes'     : 
                 $funcionario->getTitulacoes();
                 if (($id = Form::GetFormValue('id')) != NULL)
                 {
                     $titulacao = $funcionario->getTitulacao($id);
                     if ($titulacao != NULL)
                     {
                        $this->_form[] = $ui->GetForm('rh','frmFuncionarioTitulacao', $titulacao,'funcionario'); 
                        $this->page->SetAction($this->manager->history->Top('action'));
                     }
                 }
                 array_unshift($this->_form, $ui->GetGrid('rh','gridTitulacoes', $funcionario)); 
                 break;

            case 'formacoes'     : 
                 $funcionario->getFormacoes();
                 if (($id = Form::GetFormValue('id')) != NULL)
                 {
                     $formacao = $funcionario->getFormacao($id);
                     if ($formacao != NULL)
                     {
                        $this->_form[] = $ui->GetForm('rh','frmFuncionarioFormacao', $formacao,'funcionario'); 
                        $this->page->SetAction($this->manager->history->Top('action'));
                     }
                 }
                 array_unshift($this->_form, $ui->GetGrid('rh','gridFormacoes', $funcionario)); 
                 break;
                 
             case 'forcarescolaridade'     : 
                 $this->_form[] = $ui->GetForm('rh','frmFuncionarioForcarEscolaridade', $this->funcionario,'funcionario'); 
                 $this->page->SetAction($this->manager->history->Top('action'));
                 break;

            case 'vinculos'     : 
                 $funcionario->getVinculos();
                 if (($id = Form::GetFormValue('id')) != NULL)
                 {
                     $vinculo = $funcionario->getVinculo($id);
                     if ($vinculo != NULL)
                     {
                        $this->_form[] = $ui->GetForm('rh','frmFuncionarioVinculo', $vinculo,'funcionario'); 
                        $this->page->SetAction($this->manager->history->Top('action'));
                     }
                 }
                 array_unshift($this->_form, $ui->GetGrid('rh','gridVinculos', $funcionario)); 
                 break;
                
                 
            case 'capacitacoes'     :
                 $funcionario->getCapacitacoes();

                 if (($id = Form::GetFormValue('id')) != NULL)
                 {	
                     $capacitacao = $funcionario->getCapacitacao($id);
                     if ($capacitacao != NULL)
                     {	
                     	
                        $this->_form[] = $ui->GetForm('rh','frmFuncionarioCapacitacao', $capacitacao,'funcionario'); 
                        $this->page->SetAction($this->manager->history->Top('action'));
                     }
                 }
                 array_unshift($this->_form, $ui->GetGrid('rh','gridCapacitacoes', $funcionario)); 
                 break;  
				 
// controle de cursos que podem servir para progressão por 
            case 'capacitacoesexternas':

                 $funcionario->getCapacitacoes();

                 if (($id = Form::GetFormValue('id')) != NULL)
                 {	
                     $capacitacao = $funcionario->getCapacitacao($id);
                     if ($capacitacao != NULL)
                     {	
                        $this->_form[] = $ui->GetForm('rh','frmFuncionarioCapacitacaoExterna',$capacitacao,'funcionario');
                        $this->page->SetAction($this->manager->history->Top('action'));
                     }
                 }
                 array_unshift($this->_form,$ui->GetGrid('rh','gridCapacitacoesExternas',$funcionario)); 
                 break;  
                 

        }
        if ($this->_form[0])
        {
            $this->_form[0]->SetClose($this->manager->GetActionURL('rh','main:funcionario', $funcionario->idFuncionario));
        }

//panel
        $action = $this->manager->context->action;
        $panel = $this->_panel[0];
        $panel->SetIconType('small');
        $panel->SetTitle('Id. Única: ' . $funcionario->idFuncionario);
/*       
        $panel->InsertUserAction(0,'rh_info',A_EXECUTE,'Dados Funcionais',
            $ui->GetImage('','default.png'),'rh',$action, $this->oid, array("form"=>"dadosfuncionais"));
*/
        $panel->AddUserAction('rh_info',A_EXECUTE,'Dependentes',
            $ui->GetImage('rh','dependente.png'), 'rh',$action,$this->oid, array("form"=>"dependentes"));
            
        $panel->AddUserAction('rh_info',A_EXECUTE,'Escolaridade',
            $ui->GetImage('rh','escolaridade_mini.png'),'rh',$action, $this->oid, array("form"=>"formacoes"));

        $panel->AddUserAction('rh_info',A_EXECUTE,'Pós-Graduação',
            $ui->GetImage('rh','posgraduacao_mini.png'),'rh',$action, $this->oid, array("form"=>"titulacoes"));
            
        $panel->InsertUserAction(0,'rh_info',A_EXECUTE,'Vínculos',
            $ui->GetImage('rh','vinculo_mini.png'),'rh',$action, $this->oid, array("form"=>"vinculos"));
            
         $panel->AddUserAction('rh_info',A_EXECUTE,'Capacitações',
            $ui->GetImage('rh','capacitacao_mini.png'),'rh',$action, $this->oid, array("form"=>"capacitacoes"));

		//$vinculoAtivo = $this->funcionario->GetVinculoAtivo();
		//if (isset($vinculoAtivo)) 
		{
			//if ($vinculoAtivo->isAtivo())
			{
				//$panel->AddUserAction('rh_info',A_EXECUTE,'Capacitações Externas',$ui->GetImage('rh','capacitacao_mini.png'),'rh',$action, $this->oid, array("form"=>"capacitacoesexternas"));
			}
		}
			
    }
}
?>
