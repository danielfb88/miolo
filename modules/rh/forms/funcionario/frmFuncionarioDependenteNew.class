<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

MIOLO::Import('modules::common::controls::selectionsexo');

class frmFuncionarioDependenteNew extends Form
{
    var $objFuncionario;

    function __construct($objFuncionario)
    {
    
        $this->objFuncionario = $objFuncionario;
        $this->Form('Incluir Novo Dependente');
        $this->EventHandler();
    }

    function CreateFields()
    {
	    $tabelaGeral = $this->manager->GetBusiness('common','tabelageral');
	    $query = $tabelaGeral->ListByTabela('RH_PARENTESCO','item2');
       
        $fields = array(
            new MText('','Para o servidor: ' . $this->objFuncionario->pessoa->nome.'<br>'),
            new MTextField('nome','','Nome',55),
            new MCalendarField('datanasc','','Data de Nascimento'),
            new SelectionSexo('sexo','','Sexo'),
            new MTextField('nomeMae','','Nome da mãe',55), 
            new MTextField('nomePai','','Nome do pai',55),
            new MSelection('parentesco','','Parentesco',$query->chunkResult()),
            new MHiddenField('idpessoa'),
        );
            
        $validators = array(
            new MRequiredValidator('nome'),
            new MRequiredValidator('datanasc'),
        );
            
        $buttons = array(
            new MButton('btnPost','Enviar'),
            new MButton('btnNew', 'Incluir Dependente'),
        );
        
		$this->SetFields($fields);
		$this->SetValidators($validators);
        $this->SetButtons($buttons);

        $this->setFieldAttr('sexo','visible',FALSE);
        $this->setFieldAttr('parentesco','visible',FALSE);
        $this->setFieldAttr('nomeMae','visible',FALSE);
        $this->setFieldAttr('nomePai','visible',FALSE);
        
        $this->setButtonAttr('btnNew','visible',FALSE);
    }
    
    function btnPost_click()
    {
        $data = $this->getData();
        $pessoa = $this->manager->GetBusiness('common','pessoa');
        $pessoa = $pessoa->getByNomeDataNasc($data->nome,$data->datanasc);
	$nome = strlen(trim($data->nome));
	if ($nome < '10')
	{
		$this->addError("Digite o nome completo do dependente corretamente");
	}
	elseif( date('Ymd') < $this->invertData(Form::GetFormValue('datanasc')) )
	{		
		$this->AddError('A data de nascimento informada é superior à data atual.');
	}
	else
	{
	        if ( $pessoa->idpessoa )
	        {
	            $this->addInfo("Uma pessoa com esse nome e data de nascimento foi encontrada em nosso banco de dados. Confira se as informações estão corretas.<br>Caso esteja, informe o 	parentesco e clique no botão Incluir Dependente.");
	  	    $this->setFieldValue('nome',trim($pessoa->nome));
	            $this->setFieldValue('datanasc',$pessoa->datanasc);
	            $this->setFieldValue('idpessoa',$pessoa->idpessoa);
            
	            $this->setFieldValue('nomeMae',$pessoa->nomemae);
	            $this->setFieldValue('nomePai',$pessoa->nomepai);
	            $this->setFieldAttr('nomeMae','visible',TRUE);
	            $this->setFieldAttr('nomePai','visible',TRUE);
	            $this->setFieldAttr('nomeMae','readonly',TRUE);
	            $this->setFieldAttr('nomePai','readonly',TRUE);
	        }
	        else
	        {
	            $this->setFieldAttr('sexo','visible',TRUE);
		    $this->setFieldValue('nome',trim($data->nome));
	        }
	        $this->setFieldAttr('nome','readonly',TRUE);
	        $this->setFieldAttr('datanasc','readonly',TRUE);
	        
	        $this->setFieldAttr('parentesco','visible',TRUE);
	
	        $this->setButtonAttr('btnPost','visible',FALSE);
	        $this->setButtonAttr('btnNew','visible',TRUE);
	}
    }
    function btnNew_click()
    {   
        $parentesco = $this->getFormValue('parentesco');
        $sexo = $this->getFormValue('sexo');
	if(!$sexo)
	{
		$this->addError("Informe o sexo do dependente");
		$this->btnPost_click();
	}
        elseif ( $parentesco )
        {
            $dependente = $this->manager->GetBusiness('rh','dependente');
            $dependente->idPessoa = Form::GetFormValue('idpessoa');
            $errPessoa = FALSE;
            $msg = "Dependente incluído com sucesso!";
            
            //Verifica se dependente existe e as dependências estão finalizadas
            if($dependente->idPessoa)
            {
            	$dependenteFim = $this->manager->GetBusiness('rh','dependente');
            	$dependenteFim = $dependente->GetByPessoa($dependente->idPessoa);
            }
            if($dependenteFim)
            {
	            $depFim = $dependenteFim->VerifyDependenciasFim();
            }
            
            if ( ! $dependente->idPessoa)
            {
                $data = $this->getData();
                $pessoa = $this->manager->GetBusiness('common','pessoa');
                try 
                {
                    $pessoa->createNew($data,FALSE);
                    $dependente->idPessoa = $pessoa->idpessoa;
                }
                catch ( Exception $e )
                {
                    $this->addError($e->getMessage());
                    $errPessoa = TRUE;
                }
            }
            
            if ( ! $errPessoa )
            {
                try
                {
                    $dependente->idFuncionario = $this->objFuncionario->idFuncionario;
                    $dependente->parentesco = $this->getFormValue('parentesco');
									  $dependente->save($depFim);
                    
                    $go = $this->manager->GetActionURL('rh','main:funcionario',$this->objFuncionario->idFuncionario,array("form"=>"dependentes","id"=>$dependente->idDependente));
                    $this->manager->information($msg,$go);
                }
                catch ( Exception $e )
                {
                    $this->addError($e->getMessage());
                    $this->setFieldValue('idpessoa','');
                }
            }
        }
        else
        {
            $this->addError('Informe o parentesco.');
            $this->btnPost_click();
        }
    }
    
    function invertData($datainv)
	{//recebe a data e o separador

		$ano=substr("$datainv",6, 4);
		$mes=substr("$datainv",3, 2);
		$dia=substr("$datainv",0, 2);
		$datainv="$ano$mes$dia";

		return $datainv;
	}  

 }
?>
