<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class frmProadesReuniao extends MCompoundForm
{
	protected $reuniao;
    protected $proades;

	function __construct($reuniao)
	{
        $MIOLO = MIOLO::getInstance();
		$this->reuniao = $reuniao;
		$this->proades = $MIOLO->getBusiness('rh','proades');
        $this->proades->getById($this->reuniao->idProades);
        $reuniao->setData($data);
        $ordem = array(
                1=>"Primeira",
                2=>"Segunda",
                3=>"Terceira"
            );
		parent::__construct($ordem[$reuniao->numero]." Reuni&atilde;o");
	}

	function createFields()
	{
		$ui = $this->manager->getUI();
		$form = MForm::getFormValue('form');
        
        
		if ($this->_form[0])
		{
			$this->_form[0]->SetClose($this->manager->GetActionURL('rh','main:proades',$this->proades->idProades));
		}
        
		$action = $this->manager->getContext()->action;
		$this->_panel[0] = $panel = new MActionPanel('pn1Compound','Ata de Reuni&atilde;o','',false);
        $panel->SetIconType('small');

		$panel->AddAction('Assuntos Tratados',$ui->GetImage('common','edit.png'),'rh',$action,$this->reuniao->idReuniao,array("form"=>"assuntos"));
 		$panel->addaction('Resultados parciais',$ui->getimage('common','edit.png'),'rh',$action,$this->reuniao->idReuniao,array("form"=>"resultados"));
		$panel->AddAction('Fatores Dificultadores',$ui->GetImage('common','edit.png'),'rh',$action,$this->reuniao->idReuniao,array("form"=>"fatores"));
		$panel->AddAction('Encaminhamentos Dados',$ui->GetImage('common','edit.png'),'rh',$action,$this->reuniao->idReuniao,array("form"=>"encaminhamentos"));
		$panel->AddAction('Inclus&atilde;o de Docentes',$ui->GetImage('common','edit.png'),'rh',$action,$this->reuniao->idReuniao,array("form"=>"presentes"));
		$panel->AddAction('Ausentes',$ui->GetImage('common','edit.png'),'rh',$action,$this->reuniao->idReuniao,array("form"=>"ausentes"));
		$panel->AddAction('Novas Metas/Repactua&ccedil;&atilde;o',$ui->GetImage('common','edit.png'),'rh',$action,$this->reuniao->idReuniao,array("form"=>"metas"));
		$panel->AddAction('Equipe de Trabalho',$ui->GetImage('common','edit.png'),'rh',$action,$this->reuniao->idReuniao,array("form"=>"equipes"));
		$panel->AddAction('Anexos',$ui->GetImage('common','edit.png'),'rh',$action,$this->reuniao->idReuniao,array("form"=>"anexos"));
		$panel->AddAction('Imprimir',$ui->GetImage('rh','relatorio2_mini.png'),'rh',$action,$this->reuniao->idReuniao,array("form"=>"imprimir"));
		//$panel->AddAction('Definir tipo da meta',$ui->GetImage('rh','edit.png'),'rh',$action,$this->reuniao->idReuniao,array("form"=>"tipometa"));
		
        
        //forms
		switch ($form)
		{
			case 'assuntos':
				    $this->_form[0] = $ui->GetForm('rh','frmProadesReuniaoAssuntos',$this->reuniao,'proades');
				    $this->_form[1] = $ui->GetGrid('rh','gridProadesReuniaoAssuntos',$this->reuniao);
            break;

			case 'encaminhamentos':
				    $this->_form[0] = $ui->GetForm('rh','frmProadesReuniaoEncaminhamentos',$this->reuniao,'proades');
				    $this->_form[1] = $ui->GetGrid('rh','gridProadesReuniaoEncaminhamentos',$this->reuniao);
            break;

			case 'decisoes':
				    $this->_form[0] = $ui->GetForm('rh','frmProadesReuniaoDecisoes',$this->reuniao,'proades');
				    $this->_form[1] = $ui->GetGrid('rh','gridProadesReuniaoDecisoes',$this->reuniao);
            break;

			case 'resultados':
				    $this->_form[0] = $ui->GetForm('rh','frmProadesReuniaoResultados',$this->reuniao,'proades');
				    $this->_form[1] = $ui->GetGrid('rh','gridProadesReuniaoResultados',$this->reuniao);
            break;

			case 'fatores':
				    $this->_form[0] = $ui->GetForm('rh','frmProadesReuniaoFatores',$this->reuniao,'proades');
				    $this->_form[1] = $ui->GetGrid('rh','gridProadesReuniaoFatores',$this->reuniao);
            break;

			case 'presentes':
				    $this->_form[0] = $ui->GetForm('rh','frmProadesReuniaoPresentes',$this->reuniao,'proades');
				    $this->_form[1] = $ui->GetGrid('rh','gridProadesReuniaoPresentes',$this->reuniao);
            break;

			case 'ausentes':
				    $this->_form[0] = $ui->GetForm('rh','frmProadesReuniaoAusentes',$this->reuniao,'proades');
				    $this->_form[1] = $ui->GetGrid('rh','gridProadesReuniaoAusentes',$this->reuniao);
            break;
			case 'anexos':
				    $this->_form[0] = $ui->GetForm('rh','frmProadesReuniaoAnexos',$this->reuniao,'proades');
				    $this->_form[1] = $ui->GetGrid('rh','gridProadesReuniaoAnexos',$this->reuniao);
            break;

			case 'imprimir':
				    $this->_form[0] = $ui->GetForm('rh','frmProadesReuniaoImprimir',$this->reuniao,'proades');
            break;
            case 'metas':
                $this->reuniao->retrieveAssociation('proades');
                $this->_form[0] = $ui->GetForm('rh','frmProadesNovasMetas',$this->reuniao,'proades');
                $this->_form[1] = $ui->GetGrid('rh','gridProadesNovasMetas',$this->reuniao);
            break;
            case 'tipometa':
                $this->reuniao->retrieveAssociation('proades');
                $this->_form[0] = $ui->GetForm('rh','frmProadesNovasMetas',$this->reuniao,'proades');
                $this->_form[1] = $ui->GetGrid('rh','gridProadesNovasMetas',$this->reuniao);
            case 'equipes':
                $this->reuniao->retrieveAssociation('proades');
                $this->_form[0] = $ui->GetForm('rh','frmProadesEquipesSegundaFase',$this->reuniao,'proades');
                $this->_form[1] = $ui->GetGrid('rh','gridProadesEquipesSegundaFase',$this->reuniao);
                break;
            case 'membros':
                $this->reuniao->retrieveAssociation('proades');
                $this->_form[0] = $ui->GetForm('rh','frmProadesMembrosSegundaFase',$this->reuniao,'proades');
                $this->_form[1] = $ui->GetGrid('rh','gridProadesMembrosPorEquipeSegundaFase',$this->reuniao);
                break;
            default:
                $this->_form[0] = $ui->getForm('rh','frmProadesReuniaoTextoAta','','proades');
		}

		// info

        $setor = $this->manager->getBusiness('common','setor');
        $setor->getById($this->proades->idSetor);

        $vinculo = $this->manager->getBusiness('rh','vinculo');
        $vinculo->getById($this->proades->idDirigente);
        $vinculo->retrieveAssociation('funcionario');
        $vinculo->funcionario->retrieveAssociation('pessoa');

        $this->_info[0] = new MLink('lnkVoltar','',$this->manager->getActionUrl('rh','proades:main',$this->proades->idProades,array( 'form'=>'fase2')),'Voltar para a tela principal');
		$this->_info[1] = new MTextLabel('txtUnidade',$setor->nome,'Unidade');
		$this->_info[2] = new MTextLabel('txtDirigente',$vinculo->funcionario->pessoa->nome,'Dirigente');
		$this->_info[3] = new MTextLabel('txtData',$this->reuniao->data,'Data da reuni&atilde;o');
		$this->_info[4] = new MTextLabel('txtHorarioInicio',$this->reuniao->inicio.":00",'Hor&aacute;rio Inicial');
		$this->_info[5] = new MTextLabel('txtHorarioFim',$this->reuniao->termino.":00",'Hor&aacute;rio Final');
	}
}
?>
