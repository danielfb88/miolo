<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class frmProadesEquipes extends MForm
{
    private $proades;
    
	function __construct($proades)
	{
        $this->proades = $proades; 
        
		parent::__construct('Equipes de Trabalho da Unidade');
		$this->EventHandler();
	}
    
	function CreateFields()
	{
        //$grid = $this->manager->getUI()->getGrid('rh','gridProadesEquipes',$this->proades); 
        $fields = array(
                new MLabel('Informe aqui o nome das equipes de trabalho da unidade.'),
                new MTextField('nome','','Nome',30),
                new MHiddenField('categoria',3),
                new MLabel('Cadastre os membros das equipes clicando no nome da equipe na listagem abaixo.<br>S&oacute; &eacute; poss&iacute;vel excluir uma equipe que n&atilde;o tenha nenhum membro vinculado a ela.'),
                new MHiddenField('idEquipe')

        );
        
        $this->SetFields($fields);		

        $buttons = array(
            new MButton('btnSalvar','Enviar')
        );

        $this->setButtons($buttons);
        $this->setButtonAccess();
	}

	function btnSalvar_click()
	{
		$data = $this->GetData();
		try
		{
            $equipe = $this->manager->getBusiness('rh','equipe');
            if ( $data->idEquipe )
            {
                $equipe->getById($data->idEquipe);
            }
            $equipe->setData($data);
            $equipe->idProades = $this->proades->idProades;
			$equipe->save();
            $go = $this->manager->getActionUrl('rh','proades:main',$this->proades->idProades,array('form'=>'fase1','subform'=>'equipes'));
            $this->page->redirect($go);
		}
		catch (Exception $e)
		{
			$this->AddError($e->GetMessage());
		}
	}

    function btnEditar_click()
    {
        $idEquipe = $this->getFormValue('idEquipe');
        $equipe = $this->manager->getBusiness('rh','equipe');
        $equipe->getById($idEquipe);

        $this->setFieldValue('nome',$equipe->nome);
        $this->setFieldValue('idEquipe',$equipe->idEquipe);
    }

    function btnExcluir_click()
    {
        $idEquipe = $this->getFormValue('idEquipe');
        $equipe = $this->manager->getBusiness('rh','equipe');
        $equipe->getById($idEquipe);

        try
        {
            $equipe->delete();            
            $go = $this->manager->getActionUrl('rh','proades:main',$this->proades->idProades,array('form'=>'fase1','subform'=>'equipes'));
            $this->page->redirect($go);
        }
		catch (Exception $e)
		{
			$this->AddError($e->GetMessage());
		}
    }

    function setButtonAccess()
    {
        $perms = $this->manager->getPerms();
        foreach ( $this->buttons as $button )
        {
            $this->setButtonAttr($button->name,'visible',$perms->checkAccess('rh_proadesequipe',A_ACCESS));
        }
    }
}
?>
