<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class frmProadesNaoHabilitados extends MForm
{
    private $proades;

	function __construct($proades)
	{
        $this->proades = $proades; 
        
		parent::__construct('Relat&oacute;rio Final do Desempenho Individual');
		$this->EventHandler();
	}
    
	function CreateFields()
	{
        $setor = $this->manager->getBusiness('common','setor');
        $session = $this->manager->session;
        $idSetor = $setor->getSetoresFilhos($session->getValue('idSetor'));

        if ( $session->getValue('idSetor') == 1337 )
        {
            //se for a chefia de gabinete entao tem que juntar com a secretaria geral
            $idSetor[] = 1346;
            $idSetor[] = 1306;
        }

        $funcionario = $this->manager->getBusiness('rh','funcionario');
        $qryServidores = $funcionario->listBySetor($idSetor);
        foreach ( $qryServidores->result as $rs )
        {
            $idVinculo = $rs[0];
            $nome = $rs[1];
            $vinculo = $this->manager->getBusiness('rh','vinculo');
            $vinculo->getById($idVinculo);
            if ( $vinculo->isAtivo() )
            {
                $result[] = array($idVinculo,$nome);
            }
        }
        $qryServidores->result = $result;

        $fields = array(
                new MLabel('Para os casos de n&atilde;o-habilita&ccedil;&atilde;o para a progress&atilde;o por m&eacute;rito informar o TAE e a justificativa para o caso'),
                new MSelection('idVinculo','','TAE',$qryServidores->result),
                new MMultilineField( 'justificativa', '', 'Justificativa', 25, 5, 50 ),
                new MHiddenField('idNaoHabilitado'),
            );
        
        $this->SetFields($fields);		

        $buttons = array(
            new MButton('btnSalvar','Enviar')
        );

        $this->setButtons($buttons);
	}

	function btnSalvar_click()
	{
        $data = $this->getData();

        if ( $data->idVinculo == '' )
        {
            $this->addError("Por favor, selecione o TAE.");
        }
        if ( $data->justificativa == '' )
        {
            $this->addError("Por favor, informe a justificativa.");
        }

        if ( ! $this->hasErrors() )
        {
            try
            {
                $naoHabilitado = $this->manager->getBusiness('rh','naohabilitado');
                if ( $data->idNaoHabilitado )
                {
                    $naoHabilitado->getById($data->idNaoHabilitado);
                }
                $naoHabilitado->setData($data);
                $naoHabilitado->idProades = $this->proades->idProades;
                $naoHabilitado->save();
                $go = $this->manager->getActionUrl('rh','main:proades:main',$this->proades->idProades,array('form'=>'fase3','subform'=>'individual'));
                $this->page->redirect($go);

            }
            catch ( Exception $e )
            {
                $this->addError($e->getMessage());
            }
        }
	}

    function btnEditar_click()
    {
        $idNaoHabilitado = $this->getFormValue('idNaoHabilitado');
        $naohabilitado = $this->manager->getBusiness('rh','naohabilitado');
        $naohabilitado->getById($idNaoHabilitado);

        $this->setFieldValue('idVinculo',$naohabilitado->idVinculo);
        $this->setFieldValue('justificativa',$naohabilitado->justificativa);
        $this->setFieldValue('idNaoHabilitado',$naohabilitado->idNaoHabilitado);
    }

    function btnExcluir_click()
    {
        $idNaoHabilitado = $this->getFormValue('idNaoHabilitado');
        $naohabilitado = $this->manager->getBusiness('rh','naohabilitado');
        $naohabilitado->getById($idNaoHabilitado);

        try
        {
            $naohabilitado->delete();            
            $go = $this->manager->getActionUrl('rh','main:proades:main',$this->proades->idProades,array('form'=>'fase3','subform'=>'individual'));
            $this->page->redirect($go);
        }
		catch (Exception $e)
		{
			$this->AddError($e->GetMessage());
		}
    }
}
?>
