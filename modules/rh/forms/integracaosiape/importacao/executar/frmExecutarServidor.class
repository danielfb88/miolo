<?PHP
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
ini_set("memory_limit","512M");
ini_set('max_execution_time','600');

class frmExecutarServidor extends MForm
{
	protected $arrRegistros, $obj0, $relatorio; 
	function __construct()
	{
        	parent::__construct('Executar importação dos Servidores'); 
	        $this->SetClose($this->manager->GetActionURL('rh','main:integracaosiape:importacao'));
	        $this->EventHandler();
	}
	
	function CreateFields()
	{
        	$ui = $this->manager->getUI();
	        $fields = array( 			
			new MLabel('<br><b>Informe os dados da importação a ser executada.</b>'),
			new MLabel('<br>'),
			new MTextField('mes','','Mês',10,'Formato: XX'),
			new MTextField('ano','','Ano',10, 'Formato: XXXX'),
			new MLabel('<br>'),
			new Separator(),
			new MLabel('<br><b>PASSO 1</b>'),
			new MLabel('Realizar a importação para o Banco de dados?<br>'),
			new MButton('btnPasso1', 'Executar'),

			new MLabel('<br><b>PASSO 2</b>'),
			new MLabel('Realizar a importação para as tabelas do Sistema em Produção?'),
			new MButton('btnPasso2', 'Executar'),
			new MSeparator(),
			new FormButton('btnRelatorio', 'Gerar Relatório', 'PDF'),
			new MLabel('<br>'),
		);
        	$this->SetFields($fields);
	   	$this->defaultButton = false;
		$this->setFieldAttr('btnRelatorio','visible',false);

	} 

	function btnPasso1_click()
	{
		global $MIOLO, $obj0;
	
	        $mes = $this->getFormValue('mes');	
	        $ano = $this->getFormValue('ano');
		//Testar se o mes e ano estão no formato correto
		if (strlen($mes) != 2)
		{
			$this->addError("Informe o mês no formato correto, com 2 dígitos.");
		}	
		elseif ($mes<'01' or $mes>'12')
		{
			$this->addError("Informe um mês válido.");
		}
		elseif (strlen($ano) != 4)
		{
			$this->addError("Informe o ano no formato correto, com 4 dígitos.");
		}	
		else
		{
			$arquivo = $MIOLO->GetBusiness('common','arquivo');
			$idArquivo = $arquivo->getByMesAnoServidor($mes,$ano);
	
			if ($idArquivo == NULL)
			{
				$this->addError("Não foi feito o upload do arquivo referente ao mês $mes, ano $ano.");
			}	
			else
			{
				$dados=	$arquivo->GetById($idArquivo);
				$tmp_name = $dados->caminho.$dados->nome.'.txt';
			        $arrRegistros = file($tmp_name);
			
				$obj0 = $MIOLO->GetBusiness('rh','tipo0');
				$obj0->BeginTransaction();
	
				TRY
				{    
			    		$this->VarreServidor1($arrRegistros, $obj0);
			    		$obj0->EndTransaction();
					//echo "\n \n \n" . date("d/m/Y H:i:s") . " Término do importServidor \n\n";
					$this->addInfo("Término da importação dos servidores. Execute o Passo 2.");
				}
				CATCH (Exception $e)
				{
		    			echo "\n \n Informe o seguinte erro a equipe de Suporte: " . $e->getMessage() . "\n";
				}
			}
		}
	}//Passo1


	function VarreServidor1($arrRegistros, $obj0)
	{    
		global $MIOLO, $obj0;
	
		$quant = 0;
	    	$count = count($arrRegistros);
		for ( $i = 0; $i < $count; $i++ )
		{
		        $registro = $arrRegistros[$i];
		        $tipoRegistro = substr($registro,17,1);

		        if ($tipoRegistro === '0')
		        {
				$this->Tipo_0($registro);
		        }
		        else
		        {
			        switch ($tipoRegistro)
				{
                			case '1':
			                    $this->Tipo_1($registro, $obj0->getTransaction(), $obj0->anomes);  //dados Pessoais do Servidor
                    			$quant ++;
			                break;
			                case '2':
			                    $this->Tipo_2($registro, $obj0->getTransaction(), $obj0->anomes);  //dados Funcionais do Servidor
			                break;
			                case '3':
			                    $this->Tipo_3($registro, $obj0->getTransaction(), $obj0->anomes);  //dados Financeiros do Servidor
			                break;
			                case '4':
				                $this->Tipo_4($registro, $obj0->getTransaction(), $obj0->anomes);  //totalizacao dos dados Financeiros do Servidor
			                break;
			                case '9':               //esta tudo zero: quantidade de UPAG e de Servidores
			                break;
			                default:
			                    //echo "\n Tipo de registro não previsto!\n" ;
			                break;
				} // switch
			} // if
		} // for

	$obj0->quant = $quant;
	$obj0->save();    
	} // Varre1


	function Tipo_0($registro)
	{
		global $obj0;
		$anomes = substr($registro,47,4) . substr($registro,45,2);

		if ( $obj0->getById($anomes) )
		{
			$this->addError("Ano/Mês já gravado: $anomes");
		}

		$obj0->anomes = $anomes;
	} // Tipo_0


	function Tipo_1($registro, $transaction, $anomes)//, $erro)
	{
		global $MIOLO, $obj0;
		
		$siape = substr($registro,  9, 7);
		$obj1 = $MIOLO->GetBusiness('rh','tipo1',$siape);
		$obj1->setTransaction($transaction);
	
		$obj1->unid_pagadora   = substr($registro,  0, 9);
		$obj1->siape           = substr($registro,  9, 7);
		$obj1->dv_matricula    = substr($registro, 16, 1);
		$obj1->tipo_registro   = substr($registro, 17, 1);
		$obj1->sigla_uf        = substr($registro, 18, 2);
		$obj1->nome_servidor   = strtoupper(trim(substr($registro, 20,60)));
		$obj1->cpf             = substr($registro, 80,11);
		$obj1->pis_pasep       = substr($registro, 91,11);
		$obj1->nome_mae        = substr($registro,102,50);
		$obj1->sexo            = substr($registro,152, 1);
		$obj1->dt_nascimento   = substr($registro,153, 8);
		$obj1->estado_civil    = substr($registro,161, 1);
		$obj1->escolaridade    = substr($registro,162, 2);
		$obj1->titulacao       = substr($registro,164, 2);
		$obj1->filler1         = substr($registro,166, 5);
		$obj1->nacionalidade   = substr($registro,171, 1);
		$obj1->naturalidade    = substr($registro,172, 2);
		$obj1->pais            = substr($registro,174, 3);
		$obj1->ano_chegada     = substr($registro,177, 4);
		$obj1->quant_dep_ir    = substr($registro,181, 2);
		$obj1->quant_dep_sf    = substr($registro,183, 2);
		$obj1->dt_prim_emp     = substr($registro,185, 8);
		$obj1->identif_origem  = substr($registro,193, 8);
		$obj1->end_logradouro  = $this->NormalizarEndereco(substr($registro,201,40));
		$obj1->end_numero      = $this->NormalizarEndereco(substr($registro,241, 6));
		$obj1->end_complemento = $this->NormalizarEndereco(substr($registro,247,21));
		$obj1->end_bairro      = $this->NormalizarEndereco(substr($registro,268,25));
		$obj1->end_municipio   = $this->NormalizarEndereco(substr($registro,293,30));
		$obj1->end_cep         = $this->NormalizarEndereco(substr($registro,323, 8));
		$obj1->end_uf          = $this->NormalizarEndereco(substr($registro,331, 2));
		$obj1->rg_numero       = substr($registro,333,14);
		$obj1->rg_orgao        = substr($registro,347, 5);
		$obj1->rg_dt_emissao   = substr($registro,352, 8);
    		$obj1->rg_uf           = substr($registro,360, 2);
		$obj1->tit_eleitor     = substr($registro,362,13);
		$obj1->anomes = $anomes;
		$obj1->save();
	} // Tipo_1


	function Tipo_2($registro, $transaction, $anomes)
	{
		global $MIOLO;
		
		$siape = substr($registro,  9, 7);
		$obj2 = $MIOLO->GetBusiness('rh','tipo2',$siape);
		$obj2->setTransaction($transaction);

		$obj2->unid_pagadora   = substr($registro,  0, 9);
		$obj2->siape           = substr($registro,  9, 7);
		$obj2->dv_matricula    = substr($registro, 16, 1);
		$obj2->tipo_registro   = substr($registro, 17, 1);
		$obj2->sigla_uf        = substr($registro, 18, 2);
		$obj2->regime_juridico = substr($registro, 20, 3);
		$obj2->cod_situacao    = substr($registro, 23, 2);
		$obj2->cart_trab_num   = substr($registro, 25, 6);
		$obj2->cart_trab_serie = substr($registro, 31, 5);
		$obj2->cart_trab_uf    = substr($registro, 36, 2);
		$obj2->banco           = substr($registro, 38, 3);
		$obj2->agencia         = substr($registro, 41, 6);
		$obj2->conta           = substr($registro, 47,13);
		$obj2->fgts_dt_opcao   = substr($registro, 60, 8);
		$obj2->fgts_banco      = substr($registro, 68, 3);
		$obj2->fgts_agencia    = substr($registro, 71, 6);
		$obj2->fgts_conta      = substr($registro, 77,13);
		$obj2->jornada_trab    = substr($registro, 90, 2);
		$obj2->perc_tempo_serv = substr($registro, 92, 2);
    		$obj2->dt_cadast_serv  = substr($registro, 94, 8);
   		$obj2->ind_supr_pagto  = substr($registro,102, 1);
    		$obj2->dt_supr_pagto   = substr($registro,103, 6);
	    	$obj2->proporc_numerad = substr($registro,109, 2);
    		$obj2->proporc_denomin = substr($registro,111, 2);
    		$obj2->cargo_grupo     = substr($registro,113, 3);
   		$obj2->cargo_nome      = substr($registro,116, 3);
    		$obj2->cargo_classe    = substr($registro,119, 1);
    		$obj2->cargo_ref_nivel = substr($registro,120, 3);
    		$obj2->cargo_dt_entrad = substr($registro,123, 8);
    		$obj2->cargo_dt_saida  = substr($registro,131, 8);
    		$obj2->funcao_sigla    = substr($registro,139, 3);
    		$obj2->funcao_codnivel = substr($registro,142, 5);
    		$obj2->funcao_escolar  = substr($registro,147, 2);
	   	$obj2->funcao_opcao    = substr($registro,149, 1);
    		$obj2->funcao_dt_ingr  = substr($registro,150, 8);
    		$obj2->funcao_dt_saida = substr($registro,158, 8);
    		$obj2->funcao_unid_org = substr($registro,166, 9);
		$obj2->nov_fc_sigla    = substr($registro,175, 3);
    		$obj2->nov_fc_codnivel = substr($registro,178, 5);
		$obj2->nov_fc_escolar  = substr($registro,183, 2);
   		$obj2->nov_fc_opcao    = substr($registro,185, 1);
		$obj2->nov_fc_dt_ingr  = substr($registro,186, 8);
    		$obj2->nov_fc_dt_saida = substr($registro,194, 8);
    		$obj2->nov_fc_unid_org = substr($registro,202, 9);
    		$obj2->ativid_funcao   = substr($registro,211, 4);
    		$obj2->lotac_unid_org  = substr($registro,215, 9);
    		$obj2->lotac_unid_dt   = substr($registro,224, 8);
    		$obj2->local_orgao     = substr($registro,232, 5);
    		$obj2->local_unid_org  = substr($registro,237, 9);
    		$obj2->ing_org_grupo   = substr($registro,246, 2);
   		$obj2->ing_org_ocor    = substr($registro,248, 3);
    		$obj2->ing_org_dt      = substr($registro,251, 8);
    		$obj2->ing_org_dip_cod = substr($registro,259, 2);
    		$obj2->ing_org_dip_num = substr($registro,261, 9);
    		$obj2->ing_org_dip_dt  = substr($registro,270, 8);
    		$obj2->ing_sp_grupo    = substr($registro,278, 2);
		$obj2->ing_sp_ocor     = substr($registro,280, 3);
    		$obj2->ing_sp_dt       = substr($registro,283, 8);
    		$obj2->ing_sp_dip_cod  = substr($registro,291, 2);
    		$obj2->ing_sp_dip_num  = substr($registro,293, 9);
    		$obj2->ing_sp_dip_dt   = substr($registro,302, 8);
    		$obj2->exclus_grupo    = substr($registro,310, 2);
		$obj2->exclus_ocor     = substr($registro,312, 3);
		$obj2->exclus_dt       = substr($registro,315, 8);
    		$obj2->exclus_dip_cod  = substr($registro,323, 2);
   		$obj2->exclus_dip_num  = substr($registro,325, 9);
    		$obj2->exclus_dip_dt   = substr($registro,334, 8);
    		$obj2->afast_grupo     = substr($registro,342, 2);
    		$obj2->afast_ocor      = substr($registro,344, 3);
    		$obj2->afast_dt_inic   = substr($registro,347, 8);
    		$obj2->afast_dt_term   = substr($registro,355, 8);
    		$obj2->afast_dip_cod   = substr($registro,363, 2);
    		$obj2->afast_dip_num   = substr($registro,365, 9);
    		$obj2->afast_dip_dt    = substr($registro,374, 8);
    		$obj2->inativ_grupo    = substr($registro,382, 2);
    		$obj2->inativ_ocor     = substr($registro,384, 3);
    		$obj2->inativ_dt       = substr($registro,387, 8);
    		$obj2->inativ_dip_cod  = substr($registro,395, 2);
    		$obj2->inativ_dip_num  = substr($registro,397, 9);
    		$obj2->inativ_dip_dt   = substr($registro,406, 8);
    		$obj2->apos_num_proc   = substr($registro,414,15);
    		$obj2->apos_ano_prev   = substr($registro,429, 4);
    		$obj2->apos_opcao_int  = substr($registro,433, 1);
    		$obj2->uorg_controle   = substr($registro,434, 9);
	    	$obj2->mod_fun_grupo   = substr($registro,443, 2);
    		$obj2->mod_fun_ocor    = substr($registro,445, 3);
		$obj2->mod_fun_dt      = substr($registro,448, 8);
    		$obj2->mod_fun_dip_cod = substr($registro,456, 2);
    		$obj2->mod_fun_dip_num = substr($registro,458, 9);
    		$obj2->mod_fun_dip_dt  = substr($registro,467, 8);
    		$obj2->reg_jur_ant     = substr($registro,475, 3);
    		$obj2->sit_serv_ant    = substr($registro,478, 2);
    		$obj2->mud_org_destino = substr($registro,480, 5);
    		$obj2->mud_org_dt_lib  = substr($registro,485, 8);
    		$obj2->mud_org_origem  = substr($registro,493, 5);
    		$obj2->orgao_anterior  = substr($registro,498, 5);
    		$obj2->matric_anterior = substr($registro,503, 7);
    		$obj2->cod_org_extinto = substr($registro,510, 5);
    		$obj2->mat_serv_extint = substr($registro,515, 7);
    		$obj2->orgao_atual     = substr($registro,522, 5);
    		$obj2->matric_atual    = substr($registro,527, 7);
    		$obj2->mud_upag_codigo = substr($registro,534, 9);
    		$obj2->mud_upag_dt_lib = substr($registro,543, 8);
    		$obj2->mud_upag_motivo = substr($registro,551, 1);
    		$obj2->indic_pag_serv  = substr($registro,552, 1);
    		$obj2->obito_cartori0  = substr($registro,553,50);
    		$obj2->obito_livro     = substr($registro,603, 8);
    		$obj2->obito_folha     = substr($registro,611, 6);
    		$obj2->obito_registro  = substr($registro,617, 8);
		$obj2->obito_dt        = substr($registro,625, 8);
    		$obj2->ind_exc_instit  = substr($registro,633, 1);
    		$obj2->dt_exc_instit   = substr($registro,634, 8);
    		$obj2->vale_al_tipo    = substr($registro,642, 1);
    		$obj2->vale_al_dt_inic = substr($registro,643, 8);
    		$obj2->vale_al_dt_fim  = substr($registro,651, 8);
    		$obj2->ind_oper_raiox  = substr($registro,659, 1);
    		$obj2->orgao_requisit  = substr($registro,660, 5);
    		$obj2->codigo_vaga     = substr($registro,665, 7);
    		$obj2->mes_anuenio     = substr($registro,672, 2);
    		$obj2->perc_oper_raiox = substr($registro,674, 5);
	    	$obj2->posse_grupo     = substr($registro,679, 2);
    		$obj2->posse_ocor      = substr($registro,681, 3);
    		$obj2->posse_dt        = substr($registro,684, 8);
    		$obj2->posse_dip_cod   = substr($registro,692, 2);
    		$obj2->posse_dip_dt    = substr($registro,694, 8);
		$obj2->posse_dip_num   = substr($registro,702, 9);
    		$obj2->rev_ati_grupo   = substr($registro,711, 2);
    		$obj2->rev_ati_ocor    = substr($registro,713, 3);
		$obj2->rev_ati_dt      = substr($registro,716, 8);
    		$obj2->rev_ati_dip_cod = substr($registro,724, 2);
    		$obj2->rev_ati_dip_dt  = substr($registro,726, 8);
    		$obj2->rev_ati_dip_num = substr($registro,734, 9);
    		$obj2->ica_cargo       = substr($registro,743, 1);
    		$obj2->ica_funcao      = substr($registro,744, 1);
    		$obj2->ica_sal_familia = substr($registro,745, 1);
    		$obj2->ica_adic_tempo  = substr($registro,746, 1);
    		$obj2->ica_fgts        = substr($registro,747, 1);
    		$obj2->ica_inss        = substr($registro,748, 1);
    		$obj2->ica_ir          = substr($registro,749, 1);
    		$obj2->ica_margem_cons = substr($registro,750, 1);
    		$obj2->ica_cont_sind   = substr($registro,751, 1);
    		$obj2->ica_adiant_13   = substr($registro,752, 1);
    		$obj2->ica_abate_teto  = substr($registro,753, 1);
    		$obj2->ica_13_salario  = substr($registro,754, 1);
    		$obj2->ica_pss_6       = substr($registro,755, 1);
    		$obj2->ica_ferias      = substr($registro,756, 1);
		$obj2->ica_pensao      = substr($registro,757, 1);
    		$obj2->ica_beneficios  = substr($registro,758, 1);
		$obj2->ica_ipmf_cpmf   = substr($registro,759, 1);
    		$obj2->ica_rais        = substr($registro,760, 1);
    		$obj2->ica_dif_urv     = substr($registro,761, 1);
    		$obj2->ica_adiant      = substr($registro,762, 1);
    		$obj2->ica_rend_pasep  = substr($registro,763, 1);
    		$obj2->anomes = $anomes;
    		$obj2->save();
	} // Tipo_2


	function Tipo_3($registro, $transaction, $anomes)
	{
		global $MIOLO;
	
		$siape = substr($registro,  9, 7);
    		$obj3 = $MIOLO->GetBusiness('rh','tipo3',$siape);
    		$obj3->setTransaction($transaction);
    		$obj3->unid_pagadora  = substr($registro,  0, 9);
    		$obj3->siape          = substr($registro,  9, 7);
    		$obj3->dv_matricula   = substr($registro, 16, 1);
    		$obj3->tipo_registro  = substr($registro, 17, 1);
    		$obj3->sigla_uf       = substr($registro, 18, 2);
    		$obj3->rub_rend_desc  = substr($registro, 20, 1);
    		$obj3->rub_codigo     = substr($registro, 21, 5);
	    	$obj3->rub_sequencia  = substr($registro, 26, 1);
    		$obj3->rub_valor      = substr($registro, 27,11);
    		$obj3->rub_prazo      = substr($registro, 38, 3);
    		$obj3->param_percent  = substr($registro, 41, 5);
	    	$obj3->param_frac_num = substr($registro, 46, 3);
    		$obj3->param_frac_den = substr($registro, 49, 3);
    		$obj3->param_assunto  = substr($registro, 52, 2);
    		$obj3->param_niv_scn  = substr($registro, 54, 1);
    		$obj3->param_niv_cemp = substr($registro, 55,12);
		$obj3->benef_nome     = substr($registro, 67,40);
    		$obj3->benef_banco    = substr($registro,107, 3);
    		$obj3->benef_agencia  = substr($registro,110, 6);
    		$obj3->benef_conta    = substr($registro,116,13);
    		$obj3->benef_anomes   = substr($registro,129, 6);
    		$obj3->anomes = $anomes;
    		$obj3->save();

	} // Tipo_3


	function Tipo_4($registro, $transaction, $anomes)
	{
    		global $MIOLO;

		$siape = substr($registro,  9, 7);
    		$obj4 = $MIOLO->GetBusiness('rh','tipo4',$siape);
    		$obj4->setTransaction($transaction);
		
    		$obj4->unid_pagadora   = substr($registro, 0, 9);
    		$obj4->siape           = substr($registro, 9, 7);
    		$obj4->dv_matricula    = substr($registro,16, 1);
    		$obj4->tipo_registro   = substr($registro,17, 1);
    		$obj4->sigla_uf        = substr($registro,18, 2);
		$obj4->total_bruto     = substr($registro,20,12);
    		$obj4->total_descontos = substr($registro,32,12);
	    	$obj4->liquido         = substr($registro,44,12);
    		$obj4->total_reg_3     = substr($registro,56, 3);
    		$obj4->anomes = $anomes;
    		$obj4->save();
	
	} // Tipo_4


	function NormalizarEndereco($texto)
	{
		$texto = strtolower(trim($texto));
	
              	$texto = str_replace(".", "",$texto);
	
              	$texto = str_replace("--", " ",$texto);
              	$texto = str_replace("--", " ",$texto);
              	$texto = str_replace("-", " ",$texto);
	
              	$texto = str_replace("__", " ",$texto);
              	$texto = str_replace("__", " ",$texto);
              	$texto = str_replace("_", " ",$texto);

              	$texto = str_replace("  ", " ",$texto);
              	$texto = str_replace("  ", " ",$texto);
              	$texto = str_replace("  ", " ",$texto);
              	$texto = str_replace("  ", " ",$texto);

              	$texto = str_replace(" , ", ",",$texto);
              	$texto = str_replace(", ", ",",$texto);
              	$texto = str_replace(" ,", ",",$texto);

              	$texto = str_replace(" apto ", "/",$texto);
              	$texto = str_replace(" apt ", "/",$texto);
              	$texto = str_replace(" ap ", "/",$texto);

              	$texto = str_replace(" apto", "/",$texto);
              	$texto = str_replace(" apt", "/",$texto);
              	$texto = str_replace(" ap", "/",$texto);

              	$texto = str_replace("apto ", "/",$texto);
              	$texto = str_replace("apt ", "/",$texto);
              	$texto = str_replace("ap ", "/",$texto);

              	$texto = str_replace(" / ", "/",$texto);
              	$texto = str_replace("/ ", "/",$texto);
              	$texto = str_replace(" /", "/",$texto);

              	$texto = str_replace("bloco", "bl",$texto);
              	$texto = str_replace("caixa postal", "cp",$texto);
              	$texto = str_replace("apartamento", "/",$texto);

              	// tirar acentos e sinais graficos
              	$texto = ereg_replace("[#Ã¡Ã Ã¢Ã£ÂªÂÃÃ³Ã#ÃÀÃÃÁ]", "a",$texto);                 
              	$texto = ereg_replace("[Â¿Ã©ÃšÃªÃ¿]", "e",$texto);
              	$texto = ereg_replace("[ÂÂ±Ã²ÃŽÃµÂº]", "o",$texto);       
              	$texto = ereg_replace("[ÃºÃ¹Ã»×]", "u",$texto);
              	$texto = ereg_replace("[Ãœ]", "i",$texto);
              	$texto = ereg_replace("[ÂÂÃ§ÃŸ]", "c",$texto);
              	$texto = strtoupper($texto);

              	return $texto;
	}//NormalizarEndereco


	//PASSO 2//
	
	function btnPasso2_click()
	{
		global $MIOLO, $objImport;
	        $mes = $this->getFormValue('mes');	
	        $ano = $this->getFormValue('ano');
	        $anomes = $ano.$mes;

		$objImport = $MIOLO->GetBusiness('rh','relatorioimportacao');
		//Testa se a importação dos dados já foi feita antes
		$check = $objImport->Check($anomes);
	
		if ($check)
		{
	    		//echo "\n \n Dados já importados anteriormente: " . $anomes  . "\n";
			$this->addInfo("Dados já importados anteriormente: " . $anomes);
		}
		else
		{
			$objImport->BeginTransaction();
			TRY
			{    
		    		$this->VarreServidor2($anomes, $objImport);
		   		$objImport->EndTransaction();		
				$d = date("d/m/Y H:i:s");
				$this->addInfo( $d. " Término da Importação dos servidores." );
				//echo "\n \n \n" . date("d/m/Y H:i:s") . " Término da Importação \n\n";
				$this->setFieldAttr('btnRelatorio','visible',true);
			}
			CATCH (Exception $e)
			{
	    			$this->addInfo("Informe o seguinte erro a equipe de Suporte: " . $e->getMessage());
			}
	    	}
	}//Passo 2


	function VarreServidor2($anomes, $objImport)
	{    
		global $MIOLO, $objImport;
		$relatorio = $MIOLO->GetBusiness('rh','relatorioimportacao');
		try
		{
		   	$this->Importar($objImport->getTransaction(),$anomes); 
			$msg= "Importacao de servidores realizada corretamente";
		    	$objImport->save($msg,'','',$anomes);    

//			$relatorio->save($msg,'','',$anomes);
		
		}
		catch (Exception $e)
		{
			$this->addInfo("Não foi possível varrer os dados corretamente. Erro: " . $e->getMessage());	
		}
	} //VarreServidor2

	function btnRelatorio_click()
	{
		
		global $MIOLO,$relatorio;
		
		$SESSAO = $MIOLO->getSession();
		$data = $SESSAO->get('relatorio[]');
		$SESSAO->set('relatorio[]',null);
		$ui = $MIOLO->GetUI();
	  	$report = $ui->GetReport('rh','repServidoresImportados',$data);
		$report->Generate();	
	}
	function Importar($transaction, $anomes)
	{
		global $MIOLO, $objImport;

    		$tipo1 = $MIOLO->GetBusiness('rh','tipo1',$siape);
    		$tipo2 = $MIOLO->GetBusiness('rh','tipo2');
    		$count = $tipo1->total($anomes);
    		$siapes = $tipo1->listAllSiape($anomes);
	
    		for ( $i = 0; $i < $count; $i++ )
    		{
			$funcionario = $MIOLO->GetBusiness('rh','funcionario');
			$func = $MIOLO->GetBusiness('rh','funcionario');
			$relatorio = $MIOLO->GetBusiness('rh','relatorioimportacao');
			$pessoa = $MIOLO->GetBusiness('common','pessoa');
			$municipio = $MIOLO->GetBusiness('common','municipio');
			$setor = $MIOLO->GetBusiness('common','setor');
		
			$obj1 = $MIOLO->GetBusiness('rh','tipo1',$siapes[$i][0]);
			$obj2 = $MIOLO->GetBusiness('rh','tipo2',$siapes[$i][0]);
	
			//echo "<br> Tipo1: ";var_dump($siapes[$i][0]);echo ' - ';var_dump($obj1->nome_servidor);
				
			$this->relatorio[$i][0] = $siapes[$i][0];
			$this->relatorio[$i][1] = $obj1->nome_servidor;

			$vinculo = $MIOLO->GetBusiness('rh','vinculo');
    			$t = $vinculo->GetById($obj1->siape);
		    	if ($vinculo->isPersistent())
    			{
				//Atualiza os dados pessoais
				$pessoa = $MIOLO->GetBusiness('common','pessoa');
				$pessoa = $pessoa->GetByCpf($obj1->cpf);
				$pessoa->nome = $obj1->nome_servidor;
				$pessoa->telefone = $obj1->telefone;
	    			$pessoa->cpf = $obj1->cpf;
				$pessoa->nomemae = $obj1->nome_mae;
	    			$pessoa->sexo = $obj1->sexo;
				$data = $obj1->dt_nascimento;
	    			$dataNasc = (substr($data,0,2).'-'.substr($data,2,2).'-'.substr($data,4,4));
				if($dataNasc != "00-00-0000")
				{
					$pessoa->datanasc = $dataNasc;
				}
				else
				{
					$pessoa->datanasc = "01-01-1850";
				}
				$pessoa->idbanco = $obj2->banco;
	    			$pessoa->idagenc = $obj2->agencia;
	    			$pessoa->conta = $obj2->conta;
	    			$pessoa->numcartpro = $obj2->cart_trab_num;
	    			$pessoa->seriecartpro = $obj2->cart_trab_serie; 
	    			$pessoa->ufcartpro = $obj2->cart_trab_uf; 
	    			$pessoa->pispasep = $obj1->pis_pasep;	
	    			$pessoa->anochegbrasil = $obj1->ano_chegada;
	    			$pessoa->endereco = $obj1->end_logradouro.$obj1->end_numero.$obj1->end_complemento;
	    			$pessoa->bairro = $obj1->end_bairro;
	    			$pessoa->cep = $obj1->end_cep;
	    			$pessoa->numrg = $obj1->rg_numero;
    				$pessoa->orgaorg = $obj1->rg_orgao;
	    			$pessoa->ufrg = $obj1->rg_uf;
	    			$pessoa->tituloeleitor = $obj1->tit_eleitor;
	    			$nomeMunicipio = $obj1->end_municipio;
	    			$municipio->GetIdByNomeEstado($nomeMunicipio,$pessoa->ufrg);
	    			if ($municipio->idMunicipio == NULL)
	    			{
	       				$erro= "Erro: Municipio. Salvo: Campos dos Goytacazes";
					$relatorio->save($erro,$obj1->siape,'1',$obj1->anomes);
					$pessoa->idmunicipio = "5819"; 
	    			}
				else
		    		{
					$pessoa->idmunicipio 	= $municipio->idMunicipio; 
	    			}	
				$pessoa->save();
				//Dados pessoais atualizados

				//Atualiza os dados do funcionário
				$funcionario->idFuncionario = ('0'.$obj1->siape.$obj1->dv_matricula);
		    		$teste = $funcionario->Check($funcionario->idFuncionario);
				if($teste)
				{
					$objFuncionario = $MIOLO->GetBusiness('rh','funcionario',$funcionario->idFuncionario);
		        		$objFuncionario->escolaridade = $obj1->escolaridade;
		        		$dt = $obj1->dt_prim_emp;
		        		$objFuncionario->dataPrimeiroEmprego = (substr($dt,0,2).'-'.substr($dt,2,2).'-'.substr($dt,4,4));
		        		$objFuncionario->idPessoa = $pessoa->idpessoa;
		    			$objFuncionario->save();
				}
				//Dados do funcionário Atualizados
				// Dados Vínculo
				if($t->idVinculo)
				{
					$objVinculo = $MIOLO->GetBusiness('rh','vinculo',$obj2->siape);
		            		//$vinculo->setTransaction($transaction);
			    		$objVinculo->idVinculo = $obj2->siape;
		  	    		$objVinculo->dvIdVinculo = $obj2->dv_matricula;
			    		$objVinculo->idFuncionario =  ('0'.$obj2->siape.$obj2->dv_matricula);
			    		$dt = $obj2->posse_dt;
			    		$objVinculo->dataPosse = (substr($dt,0,2).'-'.substr($dt,2,2).'-'.substr($dt,4,4));
			    		$dt = $obj2->ing_org_dt;
			    		$objVinculo->dataExercicio = (substr($dt,0,2).'-'.substr($dt,2,2).'-'.substr($dt,4,4));
			    		if ($obj2->cod_situacao == 2)
		 	    		{
						$dt = $obj2->inativ_dt;
						$objVinculo->dataVacancia = (substr($dt,0,2).'-'.substr($dt,2,2).'-'.substr($dt,4,4));
		    				$objVinculo->idGrupoOcorrenciaVacancia = $obj2->inativ_grupo;
		    				$objVinculo->idOcorrenciaVacancia = $obj2->inativ_ocor;
		            		}
		            		$objVinculo->save();	
				}
				// Dados Vínculo atualizados

				$msg= "Dados Atualizados Com sucesso";
				$relatorio->save($msg,$obj1->siape,'1',$obj1->anomes);
			}
		    	else
    			{
				//Testar se a pessoa já esta cadastrada	
				$testePessoa = $pessoa->ListByCPF($obj1->cpf);
	    			$t = $testePessoa->result;
				if (!$t[0])
	    			{
				    	//CM_PESSOA
				    	/* Dados não encontrados na importação: gruposanguineo     | tiporg |  zonatitulo | secaotitulo | uftitulo | numdocmilitar | seriedocmilitar | categdocmilitar |   numcert | livrocert | folhacert | cartorio |    identprof | tipoidentprof | tipodocmilitar | orgexpdocmilitar |  dataultalt   | raca | atvremunerada |   datarg     |       passaporte |      datacartest     */
					$pessoa->nome = $obj1->nome_servidor;
					$pessoa->telefone = $obj1->telefone;
		    			$pessoa->cpf = $obj1->cpf;
		    			if ( $obj1->cpf == '00000000000' )
		    			{
						$erro= "Erro: CPF. Salvo ".$obj1->cpf;
						$relatorio->save($erro,$obj1->siape,'1',$obj1->anomes);
	    	    			}
				   	$pessoa->nomemae = $obj1->nome_mae;
		    			$pessoa->sexo = $obj1->sexo;
		    			$data = $obj1->dt_nascimento;
		    			$dataNasc = (substr($data,0,2).'-'.substr($data,2,2).'-'.substr($data,4,4));
		    			if ( $dataNasc != "00-00-0000" )
		    			{
						$pessoa->datanasc = $dataNasc;
		    			}
		    			else
		    			{
		       				$erro= "Erro: Data nascimento. Salvo 01/01/5000";
						$relatorio->save($erro,$obj1->siape,'1',$obj1->anomes);
						$pessoa->datanasc = "01-01-5000";
		    			}
		    			if ($obj1->estado_civil == 0 or $obj1->estado_civil == NULL)
		    			{
						//Se estado civil estiver vazio, recebe o valor 1, referente a solteiro
						$pessoa->idestadocivil = 1;
		    			}
		    			else
		    			{
		    				$pessoa->idestadocivil = $obj1->estado_civil;
					}
					if ($obj1->nacionalidade == 1 or $obj1->nacionalidade == 0)
		    			{
			        		$pessoa->nacionalidade = '024';
		        			$pessoa->idpaisnacionalidade = '024';
		    			}
		    			else
		    			{
		        			$pessoa->nacionalidade = '00'.$obj1->nacionalidade;
		        			$pessoa->idpaisnacionalidade = '00'.$obj1->nacionalidade;
		    			}
		    			if ($obj1->pais == '000')
		    			{
		        			$pessoa->idpais = '024';
		        			$pessoa->idpaisnascimento = '024';
		    			}
		    			else
		    			{
		        			$pessoa->idpais = $obj1->pais;
		        			$pessoa->idpaisnascimento = $obj1->pais;
		    			}
		    			$pessoa->idbanco = $obj2->banco;
		    			$pessoa->idagenc = $obj2->agencia;
		    			$pessoa->conta = $obj2->conta;
		    			$pessoa->numcartpro = $obj2->cart_trab_num;
		    			$pessoa->seriecartpro = $obj2->cart_trab_serie; 
		    			$pessoa->ufcartpro = $obj2->cart_trab_uf; 
		    			$pessoa->pispasep = $obj1->pis_pasep;	
		    			$pessoa->anochegbrasil = $obj1->ano_chegada;
		    			$pessoa->endereco = $obj1->end_logradouro.$obj1->end_numero.$obj1->end_complemento;
		    			$pessoa->bairro = $obj1->end_bairro;
		    			$pessoa->cep = $obj1->end_cep;
		    			$pessoa->numrg = $obj1->rg_numero;
	    				$pessoa->orgaorg = $obj1->rg_orgao;
		    			$pessoa->ufrg = $obj1->rg_uf;
		    			$pessoa->tituloeleitor = $obj1->tit_eleitor;
		    			$nomeMunicipio = $obj1->end_municipio;
		    			$municipio->GetIdByNomeEstado($nomeMunicipio,$pessoa->ufrg);
		    			if ($municipio->idMunicipio == NULL)
		    			{
		       				$erro= "Erro: Municipio. Salvo: Campos dos Goytacazes";
						$relatorio->save($erro,$obj1->siape,'1',$obj1->anomes);
						$pessoa->idmunicipio = "5819"; 
		    			}
					else
			    		{
						$pessoa->idmunicipio 	= $municipio->idMunicipio; 
		    			}
		    			$pessoa->save();
	   			}//else teste pessoa
	   			else
	   			{
					$pessoa->idpessoa = $t[0][0];
					$funcionario->idFuncionario = $idfuncionario;
					$erro= "Erro: Pessoa ja cadastrada - ID = ". $t[0][0];
					$relatorio->save($erro,$obj1->siape,'1',$obj1->anomes);
				}
		    		//RH_FUNCIONARIO
				/*Dado não encontrado na importação: ufempregoanterior*/
		    		$funcionario->idFuncionario = ('0'.$obj1->siape.$obj1->dv_matricula);
		    		$teste = $funcionario->Check($funcionario->idFuncionario);
		
		    		if ($teste != NULL)
		    		{
					$funcionario->idFuncionario = $idfuncionario;
		       			$erro= "Erro: Funcionario ja existe";
					$relatorio->save($erro,$obj1->siape,'1',$obj1->anomes);
		    		}
		    		else
		    		{
		        		$funcionario->escolaridade = $obj1->escolaridade;
		        		$dt = $obj1->dt_prim_emp;
		        		$funcionario->dataPrimeiroEmprego = (substr($dt,0,2).'-'.substr($dt,2,2).'-'.substr($dt,4,4));
		        		$funcionario->idPessoa = $pessoa->idpessoa;
		    			$funcionario->save();
		    		}

	
		    		//RH_TIPO1-Dados não importados: unid_pagadora |tipo_registro |titulacao |filler1 |quant_dep_ir |quant_dep_sf |	identif_origem |rg_dt_emissao |anomes
	
		    		//echo "<br> Tipo2: ";var_dump($obj2->siape);
	
		    		//RH_VINCULO
	    			/*Dados não encontrados na importação:  classificacaoconcurso | dataconcurso | datafimcontrato | saualternativo | numfunc | 	numvinculo | idpublicacaovacancia */  
	            		$vinculo = $MIOLO->GetBusiness('rh','vinculo');
	            		//$vinculo->setTransaction($transaction);
		    		$vinculo->idVinculo = $obj2->siape;
	  	    		$vinculo->dvIdVinculo = $obj2->dv_matricula;
		    		$vinculo->idFuncionario =  ('0'.$obj2->siape.$obj2->dv_matricula);
		    		$dt = $obj2->posse_dt;
		    		$vinculo->dataPosse = (substr($dt,0,2).'-'.substr($dt,2,2).'-'.substr($dt,4,4));
		    		$dt = $obj2->ing_org_dt;
		    		$vinculo->dataExercicio = (substr($dt,0,2).'-'.substr($dt,2,2).'-'.substr($dt,4,4));
		    		if ($obj2->cod_situacao == 2)
	 	    		{
					$dt = $obj2->inativ_dt;
					$vinculo->dataVacancia = (substr($dt,0,2).'-'.substr($dt,2,2).'-'.substr($dt,4,4));
	    				$vinculo->idGrupoOcorrenciaVacancia = $obj2->inativ_grupo;
	    				$vinculo->idOcorrenciaVacancia = $obj2->inativ_ocor;
	            		}
	            		$vinculo->save();	
		
		    		//RH_PROVIMENTO
		    		/*Dados não encontrados na importação: excedelotacao | obs |  idclasse | idreferencia |  idpublicacao | idambiente */
		    		$provimento  = $MIOLO->GetBusiness('rh','provimento');
		    		/*Quando cod_situacao = 2, significa que o servidor esta aposentado, portanto, conforme funciona no SIGA, serão criados 2 	provimentos: 
			 		- 1º provimento - idsituacao = 1 (que significa ativo) e este provimento estará fechado (com datafim)
			 		- 2º provimento - idsituacao = 2 (que significa aposentado) e este provimento estará aberto (sem datafim)
	    	    		*/
		    		if ($obj2->cod_situacao == 2)
	    	    		{
		        		$provimento->idVinculo = $obj2->siape;
	    				$dt = $obj2->ing_org_dt;
	    				$provimento->dataInicio = (substr($dt,0,2).'-'.substr($dt,2,2).'-'.substr($dt,4,4));
					if ($provimento->dataInicio == "00-00-0000") 
					{
						$provimento->dataInicio = "01-01-1850";
					}
	    				if ($obj2->exclus_dt == '00000000')		
					{
						$provimento->dataFim = null;
					}
					else
					{
						$dt = $obj2->exclus_dt;
						$dia = (substr($dt,0,2));
						$dia = $dia-1;
						$provimento->dataFim = ($dia.'-'.substr($dt,2,2).'-'.substr($dt,4,4));		
					}
	    				$provimento->excedeLotacao = 'N';
	    				$provimento->regimeJuridico = $obj2->regime_juridico;
	    				$provimento->idGrupoCargo = $obj2->cargo_grupo;
	    				$provimento->idCargo = $obj2->cargo_nome;
					if ($obj2->local_unid_org == '000000000')
					{	
	    					$provimento->idSetor = '0';
					}
					else
					{
						$idsetor = $obj2->local_unid_org;
			    			$id = $setor->getById2($idsetor);
						if ($id == NULL)
						{			
							$provimento->idSetor = '0';
						}
						else
						{
							$provimento->idSetor = $obj2->local_unid_org;
						}
					}
	    				$provimento->idSituacao = 1;
	    				$provimento->idJornada = $obj2->jornada_trab;
	    				$provimento->idGrupoOcorrencia = $obj2->ing_sp_grupo;
	    				$provimento->idOcorrencia = $obj2->ing_sp_ocor;
					$provimento->save();
					//Salvou o 1º provimento
	
					$provimento  = $MIOLO->GetBusiness('rh','provimento');
		        		$provimento->idVinculo = $obj2->siape;
					$dt = $obj2->inativ_dt;
					$provimento->dataInicio = (substr($dt,0,2).'-'.substr($dt,2,2).'-'.substr($dt,4,4));
					if ($provimento->dataInicio == "00-00-0000") 
					{
						$provimento->dataInicio = "01-01-1850";
					}
					$provimento->dataFim = null;
		    			$provimento->excedeLotacao = 'N';
		    			$provimento->regimeJuridico = $obj2->regime_juridico;
				    	$provimento->idGrupoCargo = $obj2->cargo_grupo;
		    			$provimento->idCargo = $obj2->cargo_nome;
					if ($obj2->local_unid_org == '000000000')
					{	
	    					$provimento->idSetor = '0';
					}
					else
					{
						$idsetor = $obj2->local_unid_org;
			    			$id = $setor->getById2($idsetor);
						if ($id == NULL)
						{			
							$provimento->idSetor = '0';
						}
						else
						{
							$provimento->idSetor = $obj2->local_unid_org;
						}
					}
	
					$provimento->idSituacao = $obj2->cod_situacao;
				    	$provimento->idJornada = $obj2->jornada_trab;
		    			$provimento->idGrupoOcorrencia = $obj2->inativ_grupo;
		    			$provimento->idOcorrencia = $obj2->inativ_ocor;
				    	$provimento->save();
					//Salvou o 2º provimento
				}//if codsituacao
		    		else
		    		{
					$provimento->idVinculo = $obj2->siape;
	    				$dt = $obj2->ing_org_dt;
		    			$provimento->dataInicio = (substr($dt,0,2).'-'.substr($dt,2,2).'-'.substr($dt,4,4));
					if ($provimento->dataInicio == "00-00-0000") 
					{
						$provimento->dataInicio = "01-01-1850";
					}
		    			if ($obj2->exclus_dt == '00000000')
		    			{
		    				$provimento->dataFim = null;
		    			}
					else
		    			{
						$dt = $obj2->exclus_dt;
						$provimento->dataFim = (substr($dt,0,2).'-'.substr($dt,2,2).'-'.substr($dt,4,4));
		    			}
		    			$provimento->excedeLotacao = 'N';
		    			$provimento->regimeJuridico = $obj2->regime_juridico;
		    			$provimento->idGrupoCargo = $obj2->cargo_grupo;
		    			$provimento->idCargo = $obj2->cargo_nome;
					if ($obj2->local_unid_org == '000000000')
					{	
	    					$provimento->idSetor = '0';
					}
					else
					{
						$idsetor = $obj2->local_unid_org;
			    			$id = $setor->getById2($idsetor);
						if ($id == NULL)
						{			
							$provimento->idSetor = '0';
						}
						else
						{
							$provimento->idSetor = $obj2->local_unid_org;
						}
					}
	
		    			$provimento->idSituacao = $obj2->cod_situacao;
		    			$provimento->idJornada = $obj2->jornada_trab;
		    			$provimento->idGrupoOcorrencia = $obj2->ing_sp_grupo;
		    			$provimento->idOcorrencia = $obj2->ing_sp_ocor;
	    				$provimento->save();
		    		}//Else
		
		    		//RH_OCUPACAOVAGA
		    		//Todos os dados foram encontrados.
		    		$ocupacaovaga = $MIOLO->GetBusiness('rh','ocupacaovaga');
		    		$ocupacaovaga->idVinculo = $obj2->siape;
		    		$ocupacaovaga->numeroVaga = $obj2->codigo_vaga;
		    		if ($ocupacaovaga->numeroVaga==0000000);
		    		{
					$ocupacaovaga->numeroVaga=0;
				}
	    			$dt = $obj2->dt_cadast_serv;
		    		$ocupacaovaga->dataInicio = (substr($dt,0,2).'-'.substr($dt,2,2).'-'.substr($dt,4,4));
				if ($ocupacaovaga->dataInicio == "00-00-0000") 
				{
					$ocupacaovaga->dataInicio = "01-01-1850";
				}
		    		if ($obj2->exclus_dt == '00000000')
		    		{
		    			$ocupacaovaga->dataFim = null;
		    		}
				else
				{
					$dt = $obj2->exclus_dt;
					$ocupacaovaga->dataFim = (substr($dt,0,2).'-'.substr($dt,2,2).'-'.substr($dt,4,4));
		    		}
		    		$ocupacaovaga->save();
				
		    		//RH_LICAFAST
		    		/*Dados não encontrados na importação:  motivo | tipolicenca | idcidcategoria | idcidsubcategoria | idpublicacao */
		    		if (($obj2->afast_grupo != 0) and ($obj2->afast_ocor != 0))
	    			{	
					$licafast = $MIOLO->GetBusiness('rh','licafast');    
		    			$licafast->idVinculo = $obj2->siape;
		        		$dt = $obj2->afast_dt_inic;
		        		$licafast->dataInicio = (substr($dt,0,2).'-'.substr($dt,2,2).'-'.substr($dt,4,4));
					if ($licafast->dataInicio == "00-00-0000") 
					{
						$licafast->dataInicio = "01-01-1850";
					}
		    			$dt = $obj2->afast_dt_term;
		        		$licafast->dataFim = (substr($dt,0,2).'-'.substr($dt,2,2).'-'.substr($dt,4,4));
		    			$licafast->idGrupoOcorrencia = $obj2->afast_grupo;
		    			$licafast->idOcorrencia = $obj2->afast_ocor;
		    			$licafast->saveForced();
		    		}
	    		}//for
			$SESSAO = $MIOLO->getSession();
			$SESSAO->set('relatorio[]',$this->relatorio);
		} //else if vinculo
	}//Importar
}
?>
