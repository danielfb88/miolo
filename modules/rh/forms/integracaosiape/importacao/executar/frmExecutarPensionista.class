<?PHP
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */
ini_set("memory_limit","512M");
ini_set('max_execution_time','600');

class frmExecutarPensionista extends MForm
{
    protected $arrRegistros, $obj0; 

    function __construct()
    {
        parent::__construct('Executar importação dos Pensionistas'); 
        $this->SetClose($this->manager->GetActionURL('rh','main:integracaosiape:importacao'));
        $this->EventHandler();
      }

    function CreateFields()
    {
        $ui = $this->manager->getUI();
        $fields = array(new MLabel('<br><b>Informe os dados da importação a ser executada.</b>'),
			new MLabel('<br>'),
			new MTextField('mes','','Mês',10,'Formato: XX'),
			new MTextField('ano','','Ano',10, 'Formato: XXXX'),
			new MLabel('<br>'),
			);
        $this->SetFields($fields);
        $buttons = array(new MButton('btnEnviar', 'Enviar'));
        $this->SetButtons($buttons);
    } 


    function btnEnviar_click()
    {
	global $MIOLO, $obj0;

	$arquivo = $MIOLO->GetBusiness('common','arquivo');
	$mes = $this->getFormValue('mes');
	$ano = $this->getFormValue('ano');
	//Testar se o mes e ano estão no formato correto
	if (strlen($mes) != 2)
	{
		$this->addError("Informe o mês no formato correto, com 2 dígitos.");
	}	
	elseif ($mes<'01' or $mes>'12')
	{
		$this->addError("Informe um mês válido.");
	}
	elseif (strlen($ano) != 4)
	{
		$this->addError("Informe o ano no formato correto, com 4 dígitos.");
	}
	else
	{
		$idArquivo = $arquivo->getByMesAnoPensionista($mes,$ano);

		if ($idArquivo == NULL)
		{
			$this->addError("Não foi feito o upload do arquivo referente ao mês $mes, ano $ano.");
		}	
		else
		{	
        		$dados=	$arquivo->GetById($idArquivo);
			$tmp_name = $dados->caminho.$dados->nome.'.txt';

        		$arrRegistros = file($tmp_name);

			$obj0 = $MIOLO->GetBusiness('rh','tipo0');
			$obj0->BeginTransaction();

			TRY
			{    
    				$this->VarrePensionista($arrRegistros);
    				$obj0->EndTransaction();
				$this->addInfo(date("d/m/Y H:i:s") . " Término do importPensionista");
				//echo "\n \n \n" . date("d/m/Y H:i:s") . " Término do importPensionista \n\n";
			}
			CATCH (Exception $e)
			{
    				/*echo "\n \n Informe o seguinte erro a equipe de Suporte: " . $e->getMessage() . "\n";*/
			}
    		}
	}
}


function VarrePensionista($arrRegistros)
{
    global $MIOLO;

    /*echo(date("d/m/Y H:i:s")." - INICIO DO PROCESSAMENTO DE importPensionista.php."."\n");*/
    $representacaoPensao = $MIOLO->GetBusiness('rh','representacaopensao');
    $pensionista 		 = $MIOLO->GetBusiness('rh','pensionista');
    $pessoa 	 		 = $MIOLO->GetBusiness('common','pessoa');
    $municipio 	 		 = $MIOLO->GetBusiness('common','municipio');
    $countTemp = 0;
    $countPensionistas = 0;
    for ($i = 1; $i < (count($arrRegistros)); $i++ )
    {
	$registro = $arrRegistros[$i];
	$tipoRegistro = intval(substr($registro,24,1));
	$MATRICULA_PENSIONISTA = substr($registro,16,8);
	$MATRICULA_INSTITUIDOR = substr($registro,9,7);

	$this->limparPensionista($pensionista);
	$this->limparPessoa($pessoa);
	$this->limparRepresentacaoPensao($representacaoPensao);

	$pessoa->setPersistent(false);
	$pensionista->setPersistent(false);
	$representacaoPensao->setPersistent(false);

	switch ($tipoRegistro)
	{
		case 1:
		/*
		   Não é preciso processar os registro de tipo 1 pois, até o momento
		   não existem informações que precisam ser importadas.
		*/
		break;

		case 2:
		break;

		// DADOS CADASTRAIS PESSOAIS DO PENSIONISTA
		case 3:

			$pessoa->cpf 	  = substr($registro,80,11);
			$pessoa->nome 	  = trim(substr($registro,27,45)); // NOT NULL
			$dataNasc		  = substr($registro,72,2)."/".substr($registro,74,2)."/".substr($registro,76,4); // NOT NULL

			/*echo($i.")\t Tipo: ".$tipoRegistro."\t".date(" H:i:s")."\t ".++$countTemp."\t ".++$countPensionistas."\t"."$pessoa->cpf - $pessoa->nome - $dataNasc"."\n");*/

			if ( $dataNasc != "00/00/0000" )
			{
				$pessoa->datanasc = $dataNasc;
			}
			else
			{
			    /*echo("Esta pessoa possui data de nascimento: (00/00/0000). Foi gravado '01/01/5000' no banco de dados.\n");*/
				$pessoa->datanasc = "01/01/5000";
			}


			if ( intval($pessoa->cpf) > 0 )
			{
				if ( $pessoa->GetByCpf($pessoa->cpf) != null ) // ou NULL ou objPessoa
				{
					$pessoa = $pessoa->GetByCpf($pessoa->cpf);
					$pessoa->setPersistent(true);
				}
				else
				{
					if ( $pessoa->GetByNomeDataNasc($pessoa->nome,$pessoa->datanasc) != null )
					{
						$pessoa = $pessoa->GetByNomeDataNasc($pessoa->nome,$pessoa->datanasc);
						$pessoa->setPersistent(true);
					}
				}

				$pessoa->cpf 		= substr($registro,80,11);
				$pessoa->nome		= trim(substr($registro,27,45)); // NOT NULL
				$dataNasc		= substr($registro,72,2)."/".substr($registro,74,2)."/".substr($registro,76,4); // NOT NULL
				$pessoa->sexo 		= substr($registro,91,1); // NOT NULL
				$pessoa->idestadocivil 	= substr($registro,92,1);
				$pessoa->numrg 		= substr($registro,95,14);
				$pessoa->orgaorg	= substr($registro,109,5);

				$dataRG = substr($registro,114,2)."/".substr($registro,116,2)."/".substr($registro,118,4);
				if ( $dataRG != "00/00/0000" ) // DATA INVÁLIDA PARA O ORACLE
				{
					$pessoa->datarg = $dataRG;
				}
				else
				{
				    /*echo "Esta pessoa possui data de expedição do RG em: '00/00/0000'. Foi gravado '' no banco de dados.\n";*/
					$pessoa->datarg = "";
				}

				$pessoa->ufrg 			= substr($registro,122,2);
				$pessoa->endereco 		= substr($registro,124,40);
				$pessoa->bairro 		= substr($registro,164,25);

				// ---------------------------------- TO DO: municípo por codigo não informado na fita espelho e obrigatório no siga
				// SOLUÇÃO: pegar o município referente ao estado da carteira de identidade (rg)
				$nomeMunicipio = trim(substr($registro,189,30));
				$municipio->GetIdByNomeEstado($nomeMunicipio,$pessoa->ufrg);
				$pessoa->idmunicipio 	= $municipio->idMunicipio; // NOT NULL

				$pessoa->cep 			= substr($registro,219,8); // NOT NULL
				$pessoa->telefone 		= substr($registro,227,12);
				/*ALTERADO O TAMANHO DO CAMPO TITELEITOR NO BD*/
				$pessoa->tituloeleitor 	= substr($registro,239,13);
				$pessoa->nomemae 		= substr($registro,252,50);
				$pessoa->email 			= substr($registro,302,50);

				// ---------------------------------- TO DO: id pais nao informado na fita espelho e obrigatório no siga
				// SOLUÇÂO: colocar Brasil para todo mundo
				$pessoa->idpais			  = "024"; // NOT NULL
				$pessoa->idpaisnascimento = "024"; // NOT NULL

				if ( $pessoa->IsPersistent() )
				{
					$pessoa->dataultalt = date("d/m/Y");
				}
				$pessoa->Save();

				$pensionista->GetById($MATRICULA_PENSIONISTA);
				if ( !$pensionista->IsPersistent() )
				{
					$pensionista->idPensionista = $MATRICULA_PENSIONISTA;
				}

				$pensionista->idPessoa 		= $pessoa->idpessoa;
				$pensionista->idInstituidor = $MATRICULA_INSTITUIDOR;
				$pensionista->qtdDepIR 		= substr($registro,93,2);

				$pensionista->Save();

			}

		break;

		// DADOS CADASTRAIS DO BENEFÍCIO
		case 4:

			/*echo($i.")\t Tipo: ".$tipoRegistro."\t".date(" H:i:s")."\t ".++$countTemp."\n");*/

			// REPRESENTANTE LEGAL
			$pessoa->cpf = substr($registro,291,11);
			if ( intval($pessoa->cpf) > 0 )
			{

				if ( ( $pessoa->GetByCpf($pessoa->cpf) != null ) ) // ou NULL == false ou objPessoa
				{
				    // Recupera informações de uma pessoa do banco de dados, caso exista o CPF cadastrado
					$pessoa = $pessoa->GetByCpf($pessoa->cpf);
					$pessoa->setPersistent(true);
				}

				// Sobrescreve (atualiza) informações da pessoa, caso esteja no banco de dados
				$pessoa->endereco 	= substr($registro,147,40);
				$pessoa->bairro 	= substr($registro,187,25);
				$pessoa->municipio 	= substr($registro,212,30);
				$pessoa->cep		= substr($registro,242,8);
				$pessoa->telefone	= substr($registro,250,12);
				$pessoa->numrg		= substr($registro,262,14);
				$pessoa->orgaorg	= substr($registro,276,5);

		                // Campos que são not null no banco de dados
			    	/*echo("Instituidor: $MATRICULA_INSTITUIDOR - Pensionista: $MATRICULA_PENSIONISTA - Representante Legal com dados obrigatórios preenchidos automaticamente\n");*/
				$pessoa->idpais			  = "024"; // NOT NULL = BRASIL PARA TODOS
				$pessoa->idpaisnascimento = "024"; // NOT NULL = BRASIL PARA TODOS
				$pessoa->datanasc         = "01/01/5001";  // representante legal
				$pessoa->sexo             = "I"; // INDEFINIDO
				$pessoa->idmunicipio      = "5819"; // CAMPOS DOS GOYTACAZES

				$dataRG = substr($registro,281,2)."/".substr($registro,283,2)."/".substr($registro,285,4);
				if ( $dataRG != "00/00/0000" ) // Data inválida para o Oracle
				{
					$pessoa->datarg	= $dataRG;
				}
				else
				{
					$pessoa->datarg = "";
				}

				$pessoa->ufrg = substr($registro,289,2);
				$pessoa->nome = substr($registro,382,45);

				if ( $pessoa->IsPersistent() )
				{
					$pessoa->dataultalt = date("d/m/Y");
				}
				$pessoa->Save();

				// Representacao da Pensao
				$dtInicioProcuracao = substr($registro,366,2)."/".substr($registro,368,2)."/".substr($registro,370,4);

				if (  $dtInicioProcuracao != "00/00/0000" ) // Data inválida para o Oracle
				{
					$representacaoPensao->dataInicio = $dtInicioProcuracao;

					$dtFimProcuracao = substr($registro,374,2)."/".substr($registro,376,2)."/".substr($registro,378,4);
					if (  $dtFimProcuracao != "00/00/0000" ) // Data inválida para o Oracle
					{
						$representacaoPensao->dataFim = $dtFimProcuracao;
					}
					else
					{
						$representacaoPensao->dataFim = "";
					}

					// ---------------------------------- TO DO: Verificar se já existe, para não repetir no banco de dados
					// se a representacao já existir, então pegá-la para atualização.
					$ret = $representacaoPensao->GetByIdPensionistaDatas($MATRICULA_PENSIONISTA,$dtInicioProcuracao,$dtFimProcuracao);

					if ( $ret->IsPersistent() )
					{
						$representacaoPensao = $ret;
					}
					$representacaoPensao->idPensionista = $MATRICULA_PENSIONISTA;

					$representacaoPensao->idPessoa 	 = $pessoa->idpessoa;

					// ---------------------------------- *TO DO: O id do vinculo fornecido pela fita espelho nao bate com o do siga.
 				    	$representacaoPensao->idVinculo  = "";//$MATRICULA_INSTITUIDOR; //""; Matricula do Representante legal
				    	//$representacaoPensao->idVinculo  = substr($registro,140,7);
					$representacaoPensao->cartorio 	 = substr($registro,302,50);
					$representacaoPensao->livro 	 = substr($registro,352,8);
					$representacaoPensao->folha 	 = substr($registro,360,6);

					$representacaoPensao->Save();
				}
			}


			// PENSIONISTAS
			$pensionista->GetById($MATRICULA_PENSIONISTA);
			if ( !$pensionista->IsPersistent() )
			{
				$pensionista->idPensionista = $MATRICULA_PENSIONISTA;
			}

			$pensionista->idPessoa 				= $pessoa->idpessoa;
			$pensionista->idVinculo 			= $MATRICULA_INSTITUIDOR;
			$pensionista->origemPensao 			= substr($registro,27,1);
			$pensionista->numProcPensionista 	= intval(substr($registro,28,15));
			$pensionista->parentesco			= substr($registro,43,2);
			$pensionista->UORGControle			= intval(substr($registro,45,9));
			$pensionista->UORGLocal				= intval(substr($registro,54,9));
			$pensionista->bancoPgto 			= intval(substr($registro,63,3));
			$pensionista->tipoContaPgto 		= substr($registro,72,2);
			$pensionista->agenciaPgto 			= intval(substr($registro,66,6));
			$pensionista->contaPgto 			= intval(substr($registro,74,13));
			$pensionista->identContaJudicial	= substr($registro,87,18);
			$pensionista->numBenefINSS			= intval(substr($registro,105,10));
			$pensionista->especieBenefINSS		= substr($registro,115,3);
			$pensionista->tipoPensao			= substr($registro,118,2);
			$pensionista->naturezaPensao		= substr($registro,120,1);
			$pensionista->percentPensao			= substr($registro,121,3);

			$dataIPensao = substr($registro,124,2)."/".substr($registro,126,2)."/".substr($registro,128,4);
			if ( $dataIPensao != "00/00/0000" ) // Data inválida para o Oracle
			{
				$pensionista->dataInicioPensao = $dataIPensao;
			}
			else
			{
				// *TO DO:  --------------------------------- Verificar o preenchimento da data - o siga não permite 00/00/0000 ou null!
				// Resolvido com ifs
				$pensionista->dataInicioPensao = "";
			}

			$dataFPensao = substr($registro,132,2)."/".substr($registro,134,2)."/".substr($registro,136,4);
			if ( $dataFPensao != "00/00/0000" ) // Data inválida para o Oracle
			{
				$pensionista->dataFimPensao	= $dataFPensao;
			}
			else
			{
				$pensionista->dataFimPensao = "";
			}

			$pensionista->idRepresentacao			= substr($registro,140,7);
			$pensionista->numeradorCotaParte		= intval(substr($registro,427,2));
			$pensionista->denominadorCotaParte		= intval(substr($registro,429,2));
			$pensionista->numeradorCotaComp			= intval(substr($registro,431,2));
			$pensionista->denominadorCotaComp		= intval(substr($registro,433,2));
			$pensionista->mesInicioPgto				= intval(substr($registro,435,2));
			$pensionista->anoInicioPgto				= substr($registro,437,4);
			$pensionista->mesSuspPgto				= intval(substr($registro,441,2));
			$pensionista->anoSuspPgto				= substr($registro,443,4);
			$pensionista->idGrupoOcorrenciaExclusao	= intval(substr($registro,447,2));
			$pensionista->idOcorrenciaExclusao		= intval(substr($registro,449,3));

			$dataExclusao = substr($registro,452,2)."/".substr($registro,454,2)."/".substr($registro,456,4);
			if ( $dataExclusao != "00/00/0000" ) // Data inválida para o Oracle
			{
				$pensionista->dataExclusao = $dataExclusao;
			}
			else
			{
				// --------------------------------- *TO DO: Verificar o preenchimento da data  - o siga não permite 00/00/0000 ou null!
				// Resolvido com ifs
				$pensionista->dataExclusao = "";
			}

			$pensionista->Save();

		break;

		case 5:
		break;

		case 6:
		break;

		case 7:
		break;

		case 8:
		break;

	    case 9:
	        /*echo "\nRegistro Final (Tipo 9)\n";*/
		break;

		default:
			/*echo "\nTipo de registro não previsto!\n";*/
		break;
	}

}
/*echo("\n".date("d/m/Y H:i:s")." - Término do processamento do arquivo $fileNameTxt");*/
}

function limparPessoa(&$pessoa)
{

	$pessoa->cpf 			  = "";
	$pessoa->nome 			  = "";
	$pessoa->datanasc 		  = "";
	$pessoa->sexo 			  = "";
	$pessoa->idestadocivil 	  = "";
	$pessoa->numrg 			  = "";
	$pessoa->orgaorg 		  = "";
	$pessoa->ufrg 			  = "";
	$pessoa->endereco 		  = "";
	$pessoa->bairro 		  = "";
	$pessoa->idmunicipio 	  = "";
	$pessoa->cep 			  = "";
	$pessoa->telefone 		  = "";
	$pessoa->tituloeleitor 	  = "";
	$pessoa->nomemae 		  = "";
	$pessoa->email 			  = "";
	$pessoa->idpais			  = "";
	$pessoa->idpaisnascimento = "";

}


function limparRepresentacaoPensao(&$representacaoPesnao)
{
	$representacaoPensao->dataInicio 	= "";
	$representacaoPensao->dataFim 	 	= "";
	$representacaoPensao->dataFim 	 	= "";
	$representacaoPensao->idPensionista = "";
	$representacaoPensao->idPessoa 	 	= "";
	$representacaoPensao->idVinculo  	= "";
	$representacaoPensao->cartorio 	 	= "";
	$representacaoPensao->livro 	 	= "";
	$representacaoPensao->folha 	 	= "";
}


function limparPensionista(&$pensionista)
{
	$pensionista->idPessoa 					= "";
	$pensionista->idVinculo 				= "";
	$pensionista->origemPensao 				= "";
	$pensionista->numProcPensionista 		= "";
	$pensionista->parentesco				= "";
	$pensionista->UORGControle				= "";
	$pensionista->UORGLocal					= "";
	$pensionista->bancoPgto 				= "";
	$pensionista->tipoContaPgto 			= "";
	$pensionista->agenciaPgto 				= "";
	$pensionista->contaPgto 				= "";
	$pensionista->identContaJudicial		= "";
	$pensionista->numBenefINSS				= "";
	$pensionista->especieBenefINSS			= "";
	$pensionista->tipoPensao				= "";
	$pensionista->naturezaPensao			= "";
	$pensionista->percentPensao				= "";
	$pensionista->dataInicioPensao			= "";
	$pensionista->dataFimPensao				= "";
	$pensionista->idRepresentacao			= "";
	$pensionista->numeradorCotaParte		= "";
	$pensionista->denominadorCotaParte		= "";
	$pensionista->numeradorCotaComp			= "";
	$pensionista->denominadorCotaComp		= "";
	$pensionista->mesInicioPgto				= "";
	$pensionista->anoInicioPgto				= "";
	$pensionista->mesSuspPgto				= "";
	$pensionista->anoSuspPgto				= "";
	$pensionista->idGrupoOcorrenciaExclusao	= "";
	$pensionista->idOcorrenciaExclusao		= "";
	$pensionista->dataExclusao 				= "";
}



}
?>
