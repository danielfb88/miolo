<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

/**
 * Form Usuario
 */
class frmSetup extends Form
{
    /**
     * Header size
     */
    const TITULO = 4;

    const NAME = 0;
    const TRAN = 1;
    const STAT = 2;

    protected $groups = array();
    protected $transactions = array();
    protected $users = array();

    public function __construct()
    {
        global $MIOLO;


        parent::__construct('Instalação do Módulo RH');
        $this->SetClose($MIOLO->GetActionURL('rh', 'main:configuracao'));
        $this->SetIcon($MIOLO->GetUi()->GetImage('','configure_mini.png'));
        $this->defaultButton = FALSE;
        $this->EventHandler();
    }

    protected function loadGroups()
    {
        $this->groups['RH_GER_CADASTRO'] = array('Gerência de Cadastro/CAP/PRORH',
            array(
                'RH_MANTER_CADASTRO_PESSOA',
                'RH_MANTER_CADASTRO_FUNCIONARIO',
                'RH_EXCLUIR_FUNCIONARIO',
                'RH_CADASTRAR_FERIAS',
                'RH_CADASTRAR_APOSENTADORIA',
                'RH_CADASTRAR_LICAFAST',
                'RH_CADASTRAR_AVERB_TEMPO_SERV',
                'RH_INFORMACOES_FUNCIONARIO',
                'RH_CADASTRAR_MUDANCA_JORNADA',
                'RH_MANTER_CADASTRO_DE_FUNCOES',
                'RH_MANTER_CAD_PENSIONISTAS',
                'RH_ABRIR_PERIODO_AQUIS_FERIAS',
                'RH_RELATORIO_FERIAS',
                'RH_RELATORIO_LICAFAST',
                'RH_RELATORIO_FUNCOES',
                'RH_RELATORIO_PENSIONISTAS',
                'RH_RELATORIO_GERAL'
            ));
        $this->groups['RH_GER_CONTROLE_REMUNERACOES'] = array('Gerência de Controle de Remunerações/CAP/PRORH',
            array(
                'RH_INFORMACOES_FUNCIONARIO',
                'RH_RELATORIO_PENSIONISTAS',
                'RH_RELATORIO_ADICIONAIS'
            ));
        $this->groups['RH_GER_CAPACITACAO'] = array('Gerência de Capacitação/CEAP/PRORH',
            array(
                'RH_INFORMACOES_FUNCIONARIO',
                'RH_CADASTRAR_PROG_TITULACAO',
                'RH_CADASTRAR_LICAFAST',
                'RH_RELATORIO_LICAFAST'
            ));
        $this->groups['RH_GER_RECRUTAMENTO'] = array('Gerência de Recrutamento/CFAP/PRORH',
            array(
                'RH_INFORMACOES_FUNCIONARIO',
                'RH_CADASTRAR_LICAFAST',
                'RH_CADASTRAR_PROG_INTERSTICIO',
                'RH_CADASTRAR_CESSAO',
                'RH_CADASTRAR_MUDANCA_DE_CARGO',
                'RH_CADASTRAR_REMOCAO',
                'RH_RELATORIO_INTERSTICIOS',
                'RH_RELATORIO_FUNC_CEDIDOS',
                'RH_RELATORIO_LICAFAST'
            ));
        $this->groups['RH_GER_SEGURANCA'] = array('Gerência de Segurança/COSSBE/PRORH',
            array(
                'RH_INFORMACOES_FUNCIONARIO',
                'RH_CADASTRAR_ADICIONAL'
            ));
        $this->groups['RH_GER_SAUDE'] = array('Gerência de Saúde/COSSBE/PRORH',
            array(
                'RH_INFORMACOES_FUNCIONARIO',
                'RH_CADASTRAR_LICAFAST',
                'RH_RELATORIO_LICAFAST'
            ));
        $this->groups['RH_GER_BENEFICIOS'] = array('Gerência de Benefícios/COSSBE/PRORH',
            array(
                'RH_INFORMACOES_FUNCIONARIO'
            ));
        $this->groups['RH_SECRETARIO_UNIDADE'] = array('Secretaria de Unidade',
            array(
                'RH_INFORMACOES_FUNCIONARIO',
                'RH_CADASTRAR_FERIAS',
                'RH_CONTROLAR_FREQUENCIA',
                'RH_ABRIR_PERIODO_AQUIS_FERIAS',
                'RH_RELATORIO_FERIAS',
                'RH_RELATORIO_FREQUENCIA'
            ));
        $this->groups['RH_FUNCIONARIO'] = array('Funcionário',
            array(
                'RH_INFORMACOES_FUNCIONARIO'
            ));
    }
    protected function loadTransactions()
    {
        $this->transactions['RH_MANTER_CADASTRO_FUNCIONARIO'] = array('Manter Cadastro de Funcionários');
        $this->transactions['RH_RELATORIO_GERAL'] = array('Obter Relatório Geral');
        $this->transactions['RH_EXCLUIR_FUNCIONARIO'] = array('Excluir Funcionário');
        $this->transactions['RH_CADASTRAR_APOSENTADORIA'] = array('Cadastrar Aposentadoria');
        $this->transactions['RH_CADASTRAR_LICAFAST'] = array('Cadastrar Licença/Afastamento');
        $this->transactions['RH_RELATORIO_LICAFAST'] = array('Obter Relatório de Licenciados/Afastados');
        $this->transactions['RH_CONTROLAR_FREQUENCIA'] = array('Controlar Freqüência');
        $this->transactions['RH_RELATORIO_FREQUENCIA'] = array('Obter Relatório de Freqüência');
        $this->transactions['RH_CADASTRAR_ADICIONAL'] = array('Cadastrar Adicional');
        $this->transactions['RH_RELATORIO_ADICIONAIS'] = array('Obter Relatório de Adicionais');
        $this->transactions['RH_CADASTRAR_FERIAS'] = array('Cadastrar Férias');
        $this->transactions['RH_ABRIR_PERIODO_AQUIS_FERIAS'] = array('Abrir Período Aquisitivo de Férias');
        $this->transactions['RH_RELATORIO_FERIAS'] = array('Obter Relatório de Férias');
        $this->transactions['RH_CADASTRAR_AVERB_TEMPO_SERV'] = array('Cadastrar Averbação de Tempo de Serviço');
        $this->transactions['RH_CADASTRAR_MUDANCA_JORNADA'] = array('Cadastrar Mudança de Jornada');
        $this->transactions['RH_MANTER_CADASTRO_DE_FUNCOES'] = array('Manter Cadastro de Funções');
        $this->transactions['RH_RELATORIO_FUNCOES'] = array('Obter Relatório de Funções');
        $this->transactions['RH_MANTER_CAD_PENSIONISTAS'] = array('Manter Cadastro de Pensionistas');
        $this->transactions['RH_RELATORIO_PENSIONISTAS'] = array('Obter Relatório de Pensionistas');
        $this->transactions['RH_CADASTRAR_PROG_TITULACAO'] = array('Cadastrar Progressão por Titulação');
        $this->transactions['RH_CADASTRAR_PROG_INTERSTICIO'] = array('Cadastrar Progressão por Interstício');
        $this->transactions['RH_RELATORIO_INTERSTICIOS'] = array('Obter Relatório de Interstícios');
        $this->transactions['RH_CADASTRAR_REMOCAO'] = array('Cadastrar Remoção');
        $this->transactions['RH_CADASTRAR_MUDANCA_DE_CARGO'] = array('Cadastrar Mudança de Cargo');
        $this->transactions['RH_CADASTRAR_CESSAO'] = array('Cadastrar Cessão');
        $this->transactions['RH_RELATORIO_FUNC_CEDIDOS'] = array('Obter Relatório de Funcionários Cedidos');
        $this->transactions['RH_INFORMACOES_FUNCIONARIO'] = array('Obter Informações sobre Funcionário');
        $this->transactions['RH_HISTORICO_FUNCIONAL'] = array('Obter Histórico Funcional');
    }
    protected function loadUsers()
    {
        $this->users = array(
            array('RH_SECRETARIA','Secretária'),
            array('RH_SECRETARIA2','Secretáia2')
        );
    }
    public function CreateFields()
    {

        $fields = array(
           new TextHeader('',self::TITULO,'Grupos de Usuário')
        );
        $this->SetFields($fields);

        $buttons = array(
            new FormButton('btnStatus','Status'),
            new FormButton('btnCreate','Create missing groups/transactions'),
            new FormButton('btnAssoc','Associate groups/transactions')
        );
        $this->SetButtons($buttons);
    }
    public function showData()
    {
        $text  = "<ul>";
        foreach ($this->groups as $grupo=>$detalhes)
        {
            //$text .= ($detalhes[self::STAT]?"[".$detalhes[self::STAT]."]":NULL)."<li><b>$grupo</b>: ".$detalhes[self::NAME];
            $text .= "<li><b>[<em>".$detalhes[self::STAT]."</em>] $grupo</b>: ".$detalhes[self::NAME];
            foreach ($detalhes[self::TRAN] as $transaction)
            {
                $text .= "<ul>";
                $text .= "<li><u>[<em>".$this->transactions[$transaction][self::STAT]."</em>] $transaction</u>: {$this->transactions[$transaction][self::NAME]}</li>";
                $text .= "</ul>";
            }
            $text .= "</li>";
        }
        $text .= "</ul>";
/*
        $fields[] = new TextHeader('',self::TITULO,'Transactions');
        foreach ($this->transactions as $transaction => $descricao)
        {
            $fields[] = new Text('',"<b>$transaction</b>: $descricao");
        }

        $fields[] = new TextHeader('',self::TITULO,'Users');
        foreach ($this->users as $user)
        {
            $fields[] = new Text('',"$user[0]: $user[1]");
        }
*/
        $this->fields[] = new Text('',$text);
    }
    public function btnStatus_click()
    {
        global $MIOLO;

        $this->loadGroups();
        $this->loadTransactions();
        $this->loadUsers();
        $this->percorreTodos(FALSE);
        $this->showData();
    }
    public function btnCreate_click()
    {

        $this->loadGroups();
        $this->loadTransactions();
        $this->loadUsers();
        $this->percorreTodos(TRUE);
        $this->showData();
    }
    public function percorreTodos($createMissing=FALSE)
    {
        global $MIOLO;
        foreach($this->groups as $group=>$details)
        {
            $objGroup = $MIOLO->GetBusiness('common','grupo');
            $criteria = $objGroup->getCriteria();
            $criteria->addCriteria('grupo','=',"'$group'");
            $query = $criteria->retrieveAsQuery();
            switch($query->rowCount)
            {
                case 0:
                    $gstat = 'N';
                    if($createMissing)
                    {
                        $objGroup->idgrupo = NULL;
                        $objGroup->grupo = $group;
                        $objGroup->save();
                        $gstat = $objGroup->isPersistent()?'C':'F';
                    }
                break;
                case 1:
                    $gstat = 'I';
                break;
                default:
                    $gstat = '!';
             }       
                
            $this->groups[$group][self::STAT] = $gstat;
        }
        foreach($this->transactions as $transaction=>$details)
        {
            $objTrans = $MIOLO->GetBusiness('common','transacao');
            $criteria = $objTrans->getCriteria();
            $criteria->addCriteria('transacao','=',"'$transaction'");
            $query = $criteria->retrieveAsQuery();
            switch($query->rowCount)
            {
                case 0:
                    $gstat = 'N';
                    if($createMissing)
                    {
                        $objTrans->transacao = $transaction;
                        $objTrans->idSistema = 2; // 2 = SIGA
                        $objTrans->save();
                        $gstat = 'C';

                        if($objTrans->CheckError())
                        {
                            foreach($objTrans->GetErrors() as $error)
                            {
                                $this->AddError('Transação '.$transaction.": ".$error);
                                $gstat = 'E';
                            }
                        }
                    }
                break;
                case 1:
                    $gstat = 'I';
                break;
                default:
                    $gstat = '!';
             }       
                
            $this->transactions[$transaction][self::STAT] = $gstat;
        }
    }
    public function setAcesso()
    {
        global $MIOLO;
        foreach($this->groups as $kgroup=>$agroup)
        {
            $group = $MIOLO->GetBusiness('common','grupo');
            $group->getByGroup($kgroup);
            
            if($group->isPersistent())
            {
                $group->retrieveAssociation('acessos');
                var_dump(count($group->acessos));
                foreach($agroup[self::TRAN] as $ktrans=>$atrans)
                {
                    unset($trans);
                    $trans = $MIOLO->GetBusiness('common','transacao');
                    $trans->getByTransacao($atrans);
                    if($trans->isPersistent())
                    {
                        //$group->acessos[] = $trans;
                    }
                }
                var_dump(count($group->acessos));
                $group->save();
            }
            unset($group);
        }
    }
    public function btnAssoc_click()
    {
        $this->loadGroups();
        $this->loadTransactions();
        $this->loadUsers();
        $this->percorreTodos(FALSE);
        $this->showData();
        $this->setAcesso();
    }
}
?>
