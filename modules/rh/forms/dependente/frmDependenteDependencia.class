<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class frmDependenteDependencia extends MForm
{
	var $dependencia;

	function __construct($objDependencia)
  	{
    		$this->dependencia = $objDependencia;
    		parent::__construct('Dependência');
    		$this->EventHandler();
  	}

	function CreateFields()
  	{
    		$tabelaGeral = $this->manager->GetBusiness('common', 'tabelageral');
    		$query = $tabelaGeral->ListByTabela('RH_TIPODEPENDENCIA');
    		$fields = array(new MCalendarField('dataInicio', '', 'Data de Início'), new MCalendarField('dataFim', '', 'Data Fim'), new MSelection('idTipoDependencia','', 'Tipo', $query->result));
    		$this->SetFields($fields);
    		$this->SetData();
    		$buttons = array(new FormButton('btnPost', 'Enviar'), new FormButton('btnExcluir','Excluir'), );
    		$this->SetButtons($buttons);

		$validators = array(new MDateDMYValidator('dataInicio', '', 'required'), );
    		$this->SetValidators($validators);
    		$this->SetFieldAttr('btnExcluir', 'visible', $this->dependencia->isPersistent());
		if ($this->dependencia->isPersistent())
      			$this->SetButtonAttr('btnPost', 'label', 'Alterar');

	}

  	function SetData()
  	{
    		$this->SetFieldValue('dataInicio', $this->dependencia->dataInicio);
    		$this->SetFieldValue('dataFim', $this->dependencia->dataFim);
    		$this->SetFieldValue('idTipoDependencia', $this->dependencia->idTipoDependencia);
  	}

  	function btnPost_click()
  	{
		$this->dependencia->SetData($this->GetData());
		$data = $this->getData();
		$dataInicio = $data->dataInicio;
		$dataFim = $data->dataFim;
		$dataInicio = substr($dataInicio,6,4).substr($dataInicio,3,2).substr($dataInicio,0,2);
		$dataFim = substr($dataFim,6,4).substr($dataFim,3,2).substr($dataFim,0,2);
		if ($dataInicio > $dataFim)
		{
			$this->addError('Data Fim precisa ser maior que data início');
		}     
    		elseif (!$this->dependencia->idTipoDependencia)
    		{
      			$this->addError("Informe o tipo de dependência.");
    		} 
		else
    		{
      			try
      			{
        			$operacao = ($this->dependencia->isPersistent()) ? OP_UPD : OP_INS;
        			$descricao = "id dependente: {$this->dependencia->idDependente}, tipo dependencia: {$this->dependencia->idTipoDependencia}, data inicio: {$this->dependencia->dataInicio}, data fim: {$this->dependencia->dataFim}";

        			$this->dependencia->beginTransaction();
        			$this->dependencia->save();
        			$this->dependencia->log($operacao, $descricao);
        			$this->dependencia->endTransaction();
      			}
      			catch (exception $e)
      			{
        			$this->AddError($e->getMessage());
      			}
    		}
    		/*$this->setFieldValue('dataInicio', '');
    		$this->setFieldValue('dataFim', '');
    		$this->setFieldValue('idTipoDependencia', '');*/
  	}
  	function btnExcluir_click()
  	{
		$action_sim = $this->manager->GetActionURL('rh', 'main:dependente', $this->dependencia->idDependente, array('form' => 'dependencias', 'conf' => 'sim','idTipoDependencia' => $this->dependencia->idTipoDependencia, 'event' =>'btnExcluir:click'));
		$action_nao = $this->manager->GetActionURL('rh', 'main:dependente', $this->dependencia->idDependente, array('form' => 'dependencias', 'conf' => 'nao','idTipoDependencia' => $this->dependencia->idTipoDependencia));

		$conf = $this->GetFormValue('conf');

    		if ($conf == 'sim')
    		{
      			try
      			{
        			$this->dependencia->delete();
        			$this->dependencia->log(OP_DEL, "id dependente: {$this->dependencia->idDependente}, tipo dependencia: {$this->dependencia->idTipoDependencia}, data inicio: {$this->dependencia->dataInicio}, data fim: {$this->dependencia->dataFim}");

				$this->manager->Information('Dependência excluída com sucesso', $this->manager->GetActionURL('rh', 'main:dependente', $this->dependencia->idDependente, array('form' =>'dependencias')));

      			}	
      			catch (exception $e)
      			{
        			$this->manager->error("Informe o seguinte erro à equipe do CGCO: " . $e->getMessage());
      			}
    		} 
		else
    		{
      			$this->manager->Question("Tem certeza que deseja excluir a dependência " . $this->dependencia->tipoDependencia . " ?", $action_sim, $action_nao);
    		}	
  	}
}
?>
