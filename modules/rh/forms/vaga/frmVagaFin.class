<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

/**
 * Formulário de finalização de vaga
 */
class frmVagaFin extends Form
{
	/**
	 * Objeto Vaga
	 * @access protected
	 * @var BusinessRhVaga
	 */
	protected $objVaga;

    function __construct($objVaga)
    {
        global $MIOLO, $module;

		$this->objVaga = $MIOLO->GetBusiness($module,'vaga',$objVaga->numeroVaga);
        parent::__construct('Finalizar Vaga');
        $this->SetClose($MIOLO->GetActionURL($module,'main:vaga:find'));
        $this->EventHandler();
    }

    function CreateFields()
    {
        global $MIOLO, $module, $action, $item;
        
        $fldnumerovaga =  new TextField('numeroVaga','','Número da Vaga','20');

        $fields = array(
            new Spacer('10px'),
            new Separator('Escolha a data de finalização da vaga.'),
            new Spacer('5px'),
            array(
            	new TextField('inicio','','Data de Criação',10)
            ),
            array(
            	//new MTextField('fim','','Data de Finalização',10,'dd/mm/aaaa')
				new MCalendarField('fim','','Data de Finalização',10)
            ),
            new Spacer('10px'),
            array (
                new Text('comentario1','<b>Atenção:</b>'),
                new Text('comentario2','Ao finalizar a vaga, ela não poderá mais ser editada!'),
            ),
            new Spacer('10px'),
         );
		
        $this->SetFields($fields);
        
        $this->SetFieldAttr('numeroVaga','readonly','true');


        $this->SetFieldAttr('comentario1','color','red');
        $this->SetFieldAttr('comentario2','color','blue');
        
        $this->inicio->addAttribute('readonly', true);
        $this->fim->addAttribute('readonly', true);

        $this->SetFieldValue('inicio', $this->formatData($this->GetData()->dataInicio));
	    
	    //$this->fim->addMask('##/##/####',true,'Valor Inválido! Apenas valores numéricos são permitidos!');

        $validators = array(
            new RequiredValidator('fim'),
        );
        
        $this->SetValidators($validators);

        $cancel = $MIOLO->GetActionURL($module,'main:vaga:dados', $item);

		$buttons = array(
			new FormButton('btnSalvar','Finalizar'),
            new FormButton('btnCancelar','Cancelar', $cancel)
        );
		$this->SetButtons($buttons);
    }

	function GetData()
	{
        $data = new FormData();
		$data->numeroVaga   = $this->objVaga->numeroVaga;
		$data->idGrupoCargo = $this->objVaga->idGrupoCargo;
        $data->idCargo      = $this->objVaga->idCargo;
        $data->dataInicio	= $this->objVaga->dataInicio;
		$data->dataFim		= $this->GetFormValue('fim');
		$data->origem		= $this->objVaga->origem;
		$data->idSetor		= $this->objVaga->idSetor;
		
        return $data;
	}

	public function btnSalvar_click()
	{
		global $MIOLO, $module, $self;
		
		$dataFim 	 = $this->getFieldValue('fim');
		$dataInicio  = Form::GetFormValue('inicio');

        $this->objVaga->SetData($this->GetData());
        
/*
        $grupoC = $MIOLO->GetBusiness($module,'grupocargo');    
        $grupoC = $grupoC->GetById($data->idGrupoCargo);
        $cargoC = $grupoC->getCargo($this->objVaga->idCargo);
        if (empty($cargoC->descricao))
        {
            $msg = 'Escrever aqui!';
            $goto = $MIOLO->GetActionURL($module,$self);
            $caption = 'error caption';
            $event = "promptHandler;error";
            $MIOLO->Error($msg, $goto, $caption, $event);
        }
        var_dump($this->objVaga->idCargo);
        echo"<pre>";var_dump($grupoC);echo"</pre>";
*/
		if(trim($dataFim) == "")
		{
			$this->addError('Forneça uma data de finalização');
		}
		elseif($this->invertData($dataInicio) > $this->invertData($dataFim) )
		{
			$this->addError('A data de finalização não pode ser anterior à data de início');
		}
		else
		{
			$this->objVaga->save();
			if ( $this->objVaga->CheckError() )
			{
				foreach( $this->objVaga->GetErrors() as $e )
				{
					$this->AddError("Informe o seguinte erro a equipe do CGCO: ".$e);
				}
			}
			else{
				$go = $MIOLO->GetActionURL($module,'main:vaga:find');
				$this->manager->information('Vaga finalizada com sucesso!',$go);
			}
		}
	}
	
	function invertData($datainv)
	{//recebe a data e o separador

		   $ano = substr("$datainv",6, 4);
		   $mes = substr("$datainv",3, 2);
		   $dia = substr("$datainv",0, 2);
		   $datainv = "$ano$mes$dia";

		   return $datainv;
	}
	
	//passa a data no formato aaaa-mm-dd para o formato dd/mm/aaaa
	function formatData($data)
	{
		$ano = substr("$data",0, 4);
		$mes = substr("$data",5, 2);
		$dia = substr("$data",8, 2);
		$dataFormatada = "$dia/$mes/$ano";

		return $dataFormatada;
	}

 }
?>
