<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

/**
 * Formulário de edição de dados de Contrato
 */
class frmContratoTerceirizadoDados extends Form
{

	protected $objContrato;
	
    function __construct($objContrato)
    {
        global $MIOLO, $item;
		$this->objContrato = $objContrato; 
        parent::__construct('Dados do Contrato');
        $this->SetClose($MIOLO->GetActionURL('rh','main:contrato',$item));
        $this->EventHandler();
    }

    function CreateFields()
    {
       global $MIOLO, $module;

		$fields = array(
            $numero = new TextField('numContrato',$this->objContrato->numContrato,'Número do Contrato',8,'No formato: 999/9999'),
            $dataInicio = new MCalendarField('dataInicio',$this->objContrato->dataInicio,'Data Início',10),
            $dataFim = new MCalendarField('dataFim',$this->objContrato->dataFim,'Data Fim',10),
            $dataProrrogacao = new MCalendarField('dataProrrogacao',$this->objContrato->dataProrrogacao,'Data de Prorrogação',10),
            new MMultiLineField('justificativaPror',$this->objContrato->justificativaPror,'Justificativa da Prorrogação',60,4,60,'Máx. 500'),
            new MHiddenField('idInstituicao', $this->objContrato->idInstituicao),             
            new MLookupFieldValue('instituicao','','Instituição',60), 
            new MHiddenField('idSetor', $this->objContrato->idSetor),
			new MLookupFieldValue('lkpSetor','','Setor',60),
			new MMultiLineField('objeto',$this->objContrato->objeto,'Descrição',60,4,60,'Máx. 200'),
			new MMultiLineField('obs',$this->objContrato->obs,'Observação',60,4,60,'Máx. 500'),
        );
        $this->SetFields($fields);
		
		$this->SetFieldAttr('numContrato','readonly',true);
		
		$this->justificativaPror->addAttribute('maxlength',500);
		$this->objeto->addAttribute('maxlength',200);
		$this->obs->addAttribute('maxlength',500);
		
		//lookup setor
		$this->SetFieldAttr('lkpSetor','module','common');
   	 	$this->SetFieldAttr('lkpSetor','item','setor');
  	 	$this->SetFieldAttr('lkpSetor','event','filler');
    		$this->SetFieldAttr('lkpSetor','related','idSetor,null,lkpSetor,null'); 
    	
    	//lookup instituição
    	$this->SetFieldAttr('instituicao','module','common');
        $this->SetFieldAttr('instituicao','item','instituicao');
        $this->SetFieldAttr('instituicao','event','filler');
        $this->SetFieldAttr('instituicao','related','idInstituicao,null,instituicao');
		
		$buttons = array(
        		new FormButton('btnSalvar', 'Enviar')
            	);
		$this->SetButtons($buttons);
		$validators = array(
		       //new MMaskValidator('numContrato','','99999999','required'),
		       new MRequiredValidator('numContrato'),
		       //new MRequiredValidator('instituicao'),
		       new MRequiredValidator('lkpSetor'),   
		  	   new MRequiredValidator('dataInicio'),
			   new MRequiredValidator('dataFim'),
		   	   //new MRequiredValidator('dataProrrogacao'), 
		);
		$numero->addAttribute('maxlength',8);
		$dataInicio->addAttribute('maxlength',10);
        $dataFim->addAttribute('maxlength',10);
        $dataProrrogacao->addAttribute('maxlength',10);
        $this->SetValidators($validators);

		$this->SetData();

    }
	
	function SetData()
	{
		$data = $this->objContrato;
		$this->SetFieldValue('numContrato',$data->numContrato);
		$this->SetFieldValue('dataInicio',$data->dataInicio);
		$this->SetFieldValue('dataFim',$data->dataFim);
		if(!strcmp($data->dataProrrogacao,"01/01/0001"))
		{
			$this->SetFieldValue('dataProrrogacao',null);
		}
		else
		{
			$this->SetFieldValue('dataProrrogacao',$data->dataProrrogacao);
	    }
	    $this->SetFieldValue('idInstituicao',$data->idInstituicao);
		$instituicao = $this->manager->getBusiness('common','instituicao', $data->idInstituicao);
		$this->SetFieldValue('instituicao',$instituicao->nome);		
		$this->SetFieldValue('idSetor',$data->idSetor);
		$setor = $this->manager->getBusiness('common','setor', $data->idSetor);
		$this->SetFieldValue('lkpSetor',$setor->nome);
		$this->SetFieldValue('objeto',$data->objeto);
		$this->SetFieldValue('obs',$data->obs);
	}


	public function btnSalvar_click()
	{
		global $MIOLO, $page;
		$data = $this->getData();
		$contrato = $this->manager->GetBusiness('rh','contrato');
        	$contrato = $contrato->GetByNumero($data->numContrato);
		$this->objContrato->SetData($data);

		$dataInicio = $data->dataInicio;
		$dataFim = $data->dataFim;
		$dataProrrogacao = $data->dataProrrogacao;
		$dataInicio = substr($dataInicio,6,4).substr($dataInicio,3,2).substr($dataInicio,0,2);
		$dataFim = substr($dataFim,6,4).substr($dataFim,3,2).substr($dataFim,0,2);
		$dataProrrogacao = substr($dataProrrogacao,6,4).substr($dataProrrogacao,3,2).substr($dataProrrogacao,0,2);
		
		if(Form::getFormValue('instituicao') == null)
		{
			$this->addError('Informe uma instituição');
		}
		elseif ($dataInicio > $dataFim)
		{
			$this->addError('Data Fim precisa ser maior que data início');
		}
		elseif($dataProrrogacao && $dataFim > $dataProrrogacao)
		{
			$this->addError('Data Prorrogação precisa ser maior que data fim');
		}
		else
		{
			if ($contrato->idContrato)
			{
	    			$this->objContrato->update();
	    			$go = $MIOLO->GetActionURL('rh','main:contrato',$this->objContrato->idContrato);
	        		if ( $this->objContrato->CheckError() )
	        		{
	        			foreach( $objContrato->GetErrors() as $e )
	        			{
	        				$this->AddError("Informe o seguinte erro a equipe de Suporte: ".$e);
	        			}
	        		}
	        		else
        			{
        				$MIOLO->Information("Registro atualizado com sucesso!",$go);
	        		}
			}
			else
			{
        	    		$this->addInfo("Não foi encontrado um Contrato com esse número em nosso banco de dados. Confira se as informações estão corretas.");
			}
		}
	}
}
?>
