<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class frmCursoExtNew extends MForm
{


	function __construct()
    	{
        	parent::__construct('Cadastrar Novo Curso ou Evento Externo');
        	$this->eventHandler();
    	}


    	function createFields()
    	{
        	global $MIOLO;
		
        	$fields = array(
           		new MTextField('nome','','Nome do Curso',60,'Completo por extenso'),
			new MLookupFieldValue('lkpInstituicao','','Instituição', 75),
			new MHiddenField('idinstituicao','','Instituição'),
			new MTextField('cargaHoraria','','Carga Horária',5,'Total do Curso (em horas)'),
            		new MCalendarField('datainicio','','Data Início','10'),
            		new MCalendarField('datafim','','Data Fim','10'),
            		new MMultiLineField('obs','','Observações',20,2,80),
        		);
        	$this->SetFields($fields);
		
		$buttons = array(
			new MButton('btnNew','Enviar'),
        			);
		$this->SetButtons($buttons);

		$this->nome->addAttribute('maxlength','100');
		$this->cargaHoraria->addAttribute('maxlength','3');
        	$this->datainicio->addAttribute('maxlength','10');
        	$this->datafim->addAttribute('maxlength','10');
        	$this->obs->addAttribute('maxlength','200');

		$this->SetFieldAttr('lkpInstituicao','module','common');
        	$this->SetFieldAttr('lkpInstituicao','item','instituicao');
        	$this->SetFieldAttr('lkpInstituicao','event','filler');
        	$this->SetFieldAttr('lkpInstituicao','related','idinstituicao,,lkpInstituicao');
        	$this->SetFieldAttr('lkpInstituicao','filter','lkpInstituicao');

		$validators = array(
			new MRequiredValidator('nome'),
			new MRequiredValidator('idinstituicao'),
			new MRequiredValidator('cargaHoraria'),
			new MRequiredValidator('datainicio'),
			new MRequiredValidator('datafim'),
		);
		$this->SetValidators($validators);

	}


    	function btnNew_click()
    	{
		global $MIOLO, $page, $module;
		
		$curso = $MIOLO->GetBusiness($module,'capacitacaocurso');
		
		$curso->nome			= trim($this->GetFormValue('nome'));
		$curso->idinstituicao	= $this->GetFormValue('idinstituicao');
		$curso->cargaHoraria	= $this->GetFormValue('cargaHoraria');
		$curso->dataInicio	    = $this->GetFormValue('datainicio');
		$curso->dataFim			= $this->GetFormValue('datafim');
		$curso->obs				= trim($this->GetFormValue('obs'));

		$k = new MKrono();

		if ( trim($curso->idinstituicao) == '0001' )
		{
		    $this->addError('Cursos efetuados na IFF não devem ser cadastrados nesse formulário.');		    
		}
		elseif(strlen(trim($curso->nome)) < '5')
		{
			$this->addError('Informe o Nome do Curso ou Evento Externo');
		}	
		elseif(strlen(trim($curso->cargaHoraria)) < '1')
		{
			$this->addError('Informe A Carga Horária do Curso / Evento Externo');
		}
		elseif(!is_numeric($curso->cargaHoraria) or ($curso->cargaHoraria < '0'))
		{
			$this->addError('Informe A Carga Horária do Curso / Evento Externo corretamente');
		}
		elseif ( $curso->cursoRepetido() )
		{
		    $this->addError('Um curso com este <u>NOME</u>, <u>INSTITUIÇÃO</u> e <u>DATAFIM</u> já foi cadastrado.');		    
		}
		elseif ( $k->compareDate($curso->dataInicio,">",$curso->dataFim) )
		{
                    $this->addError("Data início não pode ser maior que a Data Fim.");
		}
		//if (!$this->hasErrors())
		else
		{
			try
			{
				$curso->save();
				$go = $MIOLO->GetActionURL('rh','main:capacitacao:cursosexternos:main',$curso->idcurso);
				$page->Redirect($go);
			}
			catch (Exception $e)
			{
				$this->AddError($e->GetMessage());
			}
		}
     }
 }

?>
