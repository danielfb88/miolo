<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class frmCursoExtDados extends MForm
{
	protected $objCurso;

    	function __construct($objCurso)
    	{
		$this->objCurso = $objCurso;
        	parent::__construct('Dados do Curso ou Evento Externo: ' . $this->objCurso->nome);
        	$this->EventHandler();
    	}

    	function CreateFields()
    	{
        	global $MIOLO;
		
		$this->objCurso->getInstituicao();

		$fields = array(
           		new MTextField('nome',$this->objCurso->nome,'Nome',60,'Completo por extenso'),
			new MLookupFieldValue('lkpInstituicao',$this->objCurso->instituicao->nome,'Instituição', 75),
			new MHiddenField('idinstituicao',$this->objCurso->idinstituicao,'Instituição'),
			new MTextField('cargaHoraria',$this->objCurso->cargaHoraria,'Carga Horária',5,'Total do Curso (em horas)'),
            		new MCalendarField('datainicio',$this->objCurso->dataInicio,'Data Início','10'),
            		new MCalendarField('datafim',$this->objCurso->dataFim,'Data Fim','10'),
            		new MMultiLineField('obs',$this->objCurso->obs,'Observações',20,2,80),
        		);

        	$this->SetFields($fields);

		$this->SetFieldAttr('lkpInstituicao','module','common');
        	$this->SetFieldAttr('lkpInstituicao','item','instituicao');
        	$this->SetFieldAttr('lkpInstituicao','event','filler');
        	$this->SetFieldAttr('lkpInstituicao','related','idinstituicao,,lkpInstituicao');
        	$this->SetFieldAttr('lkpInstituicao','filter','lkpInstituicao');

		$this->nome->addAttribute('maxlength','100');
		$this->cargaHoraria->addAttribute('maxlength','3');
        	$this->datainicio->addAttribute('maxlength','10');
        	$this->datafim->addAttribute('maxlength','10');
        	$this->obs->addAttribute('maxlength','200');
		
		$buttons = array(
			new MButton('btnPost','Enviar'),
        			);
		$this->SetButtons($buttons);
		
		$validators = array(
			new MRequiredValidator('nome'),
			new MRequiredValidator('idinstituicao'),
			new MRequiredValidator('cargaHoraria'),
			new MRequiredValidator('datainicio'),
			new MRequiredValidator('datafim'),
		);

		$this->SetValidators($validators);
    	}


	public function btnPost_click()
	{
		$this->objCurso->nome           = trim($this->GetFormValue('nome'));
		$this->objCurso->idinstituicao  = $this->GetFormValue('idinstituicao');
		$this->objCurso->cargaHoraria   = $this->GetFormValue('cargaHoraria');
		$this->objCurso->dataInicio	    = $this->GetFormValue('datainicio');
		$this->objCurso->dataFim		= $this->GetFormValue('datafim');
		$this->objCurso->obs			= trim($this->GetFormValue('obs'));

		$k = new MKrono;
		if ( trim($this->objCurso->idinstituicao) == '0001' )
		{
		    $this->addError('Cursos externos não devem ser alterados para IFF nesse formulário.');		    
		}
		elseif(strlen(trim($this->objCurso->nome)) < '5')
		{
			$this->addError('Informe o Nome do Curso ou Evento Externo');
		}	
		elseif(strlen(trim($this->objCurso->cargaHoraria)) < '1')
		{
			$this->addError('Informe A Carga Horária do Curso / Evento Externo');
		}
		elseif(!is_numeric($this->objCurso->cargaHoraria) or ($this->objCurso->cargaHoraria < '0'))
		{
			$this->addError('Informe A Carga Horária do Curso / Evento Externo corretamente');
		}
		elseif ( $k->compareDate($this->objCurso->dataInicio,">",$this->objCurso->dataFim) )
		{
                    $this->addError("Data início não pode ser maior que a Data Fim.");
		}
		//if (!$this->hasErrors())
		else
		{
			try
			{
				$this->objCurso->update();
				$this->AddInfo("Dados cadastrados com sucesso!");
			}
			catch (Exception $e)
			{
				$this->AddError($e->GetMessage());
			} 
		}
	}
 }
?>
