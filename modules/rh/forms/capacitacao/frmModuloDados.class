<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class frmModuloDados extends MForm
{
	protected $objModulo;

    	function __construct($objModulo)
    	{
		$this->objModulo = $objModulo;
        	parent::__construct('Dados do Módulo: ');
        	$this->EventHandler();
    	}

    	function CreateFields()
    	{
        	global $MIOLO;

        	$aStatus = array("A"=>"Aberto","F"=>"Fechado");	   
   		$aTurno = array("I"=>"Integral","D"=>"Diurno","N"=>"Noturno");		
        	$curso = $this->manager->getBusiness('rh','capacitacaocurso');
        	$query = $curso->listAll();

        	$fields = array(
            	new MSelection('idcurso',$this->objModulo->idcurso,'Curso',$query->chunkResult()),
            	new MTextField('modulo',$this->objModulo->modulo,'Número Módulo',4),
            	new MTextField('nome',$this->objModulo->nome,'Nome',80),
            	new MCalendarField('datainicio',$this->objModulo->datainicio,'Data Início'),
            	new MCalendarField('datafim',$this->objModulo->datafim,'Data Fim'),
            	new MTextField('horainicio',$this->objModulo->horainicio,'Hora Início','5'),
            	new MTextField('horafim',$this->objModulo->horafim,'Hora Fim','5'),
            	new MTextField('cargahoraria',trim($this->objModulo->cargahoraria),'Carga Horária'),
            	new MTextField('vagas',trim($this->objModulo->vagas),'Vagas','3'),
            	new MSelection('turno',$this->objModulo->turno,'Turno',$aTurno),
            	new MTextField('local',$this->objModulo->local,'Local',30),
            	new MTextField('diasemana',$this->objModulo->diasemana,'Dias da Semana',40),
            	new MTextField('anosemestre',$this->objModulo->anosemestre,'Ano.Semestre',10),
            	new MSelection('status',$this->objModulo->status,'Status',$aStatus),
            	new MMultiLineField('observacoes',$this->objModulo->observacoes,'Observações',20,2,80),
        			);
		
        	$this->SetFields($fields);
        	$this->datainicio->addAttribute('onKeyUp','makeMask(this, \'##/##/####\');');
        	$this->datafim->addAttribute('onKeyUp','makeMask(this, \'##/##/####\');');
        	$this->horainicio->addAttribute('onKeyUp','makeMask(this, \'##:##\');');
        	$this->horafim->addAttribute('onKeyUp','makeMask(this, \'##:##\');');
        	$this->nome->addAttribute('maxlength','100');
        	$this->modulo->addAttribute('maxlength','3');
        	$this->vagas->addAttribute('maxlength','3');
        	$this->local->addAttribute('maxlength','100');
        	$this->datainicio->addAttribute('maxlength','10');
        	$this->datafim->addAttribute('maxlength','10');
        	$this->cargahoraria->addAttribute('maxlength','5');
        	$this->cargahoraria->addAttribute('maxlength','5');
        	$this->anosemestre->addAttribute('maxlength','6');
        	$this->observacoes->addAttribute('maxlength','200');
		
		$buttons = array(
			new MButton('btnPost','Enviar'),
        			);
		$this->SetButtons($buttons);
		
		$validators = array(
			new MCompareValidator('idcurso','','!=','','s','required',"Campo \"Curso\" deve ser informado."),
			new MRequiredValidator('nome'),
			new MRequiredValidator('datainicio'),
			new MRequiredValidator('datafim'),
			
			new IntegerValidator('vagas'),
			new IntegerValidator('cargahoraria'),
		);

		$this->SetValidators($validators);
    	}

	public function btnPost_click()
	{
		$k = new MKrono();
      $data = $this->getData();
		$data->nome = strToUpper($data->nome);
		$dataFim = $this->GetFormValue('datafim');
	   $dataInicio = $this->GetFormValue('datainicio');
		$horaInicio = $this->getFormValue('horainicio');
		$hInicio = explode(':',$horaInicio);
		$horaFim = $this->getFormValue('horafim');
		$hFim = explode(':',$horaFim);
		$codModulo = $this->getFormValue('modulo');
		
	   // Retirando os caracteres especiais. :-)
		$caracteres = array("#","*", "&", "%", "(", ")", "$", "@", "!", "'", "\"", "+", "=", "-", ".", ",", "^", "?", ":", "}", "]", "[", "º","{","|",">","<",";");
		$data->nome = str_replace($caracteres,"",$data->nome);
		$data->local = str_replace($caracteres,"",$data->local);
		$data->observacoes = str_replace($caracteres,"",$data->observacoes);
		$data->anosemestre = str_replace($caracteres,"",$data->anosemestre);
		$data->diasemana = str_replace($caracteres,"",$data->diasemana);
		
		if(strlen(trim($codModulo)) < '1')
		{
			$this->addError('Informe o código do módulo');
		}
		elseif (strlen(trim($data->nome)) < '5')
		{
			$this->addError('Informe o nome do Módulo');
		}
		elseif ( $k->compareDate($dataInicio,">",$dataFim) )
		{
          $this->addError("Data início não pode ser maior que a Data Fim.");
		}
		elseif(trim(strlen($horaInicio)) != '5')
		{
			$this->addError("Informe a Hora Início no padrão 00:00");
		}
		elseif($horaInicio[2] != ":")
		{
			$this->addError('Informe a Hora Início no padrão 00:00');
		}
		elseif(!is_numeric($hInicio[0]) || !is_numeric($hInicio[1]))
		{
			$this->addError('Informe a Hora Início corretamente utilizando números');
		}
		elseif($hInicio[0] > '23' || $hInicio[1] >'59')
		{
			$this->addError('Informe a Hora Início Corretamente');
		}

		elseif(trim(strlen($horaFim)) != '5')
		{
			$this->addError("Informe a Hora Fim no padrão 00:00");
		}
		elseif($horaFim[2] != ":")
		{
			$this->addError('Informe a Hora Fim no padrão 00:00');
		}
		elseif(!is_numeric($hFim[0]) || !is_numeric($hFim[1]))
		{
			$this->addError('Informe a Hora Fim corretamente utilizando números');
		}
		elseif($hFim[0] > '23' || $hFim[1] >'59')
		{
			$this->addError('Informe a Hora Fim Corretamente');
		}
		elseif(! is_numeric(trim($this->getFormValue('vagas'))))
		{
			$this->addError('Informe a quantidade de Vagas');
		}
		elseif($this->getFormValue('vagas') < 0)
		{
			$this->addError('Informe a quantidade de Vagas Corretamente');	
		}
		else
		{
        		$data->modulo = substr('000' . trim($data->modulo),-3);		
			$this->objModulo->SetData($data);
        		try
        		{
            			$this->objModulo->save();
            			$this->AddInfo("Dados alterados com sucesso!");
        		}
        		catch (Exception $e)
        		{
            			$this->AddError($e->GetMessage());
        		} 
		}
	}
 }
?>
