<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class frmIntersticio extends MForm
{
    function __construct()
    {
        global $MIOLO, $self, $module, $page, $action;

        parent::__construct('Relatório de Interstícios para Progressão');
        $this->page->AddJsCode(file_get_contents(dirname(__FILE__).'/../../mask.js'));
        $this->SetClose($this->manager->GetActionURL('rh', 'main:relatorio'));
        $this->EventHandler();
    }

    function CreateFields()
    {
        global $MIOLO, $self, $module, $page, $action, $theme;
        $ui = $this->manager->getUI();


         $meses = array(
            '01' => "Janeiro",
            '02' => "Fevereiro",
            '03' => "Março",
            '04' => "Abril",
            '05' => "Maio",
            '06' => "Junho",
            '07' => "Julho",
            '08' => "Agosto",
            '09' => "Setembro",
            '10' => "Outubro",
            '11' => "Novembro",
            '12' => "Dezembro",
        );
/*
var_dump($meses);

        $tabelaGeral = $MIOLO->GetBusiness('common', 'tabelageral');
        $query = $tabelaGeral->ListByTabela('MESES');
        $meses = $query->result();

var_dump($meses);
*/


        $provimento = $this->manager->getBusiness('rh','provimento');       
        $query = $provimento->listSetoresLotacao();

        $docente = array ('01' => 'Docentes', '02' => 'TAs');

        $grid = $ui->getGrid('rh','gridIntersticio', NULL,'relatorios');

        $fields = array(
            new MSpacer('5px'),
            array (
                new MSpan('help','&nbsp'),
            ),
            new MSpacer('5px'),
            new MSpacer('15px'),
            new MSelection('mes',date("m")-1,'Mês', $meses, true),
            new MSpacer('15px'),
            new MTextField('ano',date('Y'),'Ano','6','com 4 dígitos - formato milhar'),
            new MSpacer('15px'),
            new MSelection('idSetor','','Setor',$query->result,false),
            new MSpacer('15px'),
            new MSelection('docente','','Setor',$docente,false),
            new MSpacer('15px'),
            $grid,
        ); 
        $this->SetFields($fields);

        $this->ano->addAttribute('maxLength','4');

        $this->ano->addAttribute('onChange',"makeMask(this,'####');");
        $this->ano->addAttribute('onKeyUp',"makeMask(this,'####');");
        $this->ano->addAttribute('onBlur',"makeMask(this,'####');");

        $this->ano->addAttribute('onFocus',"setHelp('Informe o ano de referência no formato milhar');");
        $this->ano->addAttribute('onBlur',"setHelp('&nbsp');");
        
        $this->mes->addAttribute('onFocus',"setHelp('Selecione o mês de referência');");
        $this->mes->addAttribute('onBlur',"setHelp('&nbsp');");

        $buttons = array(
            new MButton('btnPost','Exibir'),
            new MButton('btnReport','Gerar Relatório','PDF')
        );
        $this->SetButtons($buttons);


    }

    function btnPost_click()
    {
        $mes = $this->getFormValue('mes');
        $ano = $this->getFormValue('ano');
        if ( is_null($mes) or ($mes == "") )
        {
            $erro[] = "Selecione o mês de referência";
        }
        if ( is_null($ano) or ($ano == "") )
        {
            $erro[] = "Informe o ano de referência no formato milhar";
        }
        if ($ano > date('Y'))
        {
            $erro[] = "O ano deve ser ANTERIOR ou IGUAL ao ano corrente (".date('Y').")";
        }
        if ( $ano == date('Y') )
        {
            if ($mes >= date('m'))
            {
                $erro[] = "O mês de referência deve ser no máximo ANTERIOR ao mês corrente (".$this->getMes(date('m')).")";
            }
        }
        if ( count($erro) > 0 )
        {
            foreach ( $erro as $e )
            {
                $this->addError($e);
            }
        }
    }
    
    function btnReport_click()
    {
        $mes = $this->getFormValue('mes');
        $ano = $this->getFormValue('ano');
        if ( is_null($mes) or ($mes == "") )
        {
            $erro[] = "Selecione o mês de referência";
        }
        if ( is_null($ano) or ($ano == "") )
        {
            $erro[] = "Informe o ano de referência no formato milhar";
        }
        if ( count($erro) > 0 )
        {
            foreach ( $erro as $e )
            {
                $this->addError($e);
            }
        }
        else
        {
            $data = $this->getData();
            $ui = $this->manager->getUi();
            $report = $ui->getReport('rh','repIntersticio',$data);
            $report->generate();
        }
    }

    function getMes($a)
    {
      $Ames = array(
            '01' => "Janeiro",
            '02' => "Fevereiro",
            '03' => "Março",
            '04' => "Abril",
            '05' => "Maio",
            '06' => "Junho",
            '07' => "Julho",
            '08' => "Agosto",
            '09' => "Setembro",
            '10' => "Outubro",
            '11' => "Novembro",
            '12' => "Dezembro",
        );
        return $Ames[$a];
    }


 }
?>
