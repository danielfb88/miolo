<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class frmJEtiquetasExternas extends MForm
{

	function __construct()
    {
		parent::__construct('Etiquetas Externas - Padrão ECT - Correios');
        $this->EventHandler();
    }


    function CreateFields()
    {

		/* Para pegar o último ano e o último mês da carga da fita espelho */
        $objtipo0 = $this->manager->GetBusiness('rh','tipo0');
        $r = $objtipo0->DefineUltimoMes();
		$anomes = $r[0];

		$abrangencia = array (
			// retirado por enquanto
			//'1'=>'ALUNOS (TRANCADOS INCLUSIVE)',
			'2'=>'DOCENTES ATIVOS',
			'3'=>'DOCENTES APOSENTADOS',
			'4'=>'TÉCNICOS ADMINISTRATIVOS ATIVOS',
			'5'=>'TÉCNICOS ADMINISTRATIVOS APOSENTADOS'
		);

		$fields = array(
			new MText('saidas','Tipos de saídas:'),
			$radio3a = new MRadioButton('saida','txt','',true,_M('Saída em TXT - para impressora Rima PerForm300')),
			//$radio3b = new MRadioButton('saida','csv','',false,_M('Saída em CSV - para importação no Excel ou similar')),
			new MSeparator(),
			new MSelection('abrangencia','','Abrangência',$abrangencia,false),
			new MSeparator(),
		    new MText('texto','Caso deseje iniciar de um ponto específico, indique um nome para o ínicio.','green'),
			$comeco = new MTextField('comeco','','Nome',40,'Inclusive. Max. 40 Caracteres'),
			new MHiddenField('anomes',$anomes),
			new MSeparator(),
		    new MText('texto2','Caso deseje terminar em um ponto específico, indique o último nome.','red'),
			$termino = new MTextField('termino','','Nome',40,'Inclusive. Max. 40 Caracteres'),
			new MHiddenField('anomes',$anomes),
		);
        $this->SetFields($fields);

		$comeco->addAttribute('maxlength',40);
		$termino->addAttribute('maxlength',40);

		$buttons = Array
		(
			new FormButton('btnReport','Enviar')
		);
		$this->SetButtons($buttons);
    } 


    function btnReport_click()
    {
		$tipoSaida = $this->GetFormValue('saida');
		$anomes = $this->GetFormValue('anomes');
		$abrangencia = $this->GetFormValue('abrangencia');
		$comeco = strtoupper(trim($this->GetFormValue('comeco')));
		$termino = strtoupper(trim($this->GetFormValue('termino')));
		$parameters['CSV_FIELD_DELIMITER'] = ";";
		$parameters['str_ANOMES'] = $anomes;

		if ( !empty($comeco) ) 
			$parameters['str_COMECO'] = $comeco;
		else
			$parameters['str_COMECO'] = "0";
		if ( !empty($termino) ) 
			$parameters['str_TERMINO'] = $termino;
		else
			$parameters['str_TERMINO'] = "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ";
		
		if ( is_null($abrangencia) or empty($abrangencia) )
        {
            $erro[] = "Informar a abrangência";
        }
        if ( count($erro) > 0 )
        {
            foreach ( $erro as $e )
            {
                $this->addError($e);
            }
		} 
        else
        {   
        	$report = new MJasperReport('ufjf');
			
			// Alunos ( Trancados Inclusive)
			if ($abrangencia == '1')
			{
				if ($tipoSaida == 'txt')
				{
					$report->Execute('rh','etiquetas/imagem/RH_EtiquetaImagemAlunosSIGA',$parameters,null,'TXT',true);
				}
			    if ($tipoSaida == 'csv')
				{
					$report->Execute('rh','etiquetas/csv/',$parameters,null,'CSV',true);
				}
			}
			
			// Docentes Ativos
			if ($abrangencia == '2')
			{
				if ($tipoSaida == 'txt')
				{
					$report->Execute('rh','etiquetas/imagem/RH_EtiquetaImagemDocentesAtivosSIAPE',$parameters,null,'TXT',true);
				}
			    if ($tipoSaida == 'csv')
				{
					$report->Execute('rh','etiquetas/csv/',$parameters,null,'CSV',true);
				}
			}

			// Docentes Aposentados
			if ($abrangencia == '3')
			{
				if ($tipoSaida == 'txt')
				{
					$report->Execute('rh','etiquetas/imagem/RH_EtiquetaImagemDocentesAposentadosSIAPE',$parameters,null,'TXT',true);
				}
			    if ($tipoSaida == 'csv')
				{
					$report->Execute('rh','etiquetas/csv/',$parameters,null,'CSV',true);
				}
			}

			// Técnicos Administrativos Ativos
			if ($abrangencia == '4')
			{
				if ($tipoSaida == 'txt')
				{
					$report->Execute('rh','etiquetas/imagem/RH_EtiquetaImagemTAsAtivosSIAPE',$parameters,null,'TXT',true);
				}
			    if ($tipoSaida == 'csv')
				{
					$report->Execute('rh','etiquetas/csv/',$parameters,null,'CSV',true);
				}
			}

			// TAs Aposentados
			if ($abrangencia == '5')
			{
				if ($tipoSaida == 'txt')
				{
					$report->Execute('rh','etiquetas/imagem/RH_EtiquetaImagemTAsAposentadosSIAPE',$parameters,null,'TXT',true);
				}
			    if ($tipoSaida == 'csv')
				{
					$report->Execute('rh','etiquetas/csv/',$parameters,null,'CSV',true);
				}
			}
        }
    } 
}
?>
