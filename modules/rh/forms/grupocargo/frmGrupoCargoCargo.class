<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

/**
 * Formulário de edição do Cargo do Grupo de Cargo
 */
class frmGrupoCargoCargo extends Form
{
	/**
	 * Objeto cargo
	 * @access protected
	 * @var BusinessRhCargo
	 */
   protected $cargo;

    function __construct($objcargo)
    {
	  $this->cargo = $objcargo;
      parent::__construct('Editar Dados do Cargo - '.$this->cargo->descricao);
      $this->EventHandler();
    }

    function CreateFields()
    {
       global $MIOLO;

        $jornadas = $MIOLO->GetBusiness('rh','jornada');
        $escolaridade = $MIOLO->GetBusiness('common','tabelageral');

   	   $fields = array(
             new TextField('idcargo','','ID Cargo','3'),
             new TextField('descricao','','Descrição','40'),
             new Selection('escolaridade','','Escolaridade Mínima'),
	         new Selection('idjornada','','Jornada')
        );
		
    $this->SetFields($fields);
	$this->SetData();

	$JornadaQuery = $jornadas->ListAll();
	$EscolaridadeQuery = $escolaridade->ListByTabela('RH_ESCOLARIDADE');
    $this->SetFieldAttr('idjornada','options',$JornadaQuery->chunkResult());
    $this->SetFieldAttr('escolaridade','options',$EscolaridadeQuery->chunkResult());
	if ($this->cargo->idCargo)
	$this->SetFieldAttr('idcargo','readonly',true);
     
    $buttons = array(
		new FormButton('btnSalvar','Enviar'),
		 new FormButton('btnExcluir','Excluir')
    );
    
    $this->escolaridade->AddAttribute('maxlength','2');
    $this->descricao->AddAttribute('maxlength','40');

     $validators = array(
         new RequiredValidator('idJornada'),
         new RequiredValidator('descricao'),
         new RequiredValidator('escolaridade'),
         
         new IntegerValidator('idJornada'),
     );
        
     $this->SetValidators($validators);
	
   $this->SetButtons($buttons);
   $this->SetButtonAttr('btnExcluir','visible',$this->cargo->isPersistent());
    }

	function SetData()
	{ 
     $this->SetFieldValue('idcargo',$this->cargo->idCargo);
     $this->SetFieldValue('escolaridade',$this->cargo->escolaridadeMinima);
	  $this->SetFieldValue('idjornada',$this->cargo->idJornada);
	  $this->SetFieldValue('descricao',$this->cargo->descricao);
	}

	public function btnSalvar_click()
	{
      global $MIOLO;

		$update = $this->cargo->isPersistent();

		$data = new FormData();
      $data->idCargo = $this->GetFormValue('idcargo');
      $data->escolaridadeMinima = $this->GetFormValue('escolaridade');
	   $data->idJornada = $this->GetFormValue('idjornada');
		$data->descricao = $this->GetFormValue('descricao');
		
		// Retirando os caracteres especiais. :-)
		$caracteres = array("#","*", "&", "%", "(", ")", "$", "@", "!", "'", "\"", "+", "=", "-", "/", ".", ",", "^", "?", ":", "}", "]", "[", "º","{","|",">","<",";");
		$data->descricao = str_replace($caracteres,"",$data->descricao);
	    
	    if(is_numeric($data->idJornada))
		{
			if (strlen(trim($data->idJornada)) < '1')
			{
				$this->addError('Informe o id da jornada.');
			}
			elseif(strlen(trim($data->descricao)) <= '5')
			{
				$this->addError('Informe a Descrição do Cargo.');
			}
			else {
				  try 
					{
						  $this->cargo->SetData($data);
						  $this->cargo->save();
						  $go = $MIOLO->GetActionURL('rh','main:grupocargo',$this->cargo->idGrupoCargo, array('form'=>'cargos'));
					  if ($update)
					 {
						  $MIOLO->Information('Cargo atualizado com sucesso.', $go );
					 }
					 else
					 {
						  $MIOLO->Information('Cargo inserido com sucesso.', $go );
					 }
				}
				catch (Exception $e)
				{
							$this->AddError($this->cargo->GetErrors());
				}
			}
		}
	}

    function btnExcluir_click()
	{
        global $MIOLO;

		$action_sim = $MIOLO->GetActionURL('rh','main:grupocargo',$this->cargo->idGrupoCargo,array('form'=>'cargos','id'=>$this->cargo->idCargo,'conf'=>'sim','event'=>'btnExcluir:click'));
		$action_nao = $MIOLO->GetActionURL('rh','main:grupocargo',$this->cargo->idGrupoCargo,array('form'=>'cargos','id'=>$this->cargo->idCargo));

		$conf = $this->GetFormValue('conf');

		if ($conf == 'sim')
		{
			$this->cargo->Delete();
			if (!$this->cargo->CheckError())
			{
				$MIOLO->Information('Cargo excluído com sucesso',$MIOLO->GetActionURL('rh','main:grupocargo',$this->cargo->idGrupoCargo,array('form'=>'cargos')));
			}
			else
			{
				$MIOLO->Error("Informe o seguinte erro à equipe de desenvolvimento: ".$this->cargo->GetErrors());
			}
					
	   }
	   else
	   {
		   $MIOLO->Question("Tem certeza que deseja excluir o cargo [".$this->cargo->descricao."] ?",$action_sim,$action_nao);
		}
	}	
 }
?>
