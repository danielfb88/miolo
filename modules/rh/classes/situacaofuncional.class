<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class BusinessRhSituacaoFuncional extends MBusiness
{
    public $idSituacao;     // NUMBER(2)
    public $regimeJuridico; // VARCHAR2(20)
    public $descricao;      // CHAR(3)

    public $ocorrencias;
    
    function __construct($data=null)
    {
        parent::__construct('sigaept',$data);
    }

    function OnCreate($data)
    {
        if (empty($data))
        {
//            $this->initialize();
        }
        else
        {
            $this->GetById($data);
        }
    }

    function GetById($id)
    {
        $this->idSituacao = $id;
        $this->retrieve();
        return $this;
    }

    function ListByDescricao($descricao)
    {
        $criteria =  $this->getCriteria();
        $criteria->addCriteria('descricao','LIKE', "$descricao");
        $criteria->addOrderAttribute('descricao');
        return $criteria->retrieveAsQuery();
    }

    function ListAll()
    {
        $criteria = $this->getCriteria();
        $criteria->addOrderAttribute('descricao');
        return $criteria->retrieveAsQuery();
    }
    
    function getOcorrencias()
    {
        $this->retrieveAssociation('ocorrencias');
        if ($this->ocorrencias != NULL)
        {
            if (!is_array($this->ocorrencias))
            {
                $this->ocorrencias = array($this->ocorrencias);  
            }
        }
    }

    function addOcorrencia($ocorrencia)
    {
        $this->ocorrencias[] = $ocorrencia;
    }
    
    function deleteOcorrencia($id)
    {
        $ocorrencia = $this->getOcorrencia($id);
        $this->deleteAssociation('ocorrencias',$ocorrencia);
    }
    
    function getOcorrencia($id)
    {
        if ( $this->ocorrencias != NULL )
        {
            foreach ( $this->ocorrencias as $o )
            {
                if ( $o->idOcorrencia == $id )
                    return $o;
            }
        }
    }

    function ListCategorias()
    {
        $criteria =  $this->getCriteria();
        $criteria->addCriteria('idSituacao','in', array(1,2,12));
        $criteria->addOrderAttribute('descricao');
        return $criteria->retrieveAsQuery();
    }

}
?>
