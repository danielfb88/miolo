<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class BusinessRhCapacitacaoCurso extends MBusiness
{
	public $idcurso; 
	public $nome;	
	public $idinstituicao;	
        public $modulos;
        public $instituicao;
        public $histcapacitacao;

	public $cargaHoraria;
	public $dataInicio;
	public $dataFim;
	public $obs;


	function __construct($data=null)
	{   	
		parent::__construct('sigaept',$data);
	}

	function GetById($id)
	{
    	$this->idcurso = $id;    
		$this->retrieve();
		return $this;
	}

    function setData($data)
    {
        $this->nome = trim($data->nome);	
        $this->idinstituicao = trim($data->idinstituicao);	
    }
    

	function listAll($filter='')
	{
		$criteria = $this->getCriteria();
		$criteria->addColumnAttribute('idcurso');
		$criteria->addColumnAttribute('upper(nome)','nome');
        if ($filter != '')
        {
	    $filter = strtoupper($filter);
            $criteria->addCriteria('upper(nome)','LIKE',"'%{$filter}%'");
        }
		$query = $criteria->retrieveAsQuery();
        return $query;
	}
	
	function getModulos(){
		$this->retrieveAssociation('modulos');
		return $this->modulos;
		
	}
	
	function getModuloById($id){
		$this->getModulos();

		foreach($this->modulos as $mod){
			if ($mod->idcurso == $id){
				return $mod;	
			}
		}
	}
	
	function countModulos(){
		$mods = $this->getModulos();
		return count($mods);
	}
	
	function getInstituicao(){
		$this->retrieveAssociation('instituicao');
		return $this->instituicao;
	}
	
	function getHistCapacitacao(){
        $this->retrieveAssociation('histcapacitacao');
        return $this->histcapacitacao;
	}
	
	function getHistCapacitacaoByCurso($id){
          $hist = $this->getHistCapacitacao();
          foreach($hist as $hc){
            if($hc->idcurso == $id){
              $arr[] =  $hc->idHistCapacitacao;
            }
          }
          return $arr;
	}


	function listAllExternos($filter='')
	{
		$criteria = $this->getCriteria();
		$criteria->addColumnAttribute('idcurso');
		$criteria->addColumnAttribute('upper(nome)','nome');
		$criteria->addColumnAttribute('upper(instituicao.nome)','instituicao');
        if ($filter != '')
        {
			$filter = strtoupper($filter);
			$criteria->addCriteria('upper(nome)','LIKE',"'{$filter}%'");
        }
		$cc = new CriteriaCondition;
		$cc->addCriteria($criteria->getCriteria('idinstituicao','is not',"null"));
		$cc->addOrCriteria($criteria->getCriteria('idinstituicao','!=',"0001 "));
		$criteria->addCriteria($cc);
		$query = $criteria->retrieveAsQuery();
        return $query;
	}

	function cursoRepetido() 
	{
        $k = new MKrono();
        $date = $k->invertDate($this->dataFim);
		$criteria = $this->getCriteria();
		$nome = strtoupper( $this->nome );
		$criteria->addColumnAttribute('idcurso');
		$criteria->addCriteria('upper(nome)',   '=',"'$nome'");
		$criteria->addCriteria('idinstituicao', '=',"{$this->idinstituicao}");
		$criteria->addCriteria('dataFim',       '=',"'{$date}'");
		$query = $criteria->retrieveAsQuery();
		if ( count($query->result) > 0 )
		{
			return true;
		}
		else
		{
			return false;
		}
	}

}
