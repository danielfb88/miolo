<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class BusinessRhTipoLicAfast extends MBusiness
{
	public $idTipoLicAfast;
	public $tipoLicAfast;
	public $descricao;
	
	public $ocorrencias;

	function __construct($data = null)
	{
		parent::__construct('sigaept', $data);
	}
	
    function onCreate($data)
    {
        if (empty($data))
        {
//            $this->initialize();
        }
        else
        {
            $this->GetById($data);
        }
    }

	function getById($id)
	{
		$this->idTipoLicAfast = $id;
		$this->retrieve();
		return $this;
	}
	
	function getByTipo($tipo)
	{
        $criteria =  $this->getCriteria();
		$criteria->addColumnAttribute('idTipoLicAfast');
        $criteria->addCriteria('tipoLicAfast','=', "'$tipo'");
        $query = $criteria->retrieveAsQuery();
		$id = $query->result[0][0];
		$this->idTipoLicAfast = $id;
		$this->retrieve();
		return $this;
	}
	
	function listByTipo($tipo)
	{
        $criteria =  $this->getCriteria();
        $criteria->addCriteria('tipoLicAfast','LIKE', "$tipo");
        $criteria->addOrderAttribute('tipoLicAfast');
        return $criteria->retrieveAsQuery();
	}

	function getOcorrencias()
	{
		$this->retrieveAssociation('ocorrencias');
        if ($this->ocorrencias != NULL)
        {
            if (!is_array($this->ocorrencias))
            {
                $this->ocorrencias = array($this->ocorrencias);  
            }
        }
	}

	function addOcorrencia($ocorrencia)
	{
		$this->ocorrencias[] = $ocorrencia;
	}
	
	function deleteOcorrencia($id)
	{
		$ocorrencia = $this->getOcorrencia($id);
		$this->deleteAssociation('ocorrencias',$ocorrencia);
	}
	
	function getOcorrencia($id)
	{
		if ( $this->ocorrencias != NULL )
		{
			foreach ( $this->ocorrencias as $o )
			{
				if ( $o->idOcorrencia == $id )
					return $o;
			}
		}
	}

    /*
    * dado o array de tipos retorna um array com as 
    * ocorrencias de licenca e afastamento existentes para os tipo fornecidos
    */
    function getArrayOcorrenciasByGrupo($grupos)
    {
        foreach ( $grupos as $g )
        {
            $g = ($g == 'RH_CID') ? 'RH_SAUDE' : $g ;
            $this->getByTipo($g);
            $this->getOcorrencias();
            if ( $this->ocorrencias )
            {
                foreach ( $this->ocorrencias as $o )
                {
                    $ocorrencias[$o->idOcorrencia] = $o->descricao;
                }
            }
        }
        return $ocorrencias;
    }

}
