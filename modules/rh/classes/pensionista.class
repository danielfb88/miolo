<?PHP
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class BusinessRhPensionista extends MBusiness
{
    public $idPensionista;
    public $idPessoa;
    public $idVinculo;
    public $numLeiPensao;
    public $dataLeiPensao;
    public $dataPublicLeiPensao;
    public $numProcPensao;
    public $dataExclusaoInstituidor;
    public $origemPensao;
    public $numProcPensionista;
    public $parentesco;
    public $UORGControle;
    public $UORGLocal;
    public $bancoPgto;
    public $agenciaPgto;
    public $tipoContaPgto;
    public $contaPgto;
    public $identContaJudicial;
    public $numBenefINSS;
    public $especieBenefINSS;
    public $qtdDepIR;
    public $tipoPensao;
    public $naturezaPensao;
    public $percentPensao;
    public $dataInicioPensao;
    public $dataFimPensao;
    public $idRepresentacao;
    public $numeradorCotaParte;
    public $denominadorCotaParte;
    public $numeradorCotaComp;
    public $denominadorCotaComp;
    public $mesInicioPgto;
    public $anoInicioPgto;
    public $mesSuspPgto;
    public $anoSuspPgto;
    public $idGrupoOcorrenciaExclusao;
    public $idOcorrenciaExclusao;
    public $dataExclusao;
    public $vinculo;

    public $k;

    
    function __construct($data=null)
    {
        $this->k = new MKrono();
        parent::__construct('sigaept',$data);
    }
    
    
    function OnCreate($data)
    {
        if (empty($data))
        {
            //$this->initialize();
        }
        else
        {
            $this->GetById($data);
        }
    }

       
    function GetById($id)
    {
       $this->idPensionista = $id;
       $this->retrieve();
       return $this;        
    }


    function ListAll($ordem='I')     //'I': ordem nome dos Instituidores, 'P': ordem nome dos Pensionistas
    {
        $funcionario = $this->_miolo->getBusiness('rh','funcionario');
          $cfuncionario = $funcionario->getcriteria();
          $cfuncionario->setAssociationAlias('pessoa','I');
          $cfuncionario->addColumnAttribute('I.nome','nome');                           //nome do Instituidor

        $vinculo     = $this->_miolo->getBusiness('rh','vinculo');
          $cvinculo = $vinculo->getcriteria();
          $cvinculo->setAssociationAlias('funcionario','F');
          $cvinculo->addJoinCriteria($cfuncionario);

        $criteria = $this->getcriteria();

        $criteria->setAssociationAlias('pessoa','P');

        $criteria->addColumnAttribute('idPensionista');
        $criteria->addColumnAttribute('P.nome','nome');                                 //nome do Pensionista
        $criteria->addColumnAttribute('vinculo.idVinculo');

        $criteria->addJoinCriteria($cvinculo);

        $criteria->addColumnAttribute('vinculo.provimentos.cargo.descricao','cargo');   //cargo do Instituidor

        $criteria->addCriteria       ('vinculo.provimentos.dataFim','IS','NULL');

        $criteria->addColumnAttribute('dataInicioPensao');

        if ($ordem == 'I')
        {
            $criteria->addOrderAttribute('I.nome');
        }
        else
        {
            $criteria->addOrderAttribute('P.nome');
        }
        return $criteria->retrieveAsQuery();
    } // ListAll


}
?>
