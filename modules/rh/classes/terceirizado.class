<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class BusinessRhTerceirizado extends MBusiness
{
	// atributos
    public $idTerceirizado;     // number(8)
    public $idPessoa;           // number(8)
    public $escolaridade;       // varchar2(50)

    // objetos
    public $pessoa;
	
	// conjunto de objetos
	public $provimentos;
	public $provimento;
	
	// objeto
    public $k;

    function __construct($data=NULL)
    {
       parent::__construct('sigaept',$data);
       $this->k = new MKrono();
    }

    function OnCreate($data)
    {
        if (empty($data))
        {
//            $this->initialize();
        }
        else
        {
            $this->GetById($data);
        }
    }

    function GetById($id)
    {
       $this->idTerceirizado = $id;
       $this->retrieve();
       return $this;
    }

    function SetData($data)
    {
       $this->idTerceirizado = $data->idTerceirizado;
       $this->idPessoa       = $data->idPessoa;
       $this->escolaridade   = $data->escolaridade;
    }

    public function ListByNome($nome)
    {
        $criteria =  $this->getCriteria();
        $criteria->addColumnAttribute('idTerceirizado','idterceirizado');
        $criteria->addColumnAttribute('pessoa.nome','nome');
        $criteria->addCriteria('upper(pessoa.nome)','LIKE', "$nome");
        $criteria->addOrderAttribute('pessoa.nome');
        return $criteria->retrieveAsQuery();    	
    }

    function GetProvimentos()
    {
        $this->retrieveAssociation('provimentos');
        if ($this->provimentos != NULL)
        {
            if (!is_array($this->provimentos))
            {
                $this->provimentos = array($this->provimentos);  
            }
        }
    }

    function GetProvimentoAtual()
    {
        if ( $this->provimentos != NULL )
        {
            foreach ( $this->provimentos as $p )
            {
                if ( !$p->dataFim )
                    return $p;
            }
        }
        return $this->provimentos[0];
    }
    
    function DeletaProvimentos()
    {
        $this->retrieveAssociation('provimentos');
        if ( $this->provimentos != NULL )
        {
            foreach ( $this->provimentos as $p )
            {
                !$p->Delete();
            }
        }
    }
    
    function existeOcorrencia($data)
    {
        $this->retrieveAssociation('provimentos');
        if ( is_array($this->provimentos) )
        {
            foreach ( $this->provimentos as $p )
            {
                if ($p->dataFim)
                {
                    if ( ($this->k->compareDate($data,'>=',$p->dataInicio)) && ($this->k->compareDate($data,'<=',$p->dataFim)) )
                    return TRUE;
                }
                else
                {
                    if ( ($this->k->compareDate($data,'=',$p->dataInicio)) )
                    return TRUE;
                }                
            }
        }
        return FALSE;
    }      
    
    
    function GetProvimento($dataInicio)
    {
        global $MIOLO;
        if ( $this->provimentos != NULL )
        {
            foreach ( $this->provimentos as $p )
            {
                if ( $p->dataInicio == $dataInicio )
                    return $p;
            }
        }
        $p = $MIOLO->GetBusiness('rh','provterceirizado');
        $p->idTerceirizado = $this->idTerceirizado;
        $p->dataInicio = $dataInicio;
        return $p;
    }
        
    function listProvimentos()
    {
        global $MIOLO;
        $criteria = $this->getCriteria();
        $criteria->addColumnAttribute('provimentos.dataInicio','datainicio');
        $criteria->addColumnAttribute('provimentos.idTerceirizado','idterceirizado');
        $criteria->addColumnAttribute('provimentos.idContrato','contrato');
        $criteria->addColumnAttribute('provimentos.dataFim','datafim');
        $criteria->addColumnAttribute('provimentos.localTerceirizado.nome','local');
        $criteria->addColumnAttribute('provimentos.localTerceirizado.setor.sigla','setor');
        $criteria->addColumnAttribute('provimentos.jornada.descricao','jornada');
        $criteria->addColumnAttribute('provimentos.funcao.descricao','funcao');
        //$criteria->addColumnAttribute('provimentos.terceirizado.instituicao.nome','instituicao');
        $criteria->addColumnAttribute('provimentos.ocorrencia.descricao','ocorrencia');        
        $criteria->addCriteria('provimentos.idTerceirizado','=',$this->idTerceirizado);
        $criteria->addColumnAttribute('provimentos.idTerceirizado','idterceirizado');
        $criteria->addOrderAttribute('provimentos.dataInicio',FALSE);
        return $criteria->retrieveAsQuery();
    }    
}
?>
