<?PHP
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

MIOLO::Import('modules::rh::classes::exception');

class BusinessRhAdicional extends MBusiness
{
    public $idVinculo;
    public $dataInicio;
    public $dataFim;
    public $idAdicional;
    public $grau;
    public $obs;

    public $adicional;

    public $krono;
    public $vinculo;

    function __construct($data=null)
    {
        $this->krono = new MKrono();
        parent::__construct('sigaept',$data);
    
    }

    function RelatorioAdicional($date=null,$idAdicional=null,$idAtivos=null,$idOrdem=null)
    {
        if ( is_null($date) )
        {
            $date = date("d/m/Y");
        }
    
        $nDate = new InvertDate($date);

        $criteria = $this->getCriteria();
    
        $criteria->addColumnAttribute('idVinculo', 'matricula');
        $criteria->addColumnAttribute('vinculo.funcionario.pessoa.nome','nome');
        $criteria->addColumnAttribute('vinculo.provimentos.cargo.descricao','cargo');
    
        $criteria->addColumnAttribute('vinculo.provimentos.setor.nome', 'lotacao');
        
        $criteria->addColumnAttribute('tabelaGeral.item2', 'tipo');
            
        $criteria->addColumnAttribute('dataInicio','concessao');
        $criteria->addColumnAttribute('dataFim','exclusao');
        $criteria->addColumnAttribute('grau', 'grau');
        
        $criteria->addColumnAttribute('vinculo.provimentos.setor.idPaiSetor', 'setorPai');

        $cc = new CriteriaCondition;
    
        $cc->addCriteria($criteria->getCriteria('dataInicio','<=',"'{$nDate->date}'"));
        $cc->addCriteria($criteria->getCriteria('dataFim','is',"null"));
    
        $cc->addOrCriteria($criteria->getCriteria('dataInicio','<=',"'{$nDate->date}'"));
        $cc->addOrCriteria($criteria->getCriteria('dataFim','>=',"'{$nDate->date}'"));
    
        $criteria->addCriteria($cc);
    
        $criteria->addCriteria('tabelaGeral.tabela','=',"'RH_TIPOADICIONAL'");
        $criteria->addCriteria('vinculo.provimentos.dataFim','is',"null");

        //$criteria->addCriteria('vinculo.funcionario.pessoa.nome','LIKE',"'A%'");
        
        if ( $idAdicional )
        {
            if ($idAdicional!=4)
            {
                $criteria->addCriteria('idAdicional','=',"'$idAdicional'");
            }
        }

        if ( $idAtivos )
        {
            if ($idAtivos==1)
            {
                $criteria->addCriteria('dataFim','is',"null");
            }
        }
        
        if ( $idOrdem )
        {
            if ($idOrdem==2)
            /*
            {
                $criteria->addOrderAttribute('vinculo.funcionario.pessoa.nome');
            }
            else
            */
            {
                $criteria->addOrderAttribute('vinculo.provimentos.setor.idPaiSetor');
                $criteria->addOrderAttribute('vinculo.provimentos.setor.idSetor');
            }            
        }
        
        $criteria->addOrderAttribute('vinculo.funcionario.pessoa.nome');
    
        return $criteria->retrieveAsQuery();
    
    }
    
    function save()
    {
    
        if( ($this->krono->CompareDate($this->dataInicio,'<=',$this->dataFim)) || (! $this->dataFim)  )
        {
            if ($this->vinculo==null)
                $this->retrieveAssociation('vinculo');
    
                if ($this->krono->CompareDate($this->dataInicio,'>=',$this->vinculo->dataExercicio))
                {
                    parent::save();
                }
    
                else
                {
                    throw new ESimpleRnException("A data inicio de adicional, deve ser maior ou igual à data de inicio do exercicio do servidor.");
                }
        }
    }
    
    function getbyVinculoAdicionalDataFim($idVinculo, $idAdicional)
    {
        $criteria = $this->getCriteria();
        $criteria->addCriteria('idVinculo'  , '=' , "'$idVinculo'"  );
        $criteria->addCriteria('idAdicional', '=' , "'$idAdicional'");
        $criteria->addCriteria('dataFim'    , 'is', 'NULL'          );
        return $criteria->retrieveAsQuery();
    } // getbyVinculoAdicionalDataFim

}
?>
