<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class BusinessRhOcorrencia extends MBusiness
{
	public $idGrupoOcorrencia;
	public $idOcorrencia;
	public $descricao;
    public $mnemonico;
    public $idSituacao;
	public $prazoMaximo;
    public $sexo;
    public $excPgto;

	public $situacaoFuncional;
	public $tipoLicAfasts;
	
	function __construct($data=null)
	{
		parent::__construct('sigaept', $data);
	}

    function OnCreate($data)
    {
        if (empty($data))
        {
//            $this->initialize();
        }
        else
        {
            $this->GetById($data);
        }
    }

	function GetById($id)
	{
		$this->idOcorrencia = $id;
		$this->retrieve();
		return $this;
	}

	function GetByGrupoId($idGrupo,$idOcorrencia)
	{
		$this->idGrupoOcorrencia = $idGrupo;
		$this->idOcorrencia = $idOcorrencia;
		$this->retrieve();
		return $this;
	}
    
    function ListByMnemonico($mnemonico)
    {
        $criteria =  $this->getCriteria();
        $criteria->addColumnAttribute('mnemonico');
        $criteria->addColumnAttribute('descricao');
        if (is_array($mnemonico))
        {
            $criteria->addCriteria('mnemonico','IN', $mnemonico);
        }
        else
        {
            $criteria->addCriteria('mnemonico','=', $mnemonico);
        } 
        $criteria->addOrderAttribute('mnemonico');
        return $criteria->retrieveAsQuery();
    }

	function ListByGrupo($idGrupoOcorrencia)
	{
		$criteria = $this->getCriteria();
		$criteria->addColumnAttribute('idocorrencia');
		$criteria->addColumnAttribute('descricao');
		$criteria->addCriteria('idGrupoOcorrencia','=',$idGrupoOcorrencia);
		$criteria->addOrderAttribute('idOcorrencia');
		return $criteria->retrieveAsQuery();
	}
	
	function ListBySituacaoGrupoOcorrencia($idSituacao, $idGrupoOcorrencia)
	{
		$criteria = $this->getCriteria();
		
		$criteria->addColumnAttribute('idOcorrencia');
		$criteria->addColumnAttribute('descricao');
		$criteria->addCriteria('idGrupoOcorrencia','=',$idGrupoOcorrencia);
		$criteria->addCriteria('situacaoFuncional.idSituacao','=',$idSituacao);
		$criteria->addOrderAttribute('idOcorrencia');
		return $criteria->retrieveAsQuery();
	}


	function getPrazoMaximo()
	{
		return $this->prazoMaximo;
	}
    
    function getSituacaoFuncional()
    {
        $this->retrieveAssociation('situacaoFuncional');
    }

	function ListAll()
	{
		$criteria = $this->getCriteria();
		return $criteria->retrieveAsQuery();
	}
}
?>
