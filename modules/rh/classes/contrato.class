<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class BusinessRhContrato extends MBusiness
{
	// atributos
    public $idContrato;             // number(6)
    public $numContrato;            // varchar2(12)
    public $dataInicio;             // date
	public $dataFim;                // date
	public $dataProrrogacao;        // date	
	public $idInstituicao;          // char(6)
	public $idSetor;                // number(4)
	public $justificativaPror;	// varchar2(500)
	public $objeto;                 // varchar2(200)
	public $obs;                    // varchar2(500)

    // objetos
    public $instituicao;
    public $setor;
    
    // conjunto de objetos
	public $provimentos;
	
	// objeto
    public $k;

    function __construct($data=NULL)
    {
       parent::__construct('sigaept',$data);
       $this->k = new MKrono();
    }

    function OnCreate($data)
    {
        if (empty($data))
        {
//            $this->initialize();
        }
        else
        {
            $this->GetById($data);
        }
    }
    
    function GetById($id)
    {
       $this->idContrato = $id;
       $this->retrieve();
       return $this;
    }
    
    function GetByNumero($numero)
    {
        $criteria =  $this->getCriteria();
        $criteria->addCriteria('numContrato','=',"'{$numero}'");
		$cursor = $criteria->retrieveAsCursor();
		return $cursor->getObject();
    }    
    	
    function SetData($data)
    {
       $this->numContrato     = $data->numContrato;
       $this->dataInicio      = $data->dataInicio;
       $this->dataFim         = $data->dataFim;
       $this->dataProrrogacao = $data->dataProrrogacao;
       $this->idInstituicao   = $data->idInstituicao;
       $this->idSetor         = $data->idSetor;
       $this->objeto          = $data->objeto;
       $this->obs             = $data->obs;
       $this->justificativaPror = $data->justificativaPror;	
    }

    public function ListByNumeroOrInstituicao($instituicao, $numero)
    {
        $criteria = $this->getCriteria();
        $criteria->addColumnAttribute('idContrato','idcontrato');
        $criteria->addColumnAttribute('numContrato','numcontrato');
        $criteria->addColumnAttribute('dataInicio','datainicio');
        $criteria->addColumnAttribute('dataFim','datafim');
        $criteria->addColumnAttribute('upper(instituicao.nome)','nomeinst');
        $criteria->addColumnAttribute('upper(setor.sigla)','nomesetor');
        if ($numero != '')
        {
           $criteria->addCriteria('numContrato','LIKE', "'%$numero%'");          
        }
        else
        {
           $criteria->addCriteria('upper(instituicao.nome)','LIKE', "$instituicao");
        }
        $criteria->addOrderAttribute('numContrato');
        return $criteria->retrieveAsQuery();   
    }
    
    function DelContrato()
    {
        $this->retrieveAssociation('provimentos');
        if ($this->provimentos != NULL)
        {
            foreach ( $this->provimentos as $p )
            {
                $p->updateContrato(NULL);
            }
        }
    }

    function GetProvimentos()
    {
        $this->retrieveAssociation('provimentos');
        if ($this->provimentos != NULL)
        {
            if (!is_array($this->provimentos))
            {
                $this->provimentos = array($this->provimentos);  
            }
        }
    }        
        
    function listProvimentos()
    {
        $criteria = $this->getCriteria();
        $criteria->addColumnAttribute('provimentos.dataInicio','datainicio');
        $criteria->addColumnAttribute('provimentos.idTerceirizado','idterceirizado');
        $criteria->addColumnAttribute('provimentos.dataFim','datafim');
        $criteria->addColumnAttribute('provimentos.localTerceirizado.nome','local');
        $criteria->addColumnAttribute('provimentos.localTerceirizado.setor.sigla','setor');
        $criteria->addColumnAttribute('provimentos.jornada.descricao','jornada');
        $criteria->addColumnAttribute('provimentos.funcao.descricao','funcao');
        //$criteria->addColumnAttribute('provimentos.terceirizado.instituicao.nome','instituicao');
        $criteria->addColumnAttribute('provimentos.ocorrencia.descricao','ocorrencia');        
        $criteria->addCriteria('provimentos.idTerceirizado','=',$this->idTerceirizado);
        $criteria->addColumnAttribute('provimentos.idTerceirizado','idterceirizado');
        $criteria->addOrderAttribute('provimentos.dataInicio',FALSE);
        return $criteria->retrieveAsQuery();
    }    
}
?>
