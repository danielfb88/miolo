<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

global $MIOLO;
$MIOLO->Uses('classes/exception.class','rh');
class BusinessRhHistCapacitacao extends MBusiness
{
    public $idHistCapacitacao;
    public $idFuncionario;
    public $idmodulo;
    public $idcurso;
    public $dataCapacitacao;
    public $dataProgressao;
    public $compativelcargo;
    public $compativelambiente;

    public $krono;

    public $capacitacaocurso;


    function __construct($data=null)
    {
    	$this->krono = new MKrono();
        parent::__construct('sigaept',$data);
    }

	
    function GetById($id)
	{
    	$this->idHistCapacitacao = $id;
		$this->retrieve();
		return $this;
	}


	function cursoRepetido()
	{
		$criteria = $this->getCriteria();
		$criteria->addColumnAttribute('idHistCapacitacao');
        $criteria->addCriteria('idFuncionario','=',$this->idFuncionario);
        $criteria->addCriteria('idcurso','=',$this->idcurso);
		$query = $criteria->retrieveAsQuery();

		if ( count($query->result) > 0 )
		{
			return true;
		}
		else
		{
			return false;
		}
	}


    function GetByFuncionario($id)
	{
		$criteria = $this->getCriteria();
		$criteria->addColumnAttribute('idHistCapacitacao');
		$criteria->addColumnAttribute('upper(capacitacaocurso.nome)','nome');
		$criteria->addColumnAttribute('upper(capacitacaocurso.instituicao.nome)','instituicao');
		$criteria->addColumnAttribute('capacitacaocurso.cargaHoraria');
		$criteria->addColumnAttribute('dataCapacitacao');
		$criteria->addColumnAttribute('dataProgressao');
		$criteria->addColumnAttribute('compativelcargo');
		$criteria->addColumnAttribute('compativelambiente');
		$criteria->addColumnAttribute('idcurso');
        	$criteria->addCriteria('idFuncionario','=',$id);
		$cc = new CriteriaCondition;
		$cc->addCriteria($criteria->getCriteria('rh_capacitacaocurso.idinstituicao','is not',"null"));
		$cc->addOrCriteria($criteria->getCriteria('rh_capacitacaocurso.idinstituicao','!=',"0001 "));
		$criteria->addCriteria($cc);
	        $criteria->addOrderAttribute('dataCapacitacao');
        	$sql = $criteria->retrieveAsQuery();
		return $sql->result;
	}

    
    /**
	 * public Retroativa()
	 * Testa se tentou inserir capacitacao retroativa
	 * @status: 'ready'
	*/
	function Retroativa()
	{
		$today = date('d/m/Y');
	//	$regra1 = $this->krono->CompareDate($this->dataInicio,'>',$today);
	//	$regra2 = $this->krono->CompareDate($this->dataFim,'>',$today);
		//if ( ($regra1) || ($regra2))
			return false;
	//	else
	//		return FALSE;
	}
	

	function DataConsiste()
	{		
	/*	if ($this->krono->CompareDate($this->dataInicio,'<',$this->dataFim))
			return TRUE;
		else
			return FALSE;*/
			return true;
	}
		
    
   /* function save()
    {
    	if (!($this->Retroativa()))
    	{
    		if ($this->DataConsiste())
    			parent::save();
    		else 
    		 throw new Exception('A Data de Inicio de Capacitação precisa ser anterior a Data Fim !');
    	
    	}    		
    	else 
    	{
    		throw new Exception('Não é permitido cadastro de uma Capacitação com Data de Inicio ou Data Fim, futura !');
    		
    	}
    
    } */
    
	
	static function getByCurso($id){
           global $MIOLO;
           $db = $MIOLO->getDataBase('sigaept');
           $sql = new sql('*','rh_histcapacitacao h');
           $sql->where = "h.idcurso = '{$id}'";
           return $sql->Delete();
          // $query = $db->execute($sql);
          //  var_dump($sql);

           //$result = $query->result;
           //return $result;
    }
}
?>
