<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class BusinessRhHisttitulacao extends MBusiness
{
    public $idHistTitulacao;
    public $idFuncionario;
    public $idTitulacao;
    public $dataFim;
    public $entidade;
    public $tituloTrabalhoFinal;
    public $tipoTrabalhoFinal;
    public $areaConcentracao;
    public $nomecurso;
    public $dataincentivo;
    public $idEscolaridadePCCTAE;
    public $titulacao;
    public $funcionario;


    function __construct($data=null)
    {
        parent::__construct('sigaept',$data);
    }

    function GetById($id, $proxy=true)
    {
       $this->idHistTitulacao = $id;
       $this->retrieve();
       return $this;
    }

    function getUltimobyidFuncionario($idFuncionario)
    {
        $criteria = $this->getCriteria();
        $criteria->addColumnAttribute('idTitulacao');
        $criteria->addCriteria('idFuncionario','=',"'$idFuncionario'");
        $criteria->addOrderAttribute('dataFim');
        $result = $criteria->retrieveAsQuery()->result;
        if ($result)
        {
            $end = end($result);
            return $end[0];
        }
        else
        {
            return '';
        }
    } // getUltimobyidFuncionario


    function DataFutura() 
    {
    	$krono = new MKrono();
		if ($krono->CompareDate(date("d/m/Y"), '<', $this->dataFim))
			return false;
		else 
			return true;
    }
 
    function ConsisteEscolaridade() 
    {
		global $MIOLO;
		$objFuncionario = $MIOLO->getBusiness('rh','funcionario');
		$objFuncionario->GetById($this->idFuncionario);
		$tabelaGeral = $MIOLO->GetBusiness('common','tabelageral');
	    $limiteMinEscolaridade = $tabelaGeral->GetByItem('RH_TITULACAO',"{$this->idTitulacao}");		
/*	    
echo"<pre>";var_dump("Escolaridade",$objFuncionario->escolaridade);echo"</pre>";
echo"<pre>";var_dump("Titulacao",$this->idTitulacao);echo"</pre>";
echo"<pre>";var_dump("Limite Minimo de Escolaridade",$limiteMinEscolaridade->item3);echo"</pre>";    	
*/
	    if ( $objFuncionario->escolaridade < $limiteMinEscolaridade->item3 )
	    	return false;
	    else
	    	return true;
    }
 
    /*function save()
    {
    	//if($this->ConsisteEscolaridade()) 
    		if ($this->DataFutura()) 
    			parent::save();    		
    		else 
    		throw new Exception('A data de conclusão deve ser anterior a presente data.');
    	//else 
    	//	throw new Exception('Titulação incompatível com Escolaridade do Servidor');
    }*/
    
    function possuiDoutorado($idFunc=null)
    {global $MIOLO;
    	if (!$idFunc)
    	{
    		$idFunc = $this->idFuncionario;
    	}
    	
    	//$objFuncionario = $MIOLO->getBusiness('rh','funcionario');
		//$objFuncionario->GetById($idFunc);
    	
		$criteria =  $this->getCriteria();
        $criteria->addColumnAttribute('idtitulacao');
        $criteria->addCriteria('idFuncionario','=', "{$idFunc}");
        $criteria->addCriteria('idTitulacao','=', "27");
        $query = $criteria->retrieveAsQuery();
        
		if ($query->result)
		{
			return true;
		}
		else 
		{
			return false;
		}
        		
    	
    }

    function possuiMestrado($idFunc=null)
    {global $MIOLO;
    	if (!$idFunc)
    	{
    		$idFunc = $this->idFuncionario;
    	}
		$criteria =  $this->getCriteria();
        $criteria->addColumnAttribute('idtitulacao');
        $criteria->addCriteria('idFuncionario','=', "{$idFunc}");
        $criteria->addCriteria('idTitulacao','=', "26");
        $query = $criteria->retrieveAsQuery();
        
		if ($query->result)
		{
			return true;
		}
		else 
		{
			return false;
		}
    }
    
    function isEspecialista($idFunc=null)
    {global $MIOLO;
    	if (!$idFunc)
    	{
    		$idFunc = $this->idFuncionario;
    	}
		$criteria =  $this->getCriteria();
        $criteria->addColumnAttribute('idtitulacao');
        $criteria->addCriteria('idFuncionario','=', "{$idFunc}");
        $criteria->addCriteria('idTitulacao','=', "25");
        $query = $criteria->retrieveAsQuery();
        
		if ($query->result)
		{
			return true;
		}
		else 
		{
			return false;
		}
    }    

    function getTitulacao() {
    global $MIOLO;
    
        $tabelaGeral = $MIOLO->getBusiness('common', 'tabelageral');
        $titulacao = $tabelaGeral->listByTabela('RH_TITULACAO');
        $titulacao = $titulacao->chunkResult();
        $titulacao = $titulacao[$this->idTitulacao];
        return $titulacao;

    }

    function getArrayTitulacoes() {

        $titulacoes = $this->getFuncionario()->getTitulacoes();
        if (is_array($titulacoes)) foreach($titulacoes as $t) $arrayTitulacoes[$t->idHistTitulacao] = $t->nomecurso . ' - ' . $t->escolaridadePCCTAE->descricao;
        return $arrayTitulacoes;

    }

    function getFuncionario()
    {
        $this->retrieveAssociation('funcionario');
        return $this->funcionario;
    }
}
?>
