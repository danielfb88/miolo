<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

MIOLO::Import('modules::rh::classes::exception');
/**
 * Classe Ferias()
 * @author: CGCO/UFJF
 * @status: 'ready'
*/
class BusinessRhFerias extends MBusiness
{
    public $idVinculoPerAq;         // NUMBER(7)
    public $dataInicioPerAq;        // DATE
    public $dataInicio;             // DATE
    public $dataFim;                // DATE
    public $abono;                  // CHAR(1) //S or N
    public $adiantamento13;         // CHAR(1) //S or N
    public $adiantamentoSalario;    // CHAR(1) //S or N
    public $totalDias;              // NUMBER(2)
    public $inicioFimAbono;         // VARCHAR2(1)
    public $obs;                    // VARCHAR2(500)
    public $numFolha;               // NUMBER(2) // 6,12...
    public $dataFimPrevista;        // DATE
    public $abonoConst;             // CHAR(1) //S or N

    public $periodoAquisitivo;
    public $ocorrencia;
    public $krono;
    public $vinculo;
    public $licAfasts;
    public $provimentos;

    /**
     * Metodo Construtor
    */
    function __construct($data = null)
    {
        $this->krono = new MKrono();
        parent::__construct('sigaept', $data);
    }

    /**
     * Metodos de encapsulamento
    */
    function setIdVinculoPerAq($id)
    {
        $this->idVinculoPerAq=$id;
    }

    function getIdVinculoPerAq()
    {
        return $this->idVinculoPerAq;
    }

    function setDataInicioPerAq($data)
    {
        $this->dataInicioPerAq = $data;
    }

    function getDataInicioPerAq()
    {
        return $this->dataInicioPerAq;
    }

    function setDataInicio($data)
    {
        $this->dataInicio = $data;
    }

    function getDataInicio()
    {
        return $this->dataInicio;
    }

    function setDataFim($dataFim)
    {
        $this->dataFim = $dataFim;
    }

    function getDataFim()
    {
        return $this->dataFim;
    }

    function setAbono($abono)
    {
        $this->abono = $abono;
    }

    function getAbono()
    {
        return $this->abono;
    }

    function setAdiantamento13($adiantamento13)
    {
        $this->adiantamento13 = $adiantamento13;
    }

    function getAdiantamento13()
    {
        return $this->adiantamento13;
    }

    function setAdiantamentoSalario($adiantamentoSalario)
    {
        $this->adiantamentoSalario = $adiantamentoSalario;
    }

    function getAdiantamentoSalario()
    {
        return $this->adiantamentoSalario;
    }

    function setTotalDias($totalDias)
    {
        $this->totalDias = $totalDias;
    }

    function getTotalDias()
    {
        return $this->totalDias;
    }

    function setInicioFimAbono($inicioFimAbono)
    {
        $this->inicioFimAbono = $inicioFimAbono;
    }

    function getInicioFimAbono()
    {
        return $this->inicioFimAbono;
    }

    function setObs($obs)
    {
        $this->obs = $obs;
    }

    function getObs()
    {
        return $this->obs;
    }

    function setNumFolha($num)
    {
        $this->numFolha = $num;
    }

    function getNumFolha()
    {
        return $this->numFolha;
    }

    function setDataFimPrevista($data)
    {
        $this->dataFimPrevista = $data;
    }

    function getDataFimPrevista()
    {
        return $this->dataFimPrevista;
    }

    function setAbonoConst($abono)
    {
        $this->abonoConst = $abono;
    }

    function getAbonoConst()
    {
        return $this->abonoConst;
    }

    /**
     * public GetById()
     * Retonar o objeto requisitado
     * @status: 'ready'
    */
    function GetById($idvinc,$dtinicioperaq,$dtinicio)
    {
        $this->idVinculoPerAq   = $idvinc;
        $this->dataInicioPerAq  = $dtinicioperaq;
        $this->dataInicio       = $dtinicio;
        $this->retrive();
        return $this;
    }

    /**
     * public GetIsCeletista()
     * Verifica se funcionario é celetista
     * @status: 'ready'
    */
    function GetIsCeletista()
    {
        $this->retrieveAssociation('periodoAquisitivo');
        if ($this->periodoAquisitivo != null)
        return ($this->periodoAquisitivo->isCeletista());
    }

    /**
     * public BreakUp()
     * Verifica se estas ferias está interrompida
     * @status: 'ready'
    */
    function BreakUp()
    {
        global $MIOLO;
        $krono = new MKrono();

        if ($krono->CompareDate($this->getDataFim(), '<>', $this->getDataFimPrevista()))
        return TRUE;
        else
        return FALSE;
    }

    /**
     * public IsRaioXWorker()
     * Verifica se é um operador de Raio-X
     * @status: 'ready'
    */
    function IsRaioXWorker()
    {
        $vinculo = $this->_miolo->getBusiness('rh','vinculo');
        $vinculo->getById($this->idVinculoPerAq);
        if ( $vinculo->isAtivo() )
        {
            $provimento = $vinculo->getProvimentoAtual();
			switch ( $provimento->idGrupoCargo )
            {
                case 44:
                    return ( $provimento->idCargo == 93 );
                    break;
                case 63:
                    return ( $provimento->idCargo == 50 );
                    break;
                case 417:
                    return ( $provimento->idCargo == 50 );
                    break;
                case 701:
					if ( $provimento->idCargo == 257 ) return true;
					if ( $provimento->idCargo == 47 and 
						( ($provimento->idSetor == '219') || ($provimento->idSetor == '712') ) ) return true;
					return false;
                    break;
            }
        }
        return FALSE;
    }

    /**
     * public SetRaioXParcelas()
     * Faz o controle das parcelas para funcionario que trabalha no raio X
     * @status: 'ready'
    */
    function SetRaioXParcelas()
    {
        if ( $periodoAquisitivo == NULL )
        $this->retrieveAssociation('periodoAquisitivo');

        $periodoAquisitivo = $this->_miolo->GetBusiness('rh','periodoaquisitivo');
        $periodoAquisitivo->idVinculo = $this->idVinculoPerAq;
        $periodoAquisitivo->dataInicio = $this->dataInicioPerAq;
        $periodoAquisitivo->GetById($this->idVinculoPerAq);
        $tecnico = $periodoAquisitivo->isTecnicoAdministrativo($this->idVinculoPerAq);

        $nDias = array('0'=>0);

        if ($tecnico)   // TECADM
        {
            switch ( $periodoAquisitivo->diasUsufruidos )
            {
                case '' :
                $nDias = array('20'=>20);
                return $nDias;
                break;

                case '0' :
                $nDias = array('20'=>20);
                return $nDias;
                break;

                case '20' :
                $nDias = array('20'=>20);
                return $nDias;
                break;

                case '40' :
                $nDias = array('0'=>0);
                return $nDias;
                break;

                // FAZER AS CONTAS DENOVO CASO FUNCIONARIO RX POSSA INTERROMPER FERIAS
                default :
                $sub = 40 - $periodoAquisitivo->diasUsufruidos;
                $nDias = array('$sub'=>$sub);
                return $nDias;
                break;
            }
        }
        else  // DOCENTE
        {
            switch ( $periodoAquisitivo->diasUsufruidos )
            {

                case '' :
                $nDias = array('20'=>20,'25'=>25);
                return $nDias;
                break;

                case '0' :
                $nDias = array('20'=>20,'25'=>25);
                return $nDias;
                break;

                case '20' :
                $nDias = array('25'=>25);
                return $nDias;
                break;

                case '25' :
                $nDias = array('20'=>20);
                return $nDias;
                break;

// coloquei
                case '30' :
                $nDias = array('0'=>0);
                return $nDias;
                break;
//tirei
/*
                case '45' :
                $nDias = array('0'=>0);
                return $nDias;
                break;
*/
                // FAZER AS CONTAS DENOVO CASO FUNCIONARIO RX POSSA INTERROMPER FERIAS
                default :
//coloquei
                $sub = 30 - $periodoAquisitivo->diasUsufruidos;
//tirei
                //$sub = 45 - $periodoAquisitivo->diasUsufruidos;
                $nDias = array('$sub'=>$sub);
                return $nDias;
                break;
            }
        }
    }

    /**
     * public CalcDaysToUsufruct()
     * Altera o número de dias a serem usufruidos(diasUsufruidos)
     * @status: 'ready'
     */
    function CalcDaysToUsufruct($dias=null)
    {

        global $MIOLO,$newDays;

        $periodoAquisitivo = $MIOLO->GetBusiness('rh','periodoaquisitivo');
        $periodoAquisitivo->idVinculo = $this->idVinculoPerAq;
        $periodoAquisitivo->dataInicio = $this->dataInicioPerAq;
        $periodoAquisitivo->GetById($this->idVinculoPerAq);

        // caso haja dias a serem
        if ( $dias )
        {
            $periodoAquisitivo->diasUsufruidos -= $dias;
        }
        else
        {
            $v = $periodoAquisitivo->diasUsufruidos;
            $newDays = $v + $this->totalDias;
            $periodoAquisitivo->diasUsufruidos = $newDays;
        }

        $periodoAquisitivo->setTransaction($this->getTransaction());
        $periodoAquisitivo->saveForced();
        $periodoAquisitivo->log(OP_UPD,"vinculo: ".$periodoAquisitivo->idVinculo." data de inicio: ".$periodoAquisitivo->dataInicio." data fim: ".$periodoAquisitivo->dataFim." dias usufruidos: ".$periodoAquisitivo->diasUsufruidos);
    }

    /**
     * public getSituacaoFuncional()
     * Retorna a situacao funcional do funcionario
     * @status: 'ready'
    */
    function getSituacaoFuncional()
    {
        $vinculo = $this->_miolo->getBusiness('rh','vinculo',$this->idVinculoPerAq);
        $vinculo->getProvimentos();
        $provimento = $vinculo->getProvimentoAtual();
        return $provimento->idSituacao;

        /*
        $criteria =  $this->getCriteria();
        $criteria->addColumnAttribute('periodoAquisitivo.vinculo.provimentos.situacaofuncional.idSituacao');
        $criteria->addCriteria('periodoAquisitivo.vinculo.provimentos.idVinculo','=', "$this->idVinculoPerAq");
        $query = $criteria->retrieveAsQuery();
        return $query->result[0][0];
        */
    }

    /**
     * public getIdGrupoOcorrencia()
     * Busca o IdGrupoOcorrencia da ocorrencia passada como parametro recebido de setLicaAfastBySituacaoFuncional
     * @status: 'ready'
    */
    /*
    function getIdGrupoOcorrencia($idOcorrencia)
    {   global $MIOLO;

    $ocorrencia = $MIOLO->getBusiness('rh','ocorrencia');
    $criteria =  $ocorrencia->getCriteria();
    $criteria->addColumnAttribute('idGrupoOcorrencia');
    $criteria->addCriteria('idOcorrencia','=',"$idOcorrencia");
    $query = $criteria->retrieveAsQuery();
    return $query->result[0][0];
    }
    */

    /**
     * public setSituacaoFuncional()
     * seta o tipo de ocorrencia na tabela de licafast de acordo com a situacao do funcionario
     * @status: 'ready'
     */
    function setLicAfastBySituacaoFuncional($situacao,$delete=false)
    {
        global $MIOLO;

        switch ( $situacao )
        {
            case '1' :
                $Nocorrencia = '144';
                $Gocorrencia = '3';
            break;

            case '4' :
                $Nocorrencia = '144';
                $Gocorrencia = '3';
            break;

            case '8' :
                $Nocorrencia = '144';
                $Gocorrencia = '3';
            break;

            case '12' :
                $Nocorrencia = '507';
                $Gocorrencia = '3';
            break;

            case '20' :
                $Nocorrencia = '045';
                $Gocorrencia = '3';
            break;

            case '9' :
                $Nocorrencia = '144';
                $Gocorrencia = '3';
            break;
        }

        $licAfasts = $MIOLO->GetBusiness('rh','licafast');
        $licAfasts->GetById($this->getIdVinculoPerAq(),$this->getDataInicio(),false);
        $licAfasts->setTransaction($this->getTransaction());

        if ($licAfasts->idOcorrencia==null)
        {
            $licAfasts->idVinculo = $this->getIdVinculoPerAq();
            $licAfasts->dataInicio = $this->getDataInicio();
            $licAfasts->dataFim = $this->getDataFim();
            $licAfasts->idGrupoOcorrencia = $Gocorrencia;
            $licAfasts->idOcorrencia = $Nocorrencia;
        }
        else
        {
            if ($delete)
            {
                $ok = $licAfasts->delete();
                $licAfasts->log(OP_DEL,"vinculo: ".$licAfasts->idVinculo." data de inicio: ".$licAfasts->dataInicio." data fim: ".$licAfasts->dataFim." grupo ocorrencia: ".$licAfasts->idGrupoOcorrencia." ocorrencia: ".$licAfasts->idOcorrencia);
                return TRUE;

            }
            else
            {
                $licAfasts->dataFim = $this->getDataFim();
            }
        }
        $licAfasts->saveForced();
        $licAfasts->log(OP_INS,"vinculo: ".$licAfasts->idVinculo." data de inicio: ".$licAfasts->dataInicio." data fim: ".$licAfasts->dataFim." grupo ocorrencia: ".$licAfasts->idGrupoOcorrencia." ocorrencia: ".$licAfasts->idOcorrencia);
    }

    /**
     * public TestLicAfast()
     * Verifica se é possivel a marcacäo de ferias com base na tabela de licencas e afastamentos
     * @status: 'ready'
    */
    function TestLicAfast($dataInicio,$dataFim)
    {
        global $MIOLO;

        $krono = new MKrono();
        $simultaneo = FALSE;

        $permiteFerias = array('130','400','402','403','405','406','500','502','503','505','506');

        $licAfasts = $MIOLO->getBusiness('rh','licafast');
        $criteria =  $licAfasts->getCriteria();
        $criteria->addColumnAttribute('dataInicio');
        $criteria->addColumnAttribute('dataFim');
        $criteria->addColumnAttribute('idOcorrencia');
        $criteria->addCriteria('idVinculo','=',"'$this->idVinculoPerAq'");
        $query = $criteria->retrieveAsQuery();

        if ($query->result != null)
        {
            rsort($query->result);
            reset($query->result);
            $object=$query->result;

            foreach($object as $result)
            {
                //regras
                //1.se data inicio(escolhida) >= data inicio(banco) e a data inicio(escolhida) <= data fim(banco)
                $regra1A = $this->krono->CompareDate($dataInicio, '>=', $result[0]);
                $regra1B = $this->krono->CompareDate($dataInicio, '<=', $result[1]);
                $regras1AB = ($regra1A && $regra1B);

                //2.se data inicio(escolhida) <= a data inicio(banco) e data fim(escolhida) >= a data inicio(banco)
                $regra2A = $this->krono->CompareDate($dataInicio, '<=', $result[0]);
                $regra2B = $this->krono->CompareDate($dataFim, '>=', $result[0]);
                $regras2AB = ($regra2A && $regra2B);

                if (($regras1AB) || ($regras2AB))
                { //faz um array de possiveis casos simultaneos
                    $sObject[] = $result;
                    $simultaneo = TRUE;
                }

            }

        }
        if ($simultaneo)
        {
            $permite = FALSE;

            //para cada array simultaneo testa ocorrencia se = a ocorrencia permitida
            foreach($sObject as $o)
            {
                //testa cada ocorrencia
                foreach($permiteFerias as $p)
                {
                    if ($o[2] == $p)
                    return TRUE;

                }

            }
        }
        else
        return TRUE;

        if (!$permite)
        return FALSE;

    }

    /**
     * public IsFirstParcela()
     * Verifica se é a primeira parcela de férias marcada
     * @status: 'ready'
    */
    function IsFirstParcela()
    {
        $k = new MKrono();
        $dataInicioPerAq = $k->invertDate($this->dataInicioPerAq);
        $criteria = $this->getCriteria();
        $criteria->addColumnAttribute('dataInicioPerAq');
        $criteria->addCriteria('idVinculoPerAq','=',"{$this->idVinculoPerAq}");
        $criteria->addCriteria('dataInicioPerAq','=',"'$dataInicioPerAq'");
        $query = $criteria->retrieveAsQuery();
        return ( $query->eof() );
    }

    /**
     * public AntecedenciaMinima()
     * Verifica se a marcação pode ser efetudada (antecedência de 60 dias)
     * @status: 'ready'
     * Levar em consideração o número dos meses e não os dias.
    */
    function AntecedenciaMinima()
    {
        /*
        $today = date('d/m/Y');
        $dataMinima = $this->krono->operation('+',$today,'2%M');
        $anoMinimo = $this->krono->GetYear($dataMinima);
        $mesMinimo = $this->krono->GetMonth($dataMinima);
        $antesDataMinima = $this->krono->CompareDate($this->dataInicio,'<',$dataMinima);
        */
        $mesMinimo = date('m') + 2;
        $mesMarcado =  $this->krono->GetMonth($this->dataInicio);
        $ok =  ($mesMarcado >= $mesMinimo) ;
        return $ok;//( $antesDataMinima );
    }

    /**
     * public ValidaPrescricaoFerias()
     * Verifica se a data de inicio e data fim de ferias
     * @status: 'ready'
    */
    function ValidaPrescricaoFerias()
    {
        global $MIOLO;

        $periodoAquisitivo = $MIOLO->GetBusiness('rh','periodoaquisitivo');
        $periodoAquisitivo->idVinculo = $this->idVinculoPerAq;
        $periodoAquisitivo->dataInicio = $this->dataInicioPerAq;
        $periodoAquisitivo->GetById($this->idVinculoPerAq);

        //se data inicio marcada no formulario <= data de prescricao -> OK Permite Lançamento
        if ($this->krono->CompareDate($this->getDataInicio(),'<=',$periodoAquisitivo->getDataPrescricao()))
            return TRUE;
        else
            return FALSE;
    }

    /**
     * public AnoMarcacao()
     * Se ano de marcacao das ferias é posterior ao ano do periodo aquisitivo
     * @status: 'ready'
    */

    function AnoMarcacao()
    {
        $anoMarcado = $this->krono->GetYear($this->dataInicio);
        $anoPeriodo = $this->krono->GetYear($this->dataInicioPerAq);
        if ( $anoMarcado >= $anoPeriodo )
            return true;
        else
            return false;

    }

    /**
     * public Retroativo()
     * Testa se tentou marcar férias retroativas
     * @status: 'ready'
    */

    function Retroativo()
    {
        $today = date('d/m/Y');
        $retroativo = $this->krono->CompareDate($this->dataInicio,'<',$today);
        if ($retroativo)
            return TRUE;
        else
            return FALSE;
    }

    /**
     * public PermiteInterrupcao()
     * retorna se é permitido lançar interrupcao
     * @status: 'ready'
    */
    function PermiteInterrupcao()
    {
        $ok1 = $this->krono->Between($this->dataInicio, date('d/m/Y'), $this->dataFim);
        $ok2 = $this->krono->CompareDate($this->dataFim,'=',$this->dataFimPrevista);

        if ( ($ok1) && ($ok2) )
            return TRUE;
        else
            return FALSE;
    }

    /**
     * public Parcela()
     * Prevê a política de parcelamento de férias
     * @status: 'ready'
    */

    function Parcelas()
    {
        global $MIOLO;

        if ( $this->periodoAquisitivo == NULL )
        $this->retrieveAssociation('periodoAquisitivo');

        $periodoAquisitivo = $MIOLO->GetBusiness('rh','periodoaquisitivo');
        $periodoAquisitivo->idVinculo = $this->idVinculoPerAq;
        $periodoAquisitivo->dataInicio = $this->dataInicioPerAq;
        $periodoAquisitivo->GetById($this->idVinculoPerAq);

        $tecnico = $periodoAquisitivo->isTecnicoAdministrativo($this->idVinculoPerAq);

        $nDias = array('0'=>0);
        if ($periodoAquisitivo->isCeletista())
        {
            if (!$tecnico)   //DOCENTES - CELETISTA
            {
                switch ( $periodoAquisitivo->diasUsufruidos )
                {
                    case '' :
                    //tirei
                    //for ( $i=10; $i<=45; $i++ )
                    //coloquei
                    for ( $i=10; $i<=30; $i++ )
                    $nDias[$i] = $i;
                    return $nDias;
                    break;

                    case '0' :
                    //coloquei
                    for ($i=10; $i<=30; $i++ )
                    //tirei
                    //for ($i=10; $i<=45; $i++ )
                    $nDias[$i] = $i;
                    //var_dump("Teste: ".$nDias);
                    //var_dump($nDias);
                    return $nDias;
                    break;

                    default :
                    //coloquei - tirei, motivo abaixo
                    //$sub = 30 - $periodoAquisitivo->diasUsufruidos;
                    //tirei
					//coloquei denovo ( Pedido de Adriano - 3925 ) Cadastro
                    $sub = 45 - $periodoAquisitivo->diasUsufruidos;
                    $nDias = array($sub=>$sub);
                    return $nDias;
                    break;
                }
            }
            else
            {           // TECADM - CELETISTA

                switch ( $periodoAquisitivo->diasUsufruidos )
                {
                    case '' :
                    for ( $i=10; $i<=30; $i++ )
                        $nDias[$i] = $i;
                        return $nDias;
                    break;

                    case '0' :
                    for ( $i=10; $i<=30; $i++ )
                        $nDias[$i] = $i;
                        return $nDias;
                    break;


                    default :
                        $sub = 30 - $periodoAquisitivo->diasUsufruidos;
                        $nDias = array($sub=>$sub);
                        return $nDias;
                    break;
                }
            }
        }
        else
        {
            if (!$tecnico)  // DOCENTES - ESTATUTARIOS
            {
                for ( $i=1; $i<=45; $i++ )
                $nDias[$i] = $i;

                if ($periodoAquisitivo->possuiFeriasInterrompidas())
                {
                    $p = 45 - $periodoAquisitivo->diasUsufruidos;
                    $nDias = array($p=>$p);
                    return $nDias;
                }
                //echo "aqui -doc - est";

                switch ( $periodoAquisitivo->diasUsufruidos )
                {
                    case '' :
                        $nDias = array('15'=>15,'20'=>20,'25'=>25,'30'=>30, '45'=>45);
                        return $nDias;
                    break;

                    case '0' :
                        $nDias = array('15'=>15,'20'=>20,'25'=>25,'30'=>30, '45'=>45);
                        return $nDias;
                    break;

                    case '15' :
                        $nDias = array('15'=>15,'30'=>30);
                        return $nDias;
                    break;

                    case '20' :
                        $nDias = array('25'=>25);
                        return $nDias;
                    break;

                    case '25' :
                        $nDias = array('20'=>20);
                        return $nDias;
                    break;

                    case '30' :
                        $nDias = array('15'=>15);
                        return $nDias;
                    break;

                    case '45' :
                        $nDias = array('0'=>0);
                        return $nDias;
                    break;

                    default :
                        $sub = 45 - $periodoAquisitivo->diasUsufruidos;

                    if (($sub>0) && ($sub<=15))
                    {
                        $p = 15 - $sub;
                        $nDias = array($p=>$p);
                        return $nDias;

                    }
                    else
                    if (($sub>15) && ($sub<=20))
                    {
                        $p = 20 - $sub;
                        $nDias = array($p=>$p);
                        return $nDias;

                    }
                    else
                    if (($sub>20) && ($sub<=25))
                    {
                        $p = 25 - $sub;
                        $nDias = array($p=>$p);
                        return $nDias;
                    }
                    else
                    if (($sub>25) && ($sub<=30))
                    {
                        $p = 30 - $sub;
                        $nDias = array($p=>$p);
                        return $nDias;

                    }
                    else
                    /*
                    if (($sub>30) && ($sub<=45))
                    {
                        $p = 45 - $sub;
                        $nDias = array($p=>$p);
                        return $nDias;

                    }
                    */
                    break;
                }
            }
            else        // TECADM - ESTATUTARIO
            {
                for ( $i=1; $i<=30; $i++ )
                $nDias[$i] = $i;

                if ($periodoAquisitivo->possuiFeriasInterrompidas())
                {
                    $p = 30 - $periodoAquisitivo->diasUsufruidos;
                    $nDias = array($p=>$p);
                    return $nDias;
                }

                switch ( $periodoAquisitivo->diasUsufruidos )
                {
                    case '' :
                        $nDias = array('10'=>10,'15'=>15,'20'=>20, '30'=>30);
                        return $nDias;
                    break;

                    case '0' :
                        $nDias = array('10'=>10,'15'=>15,'20'=>20, '30'=>30);
                        return $nDias;
                    break;

                    case '10' :
                        $nDias = array('10'=>10,'20'=>20);
                        return $nDias;
                    break;

                    case '15' :
                        $nDias = array('15'=>15);
                        return $nDias;
                    break;

                    case '20' :
                        $nDias = array('10'=>10);
                        return $nDias;
                    break;

                    case '30' :
                        $nDias = array('0'=>0);
                        return $nDias;
                    break;

                    default :
                        $sub = 30 - $periodoAquisitivo->diasUsufruidos;

                    if (($sub>0) && ($sub<10))
                    {
                        $p = 10 - $sub;
                        $nDias = array($p=>$p);
                        return $nDias;

                    }
                    else
                    if (($sub>10) && ($sub<15))
                    {
                        $p = 15 - $sub;
                        $nDias = array($p=>$p);
                        return $nDias;

                    }
                    else
                    if (($sub>15) && ($sub<20))
                    {
                        $p = 20 - $sub;
                        $nDias = array($p=>$p);
                        return $nDias;
                    }
                    else
                    if (($sub>20) && ($sub<30))
                    {
                        $p = 30 - $sub;
                        $nDias = array($p=>$p);
                        return $nDias;
                    }
                    break;
                }
            }
        }
    }

    /**
     * public EmFerias()
     * Retorna se o funcionario está em férias em um dado momento
     * @status: 'ready'
    */

    function EmFerias($data)
    {
        $sair = FALSE;

        $criteria= $criteria->getCriteria();
        $criteria->addColumnAttribute('dataInicioPerAq');
        $criteria->addColumnAttribute('dataInicio');
        $criteria->addColumnAttribute('dataFim');

        $criteria->addCriteria('idVinculoPerAq','=','$this->idVinculoPerAq');
        $query = $criteria->retrieveAsQuery();

        foreach ($query->result as $r)
        {
            if ($this->krono->CompareDate($r[0],'=',$this->dataInicioPerAq))
            {
                if (($this->krono->CompareDate($data,'>=',$f[1])) && ($this->krono->CompareDate($data,'<=',$f[2])))
                return TRUE;
            }
        }
        return FALSE;
    }

    /**
     * public getPeriodoFerias()
     * Metodo utilizado no relatorio de ferias de servidor
     * @status: 'ready'
    */

    function getPeriodoFerias($matricula,$dataInicioFerias,$dataInicioPerAq)
    {
        global $MIOLO;

        $periodoAquisitivo = $MIOLO->GetBusiness('rh','periodoaquisitivo');
        $periodoAquisitivo->idVinculo = $matricula;
        $periodoAquisitivo->dataInicio = $dataInicioPerAq;

        $f = $periodoAquisitivo->getThisPerAqFerias();
        if (is_array($f))
        {
            sort($f);
        }

        $periodoAquisitivo->GetById($matricula);

        //echo("<pre>");var_dump($f);echo("</pre>");

        $a=1;
        if (is_array($f))
        {
            foreach ($f as $result)
            {
                if ($this->krono->CompareDate($result->dataInicio,'=',$dataInicioFerias))
                {
                    list($diaInicio,$mesInicio,$anoInicio) = split('/',$result->dataInicio);
                    list($diaFim,$mesFim,$anoFim) = split('/',$result->dataFim);

                    $sub = $this->krono->daysDiff($result->dataInicio,$result->dataFim);

                    if ($periodoAquisitivo->isDocente())
                    {
                        if ($sub==44)
                            return "INT";
                    }
                    else
                    {
                        if ($sub==29)
                            return "INT";
                    }

                    if ($periodoAquisitivo->totalDias == $periodoAquisitivo->diasUsufruidos)
                    {
                        return "INT";
                    }
                    else
                    {
                        return "".$a."P";
                    }

                }
                $a++;
            }
        }
    }

    /**
     * public listFerias()
     * Metodo para retornar informacoes sobre ferias dos servidores para o relatório
     * @status: 'ready'
    */
    function listFerias($mes=null,$ano=null,$SIAPE=null,$idSetores=null)
    {
        $dataInicio = "01/".$mes."/".$ano."";
        $dataFinal = $this->krono->operation('+',$dataInicio,'1%M');
		$mesAnt = ($mes-1);
        if ($mesAnt < 10)
        {
            $mesAnt = "0".$mesAnt;
        }
        $dataInicioCorreta =  "".$this->DaysInMonth($ano,$mesAnt)."/".($mesAnt)."/".$ano."";
        $nDataInicio = new InvertDate($dataInicioCorreta);
        $nDataFinal = new InvertDate($dataFinal);
        $criteria = $this->getCriteria();
        $criteria->addColumnAttribute('periodoAquisitivo.vinculo.idVinculo');
        $criteria->addColumnAttribute('periodoAquisitivo.vinculo.dvIdVinculo');
        $criteria->addColumnAttribute('periodoAquisitivo.vinculo.funcionario.pessoa.nome','nome');
// Motivo do problema:
$criteria->addColumnAttribute('periodoAquisitivo.vinculo.provimentos.idGrupoCargo','categoria');
        $criteria->addColumnAttribute('periodoAquisitivo.dataInicio','dataInicioPerAq');
        $criteria->addColumnAttribute('periodoAquisitivo.dataFim','dataFimPerAq');
        $criteria->addColumnAttribute('periodoAquisitivo.totalDias');
        $criteria->addColumnAttribute('dataInicio','dataInicio');
        $criteria->addColumnAttribute('dataFim','dataFim');
        $criteria->addColumnAttribute('adiantamento13');
        $criteria->addColumnAttribute('adiantamentoSalario');
        //$criteria->addColumnAttribute('abono');
        $criteria->addColumnAttribute('abonoConst');
        $criteria->addColumnAttribute('totalDias');

        if ( ! is_null($idSetores) )
        {
            // somente os que não são excluídos aparecerão.
            $criteria->addCriteria('periodoAquisitivo.vinculo.provimentos.dataFim','is', "NULL");
            $criteria->addCriteria('periodoAquisitivo.vinculo.provimentos.idSetor','IN', $idSetores);
            // colocar para procurar no idsetor do usuario tambem (se realmente for necessário).
        }

        $criteria->addCriteria('periodoAquisitivo.dataInicio','=','dataInicioPerAq');
// Motivo do problema:
$criteria->addCriteria('periodoAquisitivo.vinculo.provimentos.dataFim','is',"null");
        $criteria->addCriteria('dataInicio','>',"'{$nDataInicio->date}'");
        $criteria->addCriteria('dataInicio','<',"'{$nDataFinal->date}'");
        if ( $SIAPE )
            $criteria->addOrderAttribute('periodoAquisitivo.vinculo.idVinculo');
        else
            $criteria->addOrderAttribute('periodoAquisitivo.vinculo.funcionario.pessoa.nome');
        return $criteria->retrieveAsQuery();
    }

    function listSIAPE($mes=null,$ano=null)
    {
        $dataInicio = "01/".$mes."/".$ano."";
        $dataFinal = $this->krono->operation('+',$dataInicio,'1%M');
        $mesAnt = ($mes-1);
        if ($mesAnt < 10)
        {
        	$mesAnt = "0".$mesAnt;
        }
        $dataInicioCorreta =  "".$this->DaysInMonth($ano,$mesAnt)."/".($mesAnt)."/".$ano."";
        $nDataInicio = new InvertDate($dataInicioCorreta);
        $nDataFinal = new InvertDate($dataFinal);
        $criteria = $this->getCriteria();

        //$criteria->addColumnAttribute('periodoAquisitivo.vinculo.funcionario.pessoa.nome','nome');
		//$criteria->addColumnAttribute('periodoAquisitivo.vinculo.provimentos.idGrupoCargo','categoria');

        $criteria->addColumnAttribute('periodoAquisitivo.vinculo.idVinculo');
        $criteria->addColumnAttribute('periodoAquisitivo.vinculo.dvIdVinculo');
        $criteria->addColumnAttribute('dataInicio','dataInicio');
        $criteria->addColumnAttribute('dataFim','dataFim');
        $criteria->addColumnAttribute('adiantamento13');
        $criteria->addColumnAttribute('adiantamentoSalario');
        $criteria->addColumnAttribute('abono');
        //$criteria->addColumnAttribute('abonoConst');
        $criteria->addCriteria('periodoAquisitivo.dataInicio','=','dataInicioPerAq');
        $criteria->addCriteria('periodoAquisitivo.vinculo.provimentos.dataFim','is',"null");
        $criteria->addCriteria('dataInicio','>',"'{$nDataInicio->date}'");
        $criteria->addCriteria('dataInicio','<',"'{$nDataFinal->date}'");
        $criteria->addOrderAttribute('periodoAquisitivo.vinculo.idVinculo');
        return $criteria->retrieveAsQuery();
    }

    function DaysInMonth($Year,$MonthInYear )
    {
       if ( in_array ( $MonthInYear, array ( 1, 3, 5, 7, 8, 10, 12 ) ) )
           return 31;

       if ( in_array ( $MonthInYear, array ( 4, 6, 9, 11 ) ) )
           return 30;

       if ( $MonthInYear == 2 )
           return ( checkdate ( 2, 29, $Year ) ) ? 29 : 28;

       return false;
    }

    /**
     * public Delete()
     * Metodo responspavel pela exclusao de ferias (atualizacao de periodo aquisitivo e remoção da licenca de ferias)
     * @status: 'ready'
    */
    function delete()
    {
        global $MIOLO;

        $newDataInicio=$this->getDataInicio();
        $newDataFimPrevista=$this->getDataFimPrevista();
        $newDiffDias = $this->krono->daysDiff($newDataInicio, $newDataFimPrevista) + 1;

        $this->beginTransaction();
        $this->CalcDaysToUsufruct($newDiffDias);

        $this->setLicAfastBySituacaoFuncional($this->getSituacaoFuncional(),true);
        parent::delete();
        $this->log(OP_DEL,"vinculo: $this->idVinculoPerAq periodo aquisitivo: $this->dataInicioPerAq data inicio: $this->dataInicio data fim: $this->dataFim abono: $this->abono adiantamento salario: $this->adiantamentoSalario adiantamento 13: $this->adiantamento13 abono constituicional: $this->abonoConst total dias: $this->totalDias");
        $this->endTransaction();
    }

    /**
     * public SaveInterromper()
     * Metodo responspavel pela interrupção das férias do funcionário(atualizacao de periodo aquisito e datas de licenca-afastamentos
     * @status: 'ready'
    */

    function saveInterromper()
    {
        global $MIOLO;

        $newDataInicio=$this->getDataInicio();
        $newDataFim=$this->getDataFim();

        $newDiffDias = $this->krono->daysDiff($newDataInicio, $newDataFim);

        //TRANSACAO 1
        $this->beginTransaction();

        $periodoAquisitivo = $this->_miolo->GetBusiness('rh','periodoaquisitivo');
        $periodoAquisitivo->idVinculo = $this->idVinculoPerAq;
        $periodoAquisitivo->dataInicio = $this->dataInicioPerAq;
        $periodoAquisitivo->GetById($this->idVinculoPerAq);
        $periodoAquisitivo->diasUsufruidos = $newDiffDias + 1;
        $periodoAquisitivo->setTransaction($this->getTransaction());
        $periodoAquisitivo->saveForced();
        $periodoAquisitivo->log(OP_UPD,"vinculo: ".$periodoAquisitivo->idVinculo." data de inicio: ".$periodoAquisitivo->dataInicio." data fim: ".$periodoAquisitivo->dataFim." dias usufruidos: ".$periodoAquisitivo->diasUsufruidos);

        //Transacao 2
        $okRegistroLicAfast = $this->setLicAfastBySituacaoFuncional($this->getSituacaoFuncional());
        $this->setTotalDias($newDiffDias);
        parent::save();
        $this->log($op,"vinculo: $this->idVinculoPerAq periodo aquisitivo: $this->dataInicioPerAq data inicio: $this->dataInicio data fim: $this->dataFim abono: $this->abono adiantamento salario: $this->adiantamentoSalario adiantamento 13: $this->adiantamento13 abono constituicional: $this->abonoConst total dias: $this->totalDias");
        $this->endTransaction();
    }


    function calendarioFeriasLiberado($exclusao=null)
    {
        global $MIOLO;
        $calendarioFerias = $MIOLO->GetBusiness('rh','calendarioferias');
		$mes = $this->krono->GetMonth($this->dataInicio);
        $ano = $this->krono->GetYear($this->dataInicio);
        $calendarioFerias->GetByMesAno("'$mes'","'$ano'");
        $hoje = date("d/m/y");
        $r = $this->krono->CompareDate( $calendarioFerias->dtLimite, '>=', $hoje );
		//var_dump($r, $calendarioFerias->dtLimite,">=", $hoje);
		// se não tiver no banco de dados liberar a marcação!
        if ( is_null($calendarioFerias->dtLimite) )
        {
            $r = ture;
            if (!is_null($exclusao))
            {
                $r = false;
            }
        }
        //var_dump($mes,$ano,$calendarioFerias->dtLimite,$r);
        return $r;
    }


    /**
     * public save()
     * Persiste as informacões do objeto férias, e objetos que dependem de ferias, licAfast e *periodoAquisitivo
     * @status: 'ready'
    */
    function save($verificaAntecedencia=FALSE,$privilegios=false)
    {
        global $MIOLO, $perms;

		// liberando para o perfil RH_CADASTRO.

        if ( $this->calendarioFeriasLiberado() || $privilegios || $perms->isMemberOf($login,'RH_CADASTRO') )
        {
            if ($this->ValidaPrescricaoFerias() || $perms->isMemberOf($login,'RH_CADASTRO') )
            {
                //validacao das RN
                if ($this->AnoMarcacao() || $perms->isMemberOf($login,'RH_CADASTRO') )
                {
                    //1º
                    if( !$this->Retroativo() || $verificaAntecedencia  || $perms->isMemberOf($login,'RH_CADASTRO') )
                    {
                        if ( $this->AntecedenciaMinima() || $verificaAntecedencia  || $perms->isMemberOf($login,'RH_CADASTRO') )
                        {
                            $diasTotais = $this->getTotalDias()-1;
                            $diasTotais = $diasTotais.'%D';
                            $dataFinalFerias = $this->krono->operation('+',$this->getDataInicio(),$diasTotais);
                            $this->setDataFim($dataFinalFerias);

                            //seta  dataFimPrevista = dataFim
                            $this->setDataFimPrevista($this->getDataFim());

                            if ($this->TestLicAfast($this->getDataInicio(),$this->getDataFim()))
                            {
                                //testa se tentou lançar gratificacao
                                if ($this->getAdiantamento13()=='S')
                                {
                                    //recebe mes de usufruicao para checagem de gratificacao Natalina
                                    $mesMarcadoUsufruicao = $this->krono->getMonth($this->getDataInicio());
                                    $junho = 6;
                                    $gratificacaoNatalina =($mesMarcadoUsufruicao > $junho);

                                }
                                if ( $gratificacaoNatalina )
                                {
                                    throw new ESimpleRnException("Opção pelo adiantamento da gratificação natalina permitido apenas para férias a serem usufruídas até o mês de junho.");
                                }
                                else
                                {
                                    //TRANSACAO 1
                                    $this->beginTransaction();
                                    $this->CalcDaysToUsufruct();

                                    //TRANSACAO 2
                                    $this->setLicAfastBySituacaoFuncional($this->getSituacaoFuncional());

                                    //executa teste de abono para primeiras parcelas de ferias
                                    if ( ($this->IsFirstParcela()) || ($this->IsRaioXWorker()) )
                                        $this->setAbonoConst('S');
                                    else
                                        $this->setAbonoConst('N');

                                    if (!$this->GetIsCeletista())
                                        $this->setAbono('N');

                                    //TRANSACAO 3
                                    parent::save();
                                    $op = $this->isPersistent() ? OP_UPD : OP_INS;
                                    $this->log($op,"vinculo: $this->idVinculoPerAq periodo aquisitivo: $this->dataInicioPerAq data inicio: $this->dataInicio data fim: $this->dataFim abono: $this->abono adiantamento salario: $this->adiantamentoSalario adiantamento 13: $this->adiantamento13 abono constituicional: $this->abonoConst total dias: $this->totalDias");
                                    $this->endTransaction();
                                }// if  gatafiticacao e adiantamento


                            }// EM LICENCA
                            else
                            {
                                throw new ESimpleRnException("Não é possível lançar férias nesse período pois o funcionário se encontra em licenca!");

                            }


                        }// AntecedenciaMinima
                        else
                        {
                            throw new ESimpleRnException("As férias devem ser marcadas com uma antecedência mínima de 2 meses do mês previsto para usufruição.");
                        }
                    }// retroativo
                    else
                    {
                        throw new ESimpleRnException("Não é permitida marcação de férias retroativas.");
                    }
                }
                else
                {
                    throw new ESimpleRnException("Não é permitida marcação de férias para ano(s) anterior(es) ao período aquisitivo.");
                }
            }
            else
            {
                throw new ESimpleRnException("Não é permitida marcação de férias para uma data posterior à prescrição do período aquisitivo.");
            }
        }
        else
        {
            throw new ESimpleRnException("Não é permitida marcação de férias. Por favor consulte o cronograma de lançamento de férias.");
        }

    }//fim save
    function edit($verificaAntecedencia=FALSE,$privilegios=false)
    {
        global $MIOLO, $perms;

	// liberando para o perfil RH_CADASTRO.

        if ( $this->calendarioFeriasLiberado() || $privilegios || $perms->isMemberOf($login,'RH_CADASTRO') )
        {
        	if ($this->ValidaPrescricaoFerias() || $perms->isMemberOf($login,'RH_CADASTRO') )
            	{
                	//validacao das RN
                	if ($this->AnoMarcacao() || $perms->isMemberOf($login,'RH_CADASTRO') )
                	{
                	//1º
                    		if( !$this->Retroativo() || $verificaAntecedencia  || $perms->isMemberOf($login,'RH_CADASTRO') )
                    		{
                        		if ( $this->AntecedenciaMinima() || $verificaAntecedencia  || $perms->isMemberOf($login,'RH_CADASTRO') )
                        		{
                            			$diasTotais = $this->getTotalDias()-1;
                            			$diasTotais = $diasTotais.'%D';
                            			$dataFinalFerias = $this->krono->operation('+',$this->getDataInicio(),$diasTotais);
                            			$this->setDataFim($dataFinalFerias);

                            			//seta  dataFimPrevista = dataFim
                            			$this->setDataFimPrevista($this->getDataFim());

                            			//if ($this->TestLicAfast($this->getDataInicio(),$this->getDataFim()))
                            			//{
                                		//testa se tentou lançar gratificacao
                                		if ($this->getAdiantamento13()=='S')
                                		{
                                    			//recebe mes de usufruicao para checagem de gratificacao Natalina
                                    			$mesMarcadoUsufruicao = $this->krono->getMonth($this->getDataInicio());
                                    			$junho = 6;
                                    			$gratificacaoNatalina =($mesMarcadoUsufruicao > $junho);

                                		}
                               			if ( $gratificacaoNatalina )
                                		{
                                   			throw new ESimpleRnException("Opção pelo adiantamento da gratificação natalina permitido apenas para férias a serem usufruídas até o mês de junho.");
                                		}
                                		else
                                		{
                                    			//TRANSACAO 1
                                    			$this->beginTransaction();
                                    			$this->CalcDaysToUsufruct();

                                    			//TRANSACAO 2
                                    			$this->setLicAfastBySituacaoFuncional($this->getSituacaoFuncional());

                                    			//executa teste de abono para primeiras parcelas de ferias
                                    			if ( ($this->IsFirstParcela()) || ($this->IsRaioXWorker()) )
                                       				$this->setAbonoConst('S');
                                    			else
                                        			$this->setAbonoConst('N');

                                    			if (!$this->GetIsCeletista())
                                        			$this->setAbono('N');

                                    			//TRANSACAO 3
                                    			parent::save();
                                    			$op = $this->isPersistent() ? OP_UPD : OP_INS;
                                    			$this->log($op,"vinculo: $this->idVinculoPerAq periodo aquisitivo: $this->dataInicioPerAq data inicio: $this->dataInicio data fim: $this->dataFim abono: $this->abono adiantamento salario: $this->adiantamentoSalario adiantamento 13: $this->adiantamento13 abono constituicional: $this->abonoConst total dias: $this->totalDias");
                                    			$this->endTransaction();
                                		}// if  gatafiticacao e adiantamento


                            			//}// EM LICENCA
                            			//else
                            			//{
                              			//  throw new ESimpleRnException("Não é possível lançar férias nesse período pois o funcionário se encontra em licenca!");

                           			// }


                        		}// AntecedenciaMinima
                        		else
                        		{
                            			throw new ESimpleRnException("As férias devem ser marcadas com uma antecedência mínima de 2 meses do mês previsto para usufruição.");
                        		}
                    		}// retroativo
                    		else
                    		{
                        		throw new ESimpleRnException("Não é permitida marcação de férias retroativas.");
                    		}
                	}
                	else
                	{
                    	throw new ESimpleRnException("Não é permitida marcação de férias para ano(s) anterior(es) ao período aquisitivo.");
                	}
           	}
            	else
            	{
                	throw new ESimpleRnException("Não é permitida marcação de férias para uma data posterior à prescrição do período aquisitivo.");
            	}
        }
        else
        {
            throw new ESimpleRnException("Não é permitida marcação de férias. Por favor consulte o cronograma de lançamento de férias.");
        }

    }//fim edit

    function adiantou13()
    {
        $k = new MKrono();
        $dataInicioPerAq = $k->invertDate($this->dataInicioPerAq);
        $criteria = $this->getCriteria();
        $criteria->addColumnAttribute('dataInicioPerAq');
        $criteria->addCriteria('idVinculoPerAq','=',"{$this->idVinculoPerAq}");
        $criteria->addCriteria('dataInicioPerAq','=',"'$dataInicioPerAq'");
        $criteria->addCriteria('adiantamento13','=',"'S'");
        $query = $criteria->retrieveAsQuery();
        return ( ! $query->eof() );
    }

    /**
     * public listFerias()
     * Metodo para retornar informacoes sobre ferias dos servidores para o relatório
     * @status: 'ready'
    */
    function listFeriasRelatorioProRh($mes=null,$ano=null)
    {
        $dataInicio = "01/".$mes."/".$ano."";
        $dataFinal = $this->krono->operation('+',$dataInicio,'1%M');

        $nDataInicio = new InvertDate($dataInicio);
        $nDataFinal = new InvertDate($dataFinal);

        $criteria = $this->getCriteria();
        $criteria->addColumnAttribute('idVinculoPerAq');
        $criteria->addColumnAttribute('periodoAquisitivo.vinculo.funcionario.pessoa.nome','nome');

        $criteria->addColumnAttribute('periodoAquisitivo.dataInicio','dataInicioPerAq');
        $criteria->addColumnAttribute('periodoAquisitivo.dataFim','dataFimPerAq');
        $criteria->addColumnAttribute('periodoAquisitivo.totalDias');

        $criteria->addColumnAttribute('dataInicio','dataInicio');
        $criteria->addColumnAttribute('dataFim','dataFim');
        $criteria->addColumnAttribute('totalDias');

        $criteria->addColumnAttribute('adiantamento13');
        $criteria->addColumnAttribute('adiantamentoSalario');
        $criteria->addColumnAttribute('abono');


        $criteria->addCriteria('periodoAquisitivo.dataInicio','=','dataInicioPerAq');
        $criteria->addCriteria('periodoAquisitivo.vinculo.provimentos.dataFim','is',"null");

        $criteria->addCriteria('dataInicio','>=',"'{$nDataInicio->date}'");
        $criteria->addCriteria('dataFim','<',"'{$nDataFinal->date}'");
        $criteria->addOrderAttribute('periodoAquisitivo.vinculo.funcionario.pessoa.nome');

        return $criteria->retrieveAsQuery();
    }

    function getByVinculoDataInicio($idVinculo,$dataInicio)
    {
        $k = new MKrono();
        $dataInicio = $k->invertDate($dataInicio);
        $criteria = $this->getCriteria();
        $criteria->addCriteria('idVinculoPerAq','=',"'$idVinculo'");
        $criteria->addCriteria('dataInicio','=',"'$dataInicio'");
        return $this->retrieveFromCriteria($criteria);
    }
}
?>
