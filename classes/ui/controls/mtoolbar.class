<?php
/**
 * Country form
 *
 * @author Daniel Afonso Heisler [daniel@solis.coop.br]
 *         Alexandre Heitor Schmidt [alexsmith@solis.coop.br]
 *         Vilson Cristiano Gartner [vilson@miolo.org.br]
 *
 * @version $Id$
 *
 * \b Maintainers: \n
 * Vilson Cristiano Gartner [vilson@miolo.org.br]
 *
 * @since
 * Creation date 2005/08/04
 *
 * \b Organization: \n
 * SOLIS - Cooperativa de Soluções Livres \n
 * The SAGU2 Development Team
 *
 * \b CopyLeft: \n
 * CopyLeft (L) 2005 SOLIS - Cooperativa de Soluções Livres \n
 *
 * \b License: \n
 * Licensed under GPL (for further details read the COPYING file or 
 * http://www.gnu.org/copyleft/gpl.html)
 *
 * \b History: \n
 * See history in CVS repository: http://www.miolo.org.br
 *
 */

class MToolBarButton extends MControl
{
    public  $name;
    public  $caption;
    public  $enabled;

    private $url;
    private $hint;
    private $enabledImage;
    private $disabledImage;
    private $button;
    private $method='';

    public function __construct($name, $caption, $url, $hint, $enabled, $enabledImage, $disabledImage, $method='')
    {
        $this->name    = $name;
        $this->caption = $caption;
        $this->url     = $url;
        $this->hint    = $hint;
        $this->enabled = $enabled;
        $this->method  = $method;
        $this->enabledImage  = $enabledImage;
        $this->disabledImage = $disabledImage;

        if ( $enabled )
        {
            $this->enable();
        }
        else
        {
            $this->disable();
        }
    }

    public function setMethod($method='post')
    {
        $this->method = $method;
    }

    public function getButton()
    {
        return $this->button;
    }

    public function show()
    {
        $this->enable();
    }

    public function hide()
    {
        unset($this->button);
    }

    public function enable()
    {
        if( $this->method == 'post')
        {
            $this->button = new MImageButton($this->name, $this->caption, $this->url, $this->enabledImage);
        }
        else
        {
            $this->button = new MImageLink($this->name, $this->caption, $this->url, $this->enabledImage);
        }
        $this->button->setJSHint( $this->hint );
    }

    public function disable()
    {
        $this->button = new MImage($this->name, $this->caption, $this->disabledImage);
        $this->button->setJSHint( $this->hint );
    }

}

class MToolBar extends MBaseGroup
{
    const BUTTON_NEW    = 'tbBtnNew';
    const BUTTON_SAVE   = 'tbBtnSave';
    const BUTTON_DELETE = 'tbBtnDelete';
    const BUTTON_SEARCH = 'tbBtnSearch';
    const BUTTON_PRINT  = 'tbBtnPrint';
    const BUTTON_EXIT   = 'tbBtnExit';

    private $toolBarButtons;

   /**
    *
    *
    */
    public function __construct($name='ToolBar',  $url='' )
    {
        parent::__construct($name, '');

        $this->name = $name;

        $MIOLO  = MIOLO::getInstance();

        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'new-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'new-disabled-20x20.png');
        $newUrl = (strlen($url) > 0) ? $url . '&function=insert' : '';
        $this->toolBarButtons['tbBtnNew'] = new MToolBarButton( 'tbBtnNew', _M('New'), $newUrl, _M('New'), true, $enabledImage, $disabledImage);
        //$this->toolBarButtons['tbBtnNew'] = new MImageLink( 'tbBtnNew', _M('New'), $newUrl, $enabledImage);

        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'save-20x20.png' );
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id,  'save-disabled-20x20.png' );
        $newUrl = (strlen($url) > 0) ? $url . '&function=' . MIOLO::_REQUEST('function') : '';
        $this->toolBarButtons['tbBtnSave'] = new MToolBarButton('tbBtnSave', _M('Save'), $newUrl, _M('Save'), true, $enabledImage, $disabledImage,'post');

        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'delete-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'delete-disabled-20x20.png');
        $newUrl = (strlen($url) > 0) ? $url . '&function=' . MIOLO::_REQUEST('function') : '';
        $this->toolBarButtons['tbBtnDelete'] = new MToolBarButton('tbBtnDelete', _M('Delete'), $newUrl, _M('Delete'), true, $enabledImage, $disabledImage);
        //$this->toolBarButtons['tbBtnDelete'] = new MImageLink( 'tbBtnDelete', _M('Delete'), $newUrl, $enabledImage);

        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'search-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'search-disabled-20x20.png');
        $newUrl = (strlen($url) > 0) ? $url . '&function=search' : '';
        $this->toolBarButtons['tbBtnSearch'] = new MToolBarButton('tbBtnSearch', _M('Search'), $newUrl, _M('Search'), true, $enabledImage, $disabledImage);
        //$this->toolBarButtons['tbBtnSearch'] = new MImageLink( 'tbBtnSearch', _M('Search'), $newUrl, $enabledImage);

        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'print-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'print-disabled-20x20.png');
        $newUrl = (strlen($url) > 0) ? $url . '&function=print' : '';
        $this->toolBarButtons['tbBtnPrint'] = new MToolBarButton('tbBtnPrint', _M('Print'), $newUrl, _M('Print'), true, $enabledImage, $disabledImage);
        //$this->toolBarButtons['tbBtnPrint'] = new MImageLink( 'tbBtnPrint', _M('Print'), $newUrl, $enabledImage);

        $enabledImage  = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'exit-20x20.png');
        $disabledImage = $MIOLO->getUI()->GetImageTheme($MIOLO->theme->id, 'exit-disabled-20x20.png');
        
        $newUrl = $MIOLO->getPreviousURL();
        $this->toolBarButtons['tbBtnExit'] = new MToolBarButton('tbBtnExit', _M('Exit'), $newUrl, _M('Exit'), true, $enabledImage, $disabledImage);
        //$this->toolBarButtons['tbBtnExit'] = new MImageLink( 'tbBtnExit', _M('Exit'), $newUrl, $enabledImage);
    }

    public function getButtons()
    {
        foreach ( $this->toolBarButtons as $b )
        {
            if( method_exists($b,'getButton') )
            {
                $buttons[] = $b->getButton();
            }
            else
            {
                $buttons[] = $b;
            }
        }

        return $buttons;
    }

    public function addButton($name, $caption, $url, $hint, $enabled, $enabledImage, $disabledImage)
    {
        $this->toolBarButtons[$name] = new MToolBarButton($name, $caption, $url, $hint, $enabled, $enabledImage, $disabledImage);
    }

    public function showButton($name)
    {
        $this->toolBarButtons[$name]->show();
    }

    public function hideButton($name)
    {
        $this->toolBarButtons[$name]->hide();
    }

    public function enableButton($name)
    {
        $this->toolBarButtons[$name]->enable();
    }

    public function disableButton($name)
    {
        $this->toolBarButtons[$name]->disable();
    }

    public function setIsPost($name,$post=true)
    {
        $this->toolBarButtons[$name]->setMethod( $post ? 'post' : '' );
    }

    public function generateInner()
    {
        parent::__construct( $this->name, '', $this->getButtons() );
        parent::generateInner();
    }
}

?>
