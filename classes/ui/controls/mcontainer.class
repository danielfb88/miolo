<?php
class MContainer extends MFormControl
{
    var $disposition;
    var $separator;
    var $showLabel; // se label deve ser exibido junto com os campos
    var $spaceHeight; // espaçamento em pixels entre os campos no disposition=vertical
    var $spaceWidth; // espaçamento em pixels entre os campos no disposition=horizontal

    function __construct($name = NULL, $controls = NULL, $disposition = 'none')
    {
        parent::__construct($name);
        $controls = (($controls != '') && is_array($controls)) ? $controls : array();
        $this->showLabel = false;
        $this->spaceHeight = '3px';
        $this->spaceWidth = '5px';
        $this->setControls($controls);
        $this->setDisposition($disposition);
    }

    function setClass($cssClass)
    {
        $this->SetBoxClass($cssClass);
    }

    function setSpaceHeight($value)
    {
        $this->spaceHeight = $value;
    }

    function setSpaceWidth($value)
    {
        $this->spaceWidth = $value;
    }

    function setDisposition($disposition)
    {
        $this->disposition = ($disposition == 'none') ? 'horizontal' : $disposition;
    }

    function GenerateInner()
    {
        $float = false;
        $t = array();

        $controls = $this->getControls();

        foreach ($controls as $control)
        {
            $c = clone $control;

            if ($c instanceof MFormControl)
            {
                $c->setAutoPostBack($this->autoPostBack || $c->autoPostBack);
            }
            if ($c instanceof MContainer)
            {
                $c->showLabel = $this->showLabel;
            }
            if ($this->showLabel)
            {
               $c->formMode = ($c->showLabel ? 2 : 0);
            }

            if ($this->disposition == 'horizontal')
            {
                $c->float = 'left';
                $c->addBoxStyle('margin-right', $this->spaceWidth);
                $float = true;
            }
            else
            {
                $c = new MDiv('', $c);
                $c->addBoxStyle('margin-bottom', $this->spaceHeight);
            }

            $t[] = MHtmlPainter::GenerateToString($c);
        }

        if ($float)
        {
            $clear = new MSpacer(); $t[] = $clear; 
//            $this->setClass('m-container-controls'); 
        }

        $this->inner = $t;
    }
}

class MVContainer extends MContainer
{
    function __construct($name = NULL, $controls = NULL)
    {
        parent::__construct($name, $controls, 'vertical');
    }
}

class MHContainer extends MContainer
{
    function __construct($name = NULL, $controls = NULL)
    {
        parent::__construct($name, $controls, 'horizontal');
    }
}
?>