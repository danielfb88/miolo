<?php
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# @title
#   Dialogs classes
#
# @description
/**
 * Brief Class Description.
 * Complete Class Description.
 */
#   Implementation of the prompt class for generating common dialogs.
#
# @see      miolo/ui/tabbedform.class,
#           miolo/ui/themepainter.class
#
# @topics   ui
#
# @created
#   2001/08/14
#
# @organisation
#   MIOLO - Miolo Development Team - UNIVATES Centro Universitario
#
# @legal
#   CopyLeft (L) 2001-2002 UNIVATES, Lajeado/RS - Brasil
#   Licensed under GPL (see COPYING.TXT or FSF at www.fsf.org for
#   further details)
#
# @contributors
#   Vilson Cristiano Gartner [author] [vgartner@univates.br]
#   Thomas Spriestersbach    [author] [ts@interact2000.com.br]
# 
# @maintainers
#   Vilson Cristiano Gartner [author] [vgartner@univates.br]
#   Thomas Spriestersbach    [author] [ts@interact2000.com.br]
#
# @history
#   $Log: prompt.class,v $
#   Revision 1.4  2002/11/16 11:08:56  vgartner
#   Maintenance code
#
#   Revision 1.3  2002/09/17 18:50:41  vgartner
#   added 'component' support
#
#   Revision 1.2  2002/09/05 00:59:16  vgartner
#   project maintenance for CVS
#
#
#
# @id $Id: prompt.class,v 1.4 2002/11/16 11:08:56 vgartner Exp $
#---------------------------------------------------------------------

class MPrompt extends MControl
{
    var $caption;
    var $message;
    var $buttons;
    var $icon;
    var $type = 'prompt';
    var $box;

    #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    # This is the constructor of the class.
    # Use the <code>SetType</code> method to specify the type of the dialog.
    # <br>caption
    # 
    # @param $caption (string) Title of the box
    # @patam $message (string) Message for the prompt message
    # @param $icon (file url) Image to display on the message
    #
    # @example
    #
    # @returns (nothing)
    #---------------------------------------------------------------------
    function __construct($caption = null, $message = null, $icon = '/images/error.gif')
    {
        parent::__construct();
        $this->caption = $caption;
        $this->message = $message;
        $this->icon = $icon;

        if (!$this->caption)
        {
            $this->caption = _M('Alerta');
        }

        if (!$this->message)
        {
            $this->message = _M('Razão desconhecida');
        }
    }

    function /* STATIC */ Error($msg = '', $goto = '', $caption = '', $event = '')
    {
        if (!$caption)
        {
            $caption = _M('Erro');
        }

        $prompt = new MPrompt($caption, $msg);
        $prompt->SetType('error');

        if ($goto != 'NONE')
        {
            $prompt->AddButton(_M('   Voltar   '), $goto, $event);
        }

        return $prompt;
    }

    function /* STATIC */ Information($msg, $goto = '', $event = '')
    {
        global $MIOLO;

        $prompt = new MPrompt(_M('Informação'), $msg, $MIOLO->url_home . '/images/information.gif');
        $prompt->SetType('information');

        if ($goto != 'NONE')
        {
            $prompt->AddButton('   OK   ', $goto, $event);
        }

        return $prompt;
    }

    function /* STATIC */ Confirmation($msg, $gotoOK = '', $gotoCancel = '', $eventOk = '', $eventCancel = '')
    {
        global $MIOLO;

        $prompt = new MPrompt(_M('Confirmação'), $msg, $MIOLO->url_home . '/images/attention.gif');
        $prompt->SetType('confirmation');
        $prompt->AddButton('    OK    ', $gotoOK, $eventOk);
        $prompt->AddButton(_M(' Cancelar '), $gotoCancel, $eventCancel);

        return $prompt;
    }

    function /* STATIC */ Question($msg, $gotoYes = '', $gotoNo = '', $eventYes = '', $eventNo = '')
    {
        global $MIOLO;

        $prompt = new MPrompt(_M('Confirmação'), $msg, $MIOLO->url_home . '/images/question.gif');
        $prompt->SetType('question');
        $prompt->AddButton(_M('   Sim   '), $gotoYes, $eventYes);
        $prompt->AddButton(_M('   Não   '), $gotoNo, $eventNo);

        return $prompt;
    }

    function SetType($type)
    {
        $this->type = $type;
    }

    function AddButton($label, $href, $event = '')
    {
        $this->buttons[] = array
            (
            $label,
            $href,
            $event
            );
    }

    function Generate()
    {
        $content = '';

        if (!is_array($this->message))
            $this->message = array($this->message);

        $content .= "<ul>\n";

        foreach ($this->message as $m)
            $content .= "<li>$m</li>";

        $content .= "</ul>\n";
        $textBox = new MDiv('', $content, 'm-prompt-box-text');
        $content = '&nbsp;';

        if ($this->buttons)
        {
            $content = "<ul>\n";

            foreach ($this->buttons as $b)
            {
                $label = $b[0];
                $goto = $b[1];
                $event = $b[2];
                $name = $this->name . trim($label);

                if ($goto != '')
                {
                    $onclick = $goto . (($event != '') ? "&event=$event" : "");
                    $button = new MButton($name, $label, $onclick);
                    $button->SetClass('button');
                    $content .= '<li>' . $button->Generate() . '</li>';
                }
                else
                {
                    if ($event != '')
                    {
                        $eventTokens = explode(';', $event);
                        $onclick = "_doPostBack('{$eventTokens[0]}','{$eventTokens[1]}')";
                    }

                    $button = new MButton($name, $label, $onclick);
                    $button->SetClass('button');
                    $content .= '<li>' . $button->Generate() . '</li>';
                }
            }

            $content .= "</ul>\n";
            $buttonBox = new MDiv('', $content, 'm-prompt-box-button');
        }
        else
        {
            $buttonBox = new MSpacer('20px');
        }

        $type = strtolower($this->type);
/*
        $title = new Div('', $this->caption, "m-prompt-box-title m-prompt-box-{$type}-title");
        $box = new Div('', array($title, $textBox, $buttonBox), "m-prompt-box-{$type}");
        $this->inner = new Div('', $box, 'm-prompt-box');
*/
        $close = $onclick;
        $this->box = new MBox($this->caption, $close, '');
        $this->box->boxTitle->SetBoxClass("m-prompt-box-title m-prompt-box-title-{$type}");
        $body = new MDiv('',array($textBox, $buttonBox),"m-prompt-box-{$type}");
        $this->box->SetControls(array($body));
        $id = $this->GetUniqueId();
        $prompt = new MDiv("pb$id",new MDiv($id,$this->box,"m-prompt-box-box"),"m-prompt-box");
        return $prompt->Generate();

    }
}
?>