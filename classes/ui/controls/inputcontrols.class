<?php

class MTextField extends MFormControl
{
    public $size; // =0 => hidden
    public $type; //text, multiline, password, file
    public $validator;
    public $rows;
    public $cols;
    public $mask;

    public function __construct( $name='',$value='',$label='', $size=10, $hint='', $validator=NULL, $isReadOnly=false )
    {
        parent::__construct( $name, $value, $label, '', $hint );

        $this->setReadOnly( $isReadOnly );
        $this->size     = $size;
        $this->type     = ( ($size > 0) ) ? 'text' : 'hidden';
        $this->setValidator( $validator );
        $this->rows     = 1;
        $this->cols     = $this->size;
        $this->mask = '';
        $this->formMode = MControl::FORM_MODE_SHOW_SIDE;
        $this->formName = $this->page->getName();
    }


    public function getValidator()
    {
        return $this->validator;
    }


    public function setValidator( $value )
    {
        $this->validator = is_string($value) ? new MMaskValidator( $name, $label, $value ) : $value;
    }

    public function addMask( $mask, $optional = true, $msg = '' )
    {
        $this->mask[0] = $mask; 
        $this->mask[1] = $optional ? 'true':'false'; 
        $this->mask[2] = $msg; 
    }

    public function generateInner()
    {
        if ( ( $this->label ) && ( $this->type == 'hidden' ) )
        {
            $span = new MSpan( $this->name, $this->value, 'm-caption' ) ;
            $html = $this->painter->span( $span );
        }

        if ( $this->mask[0] != '')
        {
            $this->page->AddScript('x/x_core.js');
            $this->page->AddScript('x/x_event.js');
            $this->page->AddScript('m_editmask.js');
            $this->page->addJsCode("var editmask_{$this->name} = null;");
            $this->page->onLoad("editmask_{$this->name} = new Miolo.editMask('{$this->name}','{$this->mask[0]}',{$this->mask[1]},'{$this->mask[2]}');");
            $this->page->onSubmit("editmask_{$this->name}.onSubmit()");
        }

        if ( $this->autoPostBack )
        {
            $this->addAttribute( 'onblur', "document.{$this->page->name}.submit()" );
        }

        if ( $this->getClass() == '' )
        {
            $this->setClass( 'm-text-field' );
        }

    	if ( $this->readonly )
        {
            $this->SetClass('m-readonly');
            $this->AddAttribute('readonly');
            $this->setId($this->getId() . '_ro');
        }

        if ( ( $this->type=='text' )     ||
             ( $this->type=='password' ) ||
             ( $this->type=='file' )
            )
        {
            $size = '';

            if ( $this->type=='text' && $this->size )
            {
                $size = $this->size;
            }

            $text = $this->getRender('inputtext');
            $this->inner = $this->generateLabel() . $text;
        }
        else if ( ($this->type=='multiline') )
        {
            $text = $this->getRender('inputtextarea');
            $this->inner = $this->generateLabel() . $text;
        }
    }
}


class MPasswordField extends MTextField
{
    public function __construct( $name='', $value='', $label='', $size=20, $hint='', $validator=null )
    {
        parent::__construct( $name, $value, $label, $size, $hint, $validator );

        $this->type = 'password';
    }
}


class MHiddenField extends MTextField
{
    public function generate()
    {
        return $this->getRender('inputhidden');
    }
}


class MMultiLineField extends MTextField
{
    public function __construct( $name='', $value='', $label='', $size=20, $rows=1, $cols=20, $hint='', $validator=null )
    {
        parent::__construct( $name, $value, $label, $size, $hint, $validator );

        $this->type = 'multiline';
        $this->rows = $rows;
        $this->cols = $cols;
        if ( $this->getClass() == '' )
        {
            $this->setClass('m-multiline-field');
        }
    }
}


class MFileField extends MTextField
{
    public function __construct( $name='', $value='', $label='', $size=40, $hint='' )
    {
        parent::__construct( $name, $value, $label, $size, $hint );

        $this->type = 'file';
    }
}


class MCalendarField extends MTextField
{
    public function __construct( $name='', $value='', $label='', $size=20, $hint='', $type='calendar-win2k-1' )
    {
        // este campo vai usar o calendÃ¡rio javascript 
        parent::__construct( $name, $value, $label, $size, $hint);

        $page = $this->page;
        $page->addScript('datepicker/calendar.js');
        $page->addScript('datepicker/lang/calendar-pt-br.js');
        $page->addScript('datepicker/calendar-setup.js');

        $styleURL = $this->manager->getAbsoluteURL('scripts/datepicker/css/' . $type . '.css');

        $this->page->addStyleURL($styleURL);
        $this->setValidator( new MDATEDMYValidator( $name, $label ) );
    }


    public function generateInner()
    {
        parent::generateInner();

        if ( ! $this->readonly )
        {
            $location = $this->manager->getUI()->getImage('', 'cal.gif' );
            $imgName  = 'btn'.$this->name;

            $image = new MImage( $imgName, _M('Click to open the calendar'), $location );
            $code = new MJavascriptCode("Calendar.setup({inputField:\"{$this->name}\", ifFormat:\"%d/%m/%Y\", button:\"$imgName\"});"); 
            $image->generateInner();
            $this->inner .= '' . $image->getInner() . $code->generate();
        }
    }
}


class MCurrencyField extends MTextField
{
    private $ISOCode = 'REAL';

    public function __construct( $name='', $value='', $label='', $size=10, $hint='' )
    {
        // este campo vai usar validacao/formatacao javascript 
        parent::__construct( $name, $value, $label, $size, $hint );

        $page = $this->page;

        $page->addScript( 'm_utils.js' );
        $page->addScript( 'm_currency.js' );
    }


    public function getValue()
    {
        // internal ($this->value): float - 12345.67
        // external (return): formated string - R$ 12.345,67
        if (strpos($this->value, "%") === false)
        {
            $format = new MCurrencyFormatter();
            $value = $format->formatWithSymbol( $this->value, $this->ISOCode );
        }
        else
        {
            $value = $this->value;
        }
        return $value;
    }


    public function setValue( $value )
    {
        // internal ($this->value): float - 12345.67
        // external ($value): formated string - 12.345,67

        if (strpos($value, "%") === false)
        {
            $format = new MCurrencyFormatter();

            $value = $format->toDecimal($value, $this->ISOCode);
            $this->value = (float)$value;
        }
        else
        {
            $this->value = $value;
        }
    }


    public function generateInner()
    {
        $this->addAttribute( 'onBlur', "MIOLO_Currency(document.{$this->formName}.{$this->name})" );
        parent::generateInner();
    }
}

?>
